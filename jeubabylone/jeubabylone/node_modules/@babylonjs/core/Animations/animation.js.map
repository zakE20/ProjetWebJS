{"version":3,"file":"animation.js","sourceRoot":"","sources":["../../../sourceES6/core/Animations/animation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IEasingFunction, EasingFunction } from \"./easing\";\r\nimport { Vector3, Quaternion, Vector2, Color3, Size, Matrix } from \"../Maths/math\";\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\n\r\nimport { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { IAnimatable } from \"../Misc/tools\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { IAnimationKey, AnimationKeyInterpolation } from './animationKey';\r\nimport { AnimationRange } from './animationRange';\r\nimport { AnimationEvent } from './animationEvent';\r\nimport { Node } from \"../node\";\r\n\r\ndeclare type Animatable = import(\"./animatable\").Animatable;\r\ndeclare type RuntimeAnimation = import(\"./runtimeAnimation\").RuntimeAnimation;\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class _IAnimationState {\r\n    key: number;\r\n    repeatCount: number;\r\n    workValue?: any;\r\n    loopMode?: number;\r\n    offsetValue?: any;\r\n    highLimitValue?: any;\r\n}\r\n\r\n/**\r\n * Class used to store any kind of animation\r\n */\r\nexport class Animation {\r\n    /**\r\n     * Use matrix interpolation instead of using direct key value when animating matrices\r\n     */\r\n    public static AllowMatricesInterpolation = false;\r\n\r\n    /**\r\n     * When matrix interpolation is enabled, this boolean forces the system to use Matrix.DecomposeLerp instead of Matrix.Lerp. Interpolation is more precise but slower\r\n     */\r\n    public static AllowMatrixDecomposeForInterpolation = true;\r\n\r\n    /**\r\n     * Stores the key frames of the animation\r\n     */\r\n    private _keys: Array<IAnimationKey>;\r\n\r\n    /**\r\n     * Stores the easing function of the animation\r\n     */\r\n    private _easingFunction: IEasingFunction;\r\n\r\n    /**\r\n     * @hidden Internal use only\r\n     */\r\n    public _runtimeAnimations = new Array<RuntimeAnimation>();\r\n\r\n    /**\r\n     * The set of event that will be linked to this animation\r\n     */\r\n    private _events = new Array<AnimationEvent>();\r\n\r\n    /**\r\n     * Stores an array of target property paths\r\n     */\r\n    public targetPropertyPath: string[];\r\n\r\n    /**\r\n     * Stores the blending speed of the animation\r\n     */\r\n    public blendingSpeed = 0.01;\r\n\r\n    /**\r\n     * Stores the animation ranges for the animation\r\n     */\r\n    private _ranges: { [name: string]: Nullable<AnimationRange> } = {};\r\n\r\n    /**\r\n     * @hidden Internal use\r\n     */\r\n    public static _PrepareAnimation(name: string, targetProperty: string, framePerSecond: number, totalFrame: number,\r\n        from: any, to: any, loopMode?: number, easingFunction?: EasingFunction): Nullable<Animation> {\r\n        var dataType = undefined;\r\n\r\n        if (!isNaN(parseFloat(from)) && isFinite(from)) {\r\n            dataType = Animation.ANIMATIONTYPE_FLOAT;\r\n        } else if (from instanceof Quaternion) {\r\n            dataType = Animation.ANIMATIONTYPE_QUATERNION;\r\n        } else if (from instanceof Vector3) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR3;\r\n        } else if (from instanceof Vector2) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR2;\r\n        } else if (from instanceof Color3) {\r\n            dataType = Animation.ANIMATIONTYPE_COLOR3;\r\n        } else if (from instanceof Size) {\r\n            dataType = Animation.ANIMATIONTYPE_SIZE;\r\n        }\r\n\r\n        if (dataType == undefined) {\r\n            return null;\r\n        }\r\n\r\n        var animation = new Animation(name, targetProperty, framePerSecond, dataType, loopMode);\r\n\r\n        var keys: Array<IAnimationKey> = [{ frame: 0, value: from }, { frame: totalFrame, value: to }];\r\n        animation.setKeys(keys);\r\n\r\n        if (easingFunction !== undefined) {\r\n            animation.setEasingFunction(easingFunction);\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Sets up an animation\r\n     * @param property The property to animate\r\n     * @param animationType The animation type to apply\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param easingFunction The easing function used in the animation\r\n     * @returns The created animation\r\n     */\r\n    public static CreateAnimation(property: string, animationType: number, framePerSecond: number, easingFunction: EasingFunction): Animation {\r\n        var animation: Animation = new Animation(property + \"Animation\",\r\n            property,\r\n            framePerSecond,\r\n            animationType,\r\n            Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        animation.setEasingFunction(easingFunction);\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Create and start an animation on a node\r\n     * @param name defines the name of the global animation that will be run on all nodes\r\n     * @param node defines the root node where the animation will take place\r\n     * @param targetProperty defines property to animate\r\n     * @param framePerSecond defines the number of frame per second yo use\r\n     * @param totalFrame defines the number of frames in total\r\n     * @param from defines the initial value\r\n     * @param to defines the final value\r\n     * @param loopMode defines which loop mode you want to use (off by default)\r\n     * @param easingFunction defines the easing function to use (linear by default)\r\n     * @param onAnimationEnd defines the callback to call when animation end\r\n     * @returns the animatable created for this animation\r\n     */\r\n    public static CreateAndStartAnimation(name: string, node: Node, targetProperty: string,\r\n        framePerSecond: number, totalFrame: number,\r\n        from: any, to: any, loopMode?: number, easingFunction?: EasingFunction, onAnimationEnd?: () => void): Nullable<Animatable> {\r\n\r\n        var animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        return node.getScene().beginDirectAnimation(node, [animation], 0, totalFrame, (animation.loopMode === 1), 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Create and start an animation on a node and its descendants\r\n     * @param name defines the name of the global animation that will be run on all nodes\r\n     * @param node defines the root node where the animation will take place\r\n     * @param directDescendantsOnly if true only direct descendants will be used, if false direct and also indirect (children of children, an so on in a recursive manner) descendants will be used\r\n     * @param targetProperty defines property to animate\r\n     * @param framePerSecond defines the number of frame per second to use\r\n     * @param totalFrame defines the number of frames in total\r\n     * @param from defines the initial value\r\n     * @param to defines the final value\r\n     * @param loopMode defines which loop mode you want to use (off by default)\r\n     * @param easingFunction defines the easing function to use (linear by default)\r\n     * @param onAnimationEnd defines the callback to call when an animation ends (will be called once per node)\r\n     * @returns the list of animatables created for all nodes\r\n     * @example https://www.babylonjs-playground.com/#MH0VLI\r\n     */\r\n    public static CreateAndStartHierarchyAnimation(name: string, node: Node, directDescendantsOnly: boolean, targetProperty: string,\r\n        framePerSecond: number, totalFrame: number,\r\n        from: any, to: any, loopMode?: number, easingFunction?: EasingFunction, onAnimationEnd?: () => void): Nullable<Animatable[]> {\r\n\r\n        var animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        let scene = node.getScene();\r\n        return scene.beginDirectHierarchyAnimation(node, directDescendantsOnly, [animation], 0, totalFrame, (animation.loopMode === 1), 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation, merges it with the existing animations and starts it\r\n     * @param name Name of the animation\r\n     * @param node Node which contains the scene that begins the animations\r\n     * @param targetProperty Specifies which property to animate\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param totalFrame The total number of frames\r\n     * @param from The frame at the beginning of the animation\r\n     * @param to The frame at the end of the animation\r\n     * @param loopMode Specifies the loop mode of the animation\r\n     * @param easingFunction (Optional) The easing function of the animation, which allow custom mathematical formulas for animations\r\n     * @param onAnimationEnd Callback to run once the animation is complete\r\n     * @returns Nullable animation\r\n     */\r\n    public static CreateMergeAndStartAnimation(name: string, node: Node, targetProperty: string,\r\n        framePerSecond: number, totalFrame: number,\r\n        from: any, to: any, loopMode?: number, easingFunction?: EasingFunction, onAnimationEnd?: () => void): Nullable<Animatable> {\r\n\r\n        var animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        node.animations.push(animation);\r\n\r\n        return node.getScene().beginAnimation(node, 0, totalFrame, (animation.loopMode === 1), 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Transition property of an host to the target Value\r\n     * @param property The property to transition\r\n     * @param targetValue The target Value of the property\r\n     * @param host The object where the property to animate belongs\r\n     * @param scene Scene used to run the animation\r\n     * @param frameRate Framerate (in frame/s) to use\r\n     * @param transition The transition type we want to use\r\n     * @param duration The duration of the animation, in milliseconds\r\n     * @param onAnimationEnd Callback trigger at the end of the animation\r\n     * @returns Nullable animation\r\n     */\r\n    public static TransitionTo(property: string, targetValue: any, host: any, scene: Scene, frameRate: number, transition: Animation, duration: number, onAnimationEnd: Nullable<() => void> = null): Nullable<Animatable> {\r\n        if (duration <= 0) {\r\n            host[property] = targetValue;\r\n            if (onAnimationEnd) {\r\n                onAnimationEnd();\r\n            }\r\n            return null;\r\n        }\r\n\r\n        var endFrame: number = frameRate * (duration / 1000);\r\n\r\n        transition.setKeys([{\r\n            frame: 0,\r\n            value: host[property].clone ? host[property].clone() : host[property]\r\n        },\r\n        {\r\n            frame: endFrame,\r\n            value: targetValue\r\n        }]);\r\n\r\n        if (!host.animations) {\r\n            host.animations = [];\r\n        }\r\n\r\n        host.animations.push(transition);\r\n\r\n        var animation: Animatable = scene.beginAnimation(host, 0, endFrame, false);\r\n        animation.onAnimationEnd = onAnimationEnd;\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Return the array of runtime animations currently using this animation\r\n     */\r\n    public get runtimeAnimations(): RuntimeAnimation[] {\r\n        return this._runtimeAnimations;\r\n    }\r\n\r\n    /**\r\n     * Specifies if any of the runtime animations are currently running\r\n     */\r\n    public get hasRunningRuntimeAnimations(): boolean {\r\n        for (var runtimeAnimation of this._runtimeAnimations) {\r\n            if (!runtimeAnimation.isStopped) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Initializes the animation\r\n     * @param name Name of the animation\r\n     * @param targetProperty Property to animate\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param dataType The data type of the animation\r\n     * @param loopMode The loop mode of the animation\r\n     * @param enableBlending Specifies if blending should be enabled\r\n     */\r\n    constructor(\r\n        /**Name of the animation */\r\n        public name: string,\r\n        /**Property to animate */\r\n        public targetProperty: string,\r\n        /**The frames per second of the animation */\r\n        public framePerSecond: number,\r\n        /**The data type of the animation */\r\n        public dataType: number,\r\n        /**The loop mode of the animation */\r\n        public loopMode?: number,\r\n        /**Specifies if blending should be enabled */\r\n        public enableBlending?: boolean) {\r\n        this.targetPropertyPath = targetProperty.split(\".\");\r\n        this.dataType = dataType;\r\n        this.loopMode = loopMode === undefined ? Animation.ANIMATIONLOOPMODE_CYCLE : loopMode;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Converts the animation to a string\r\n     * @param fullDetails support for multiple levels of logging within scene loading\r\n     * @returns String form of the animation\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        var ret = \"Name: \" + this.name + \", property: \" + this.targetProperty;\r\n        ret += \", datatype: \" + ([\"Float\", \"Vector3\", \"Quaternion\", \"Matrix\", \"Color3\", \"Vector2\"])[this.dataType];\r\n        ret += \", nKeys: \" + (this._keys ? this._keys.length : \"none\");\r\n        ret += \", nRanges: \" + (this._ranges ? Object.keys(this._ranges).length : \"none\");\r\n        if (fullDetails) {\r\n            ret += \", Ranges: {\";\r\n            var first = true;\r\n            for (var name in this._ranges) {\r\n                if (first) {\r\n                    ret += \", \";\r\n                    first = false;\r\n                }\r\n                ret += name;\r\n            }\r\n            ret += \"}\";\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Add an event to this animation\r\n     * @param event Event to add\r\n     */\r\n    public addEvent(event: AnimationEvent): void {\r\n        this._events.push(event);\r\n    }\r\n\r\n    /**\r\n     * Remove all events found at the given frame\r\n     * @param frame The frame to remove events from\r\n     */\r\n    public removeEvents(frame: number): void {\r\n        for (var index = 0; index < this._events.length; index++) {\r\n            if (this._events[index].frame === frame) {\r\n                this._events.splice(index, 1);\r\n                index--;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves all the events from the animation\r\n     * @returns Events from the animation\r\n     */\r\n    public getEvents(): AnimationEvent[] {\r\n        return this._events;\r\n    }\r\n\r\n    /**\r\n     * Creates an animation range\r\n     * @param name Name of the animation range\r\n     * @param from Starting frame of the animation range\r\n     * @param to Ending frame of the animation\r\n     */\r\n    public createRange(name: string, from: number, to: number): void {\r\n        // check name not already in use; could happen for bones after serialized\r\n        if (!this._ranges[name]) {\r\n            this._ranges[name] = new AnimationRange(name, from, to);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes an animation range by name\r\n     * @param name Name of the animation range to delete\r\n     * @param deleteFrames Specifies if the key frames for the range should also be deleted (true) or not (false)\r\n     */\r\n    public deleteRange(name: string, deleteFrames = true): void {\r\n        let range = this._ranges[name];\r\n        if (!range) {\r\n            return;\r\n\r\n        }\r\n        if (deleteFrames) {\r\n            var from = range.from;\r\n            var to = range.to;\r\n\r\n            // this loop MUST go high to low for multiple splices to work\r\n            for (var key = this._keys.length - 1; key >= 0; key--) {\r\n                if (this._keys[key].frame >= from && this._keys[key].frame <= to) {\r\n                    this._keys.splice(key, 1);\r\n                }\r\n            }\r\n        }\r\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the animation range by name, or null if not defined\r\n     * @param name Name of the animation range\r\n     * @returns Nullable animation range\r\n     */\r\n    public getRange(name: string): Nullable<AnimationRange> {\r\n        return this._ranges[name];\r\n    }\r\n\r\n    /**\r\n     * Gets the key frames from the animation\r\n     * @returns The key frames of the animation\r\n     */\r\n    public getKeys(): Array<IAnimationKey> {\r\n        return this._keys;\r\n    }\r\n\r\n    /**\r\n     * Gets the highest frame rate of the animation\r\n     * @returns Highest frame rate of the animation\r\n     */\r\n    public getHighestFrame(): number {\r\n        var ret = 0;\r\n\r\n        for (var key = 0, nKeys = this._keys.length; key < nKeys; key++) {\r\n            if (ret < this._keys[key].frame) {\r\n                ret = this._keys[key].frame;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the easing function of the animation\r\n     * @returns Easing function of the animation\r\n     */\r\n    public getEasingFunction(): IEasingFunction {\r\n        return this._easingFunction;\r\n    }\r\n\r\n    /**\r\n     * Sets the easing function of the animation\r\n     * @param easingFunction A custom mathematical formula for animation\r\n     */\r\n    public setEasingFunction(easingFunction: EasingFunction): void {\r\n        this._easingFunction = easingFunction;\r\n    }\r\n\r\n    /**\r\n     * Interpolates a scalar linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public floatInterpolateFunction(startValue: number, endValue: number, gradient: number): number {\r\n        return Scalar.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a scalar cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public floatInterpolateFunctionWithTangents(startValue: number, outTangent: number, endValue: number, inTangent: number, gradient: number): number {\r\n        return Scalar.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a quaternion using a spherical linear interpolation\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated quaternion value\r\n     */\r\n    public quaternionInterpolateFunction(startValue: Quaternion, endValue: Quaternion, gradient: number): Quaternion {\r\n        return Quaternion.Slerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a quaternion cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated quaternion value\r\n     */\r\n    public quaternionInterpolateFunctionWithTangents(startValue: Quaternion, outTangent: Quaternion, endValue: Quaternion, inTangent: Quaternion, gradient: number): Quaternion {\r\n        return Quaternion.Hermite(startValue, outTangent, endValue, inTangent, gradient).normalize();\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector3 linearl\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public vector3InterpolateFunction(startValue: Vector3, endValue: Vector3, gradient: number): Vector3 {\r\n        return Vector3.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector3 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns InterpolatedVector3 value\r\n     */\r\n    public vector3InterpolateFunctionWithTangents(startValue: Vector3, outTangent: Vector3, endValue: Vector3, inTangent: Vector3, gradient: number): Vector3 {\r\n        return Vector3.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector2 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Vector2 value\r\n     */\r\n    public vector2InterpolateFunction(startValue: Vector2, endValue: Vector2, gradient: number): Vector2 {\r\n        return Vector2.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector2 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Vector2 value\r\n     */\r\n    public vector2InterpolateFunctionWithTangents(startValue: Vector2, outTangent: Vector2, endValue: Vector2, inTangent: Vector2, gradient: number): Vector2 {\r\n        return Vector2.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a size linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Size value\r\n     */\r\n    public sizeInterpolateFunction(startValue: Size, endValue: Size, gradient: number): Size {\r\n        return Size.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color3 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Color3 value\r\n     */\r\n    public color3InterpolateFunction(startValue: Color3, endValue: Color3, gradient: number): Color3 {\r\n        return Color3.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * @hidden Internal use only\r\n     */\r\n    public _getKeyValue(value: any): any {\r\n        if (typeof value === \"function\") {\r\n            return value();\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @hidden Internal use only\r\n     */\r\n    public _interpolate(currentFrame: number, state: _IAnimationState): any {\r\n        if (state.loopMode === Animation.ANIMATIONLOOPMODE_CONSTANT && state.repeatCount > 0) {\r\n            return state.highLimitValue.clone ? state.highLimitValue.clone() : state.highLimitValue;\r\n        }\r\n\r\n        const keys = this._keys;\r\n        if (keys.length === 1) {\r\n            return this._getKeyValue(keys[0].value);\r\n        }\r\n\r\n        var startKeyIndex = state.key;\r\n\r\n        if (keys[startKeyIndex].frame >= currentFrame) {\r\n            while (startKeyIndex - 1 >= 0 && keys[startKeyIndex].frame >= currentFrame) {\r\n                startKeyIndex--;\r\n            }\r\n        }\r\n\r\n        for (var key = startKeyIndex; key < keys.length; key++) {\r\n            var endKey = keys[key + 1];\r\n\r\n            if (endKey.frame >= currentFrame) {\r\n                state.key = key;\r\n                var startKey = keys[key];\r\n                var startValue = this._getKeyValue(startKey.value);\r\n                if (startKey.interpolation === AnimationKeyInterpolation.STEP) {\r\n                    return startValue;\r\n                }\r\n\r\n                var endValue = this._getKeyValue(endKey.value);\r\n\r\n                var useTangent = startKey.outTangent !== undefined && endKey.inTangent !== undefined;\r\n                var frameDelta = endKey.frame - startKey.frame;\r\n\r\n                // gradient : percent of currentFrame between the frame inf and the frame sup\r\n                var gradient = (currentFrame - startKey.frame) / frameDelta;\r\n\r\n                // check for easingFunction and correction of gradient\r\n                let easingFunction = this.getEasingFunction();\r\n                if (easingFunction != null) {\r\n                    gradient = easingFunction.ease(gradient);\r\n                }\r\n\r\n                switch (this.dataType) {\r\n                    // Float\r\n                    case Animation.ANIMATIONTYPE_FLOAT:\r\n                        var floatValue = useTangent ? this.floatInterpolateFunctionWithTangents(startValue, startKey.outTangent * frameDelta, endValue, endKey.inTangent * frameDelta, gradient) : this.floatInterpolateFunction(startValue, endValue, gradient);\r\n                        switch (state.loopMode) {\r\n                            case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                            case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                                return floatValue;\r\n                            case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                                return state.offsetValue * state.repeatCount + floatValue;\r\n                        }\r\n                        break;\r\n                    // Quaternion\r\n                    case Animation.ANIMATIONTYPE_QUATERNION:\r\n                        var quatValue = useTangent ? this.quaternionInterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient) : this.quaternionInterpolateFunction(startValue, endValue, gradient);\r\n                        switch (state.loopMode) {\r\n                            case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                            case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                                return quatValue;\r\n                            case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                                return quatValue.addInPlace(state.offsetValue.scale(state.repeatCount));\r\n                        }\r\n\r\n                        return quatValue;\r\n                    // Vector3\r\n                    case Animation.ANIMATIONTYPE_VECTOR3:\r\n                        var vec3Value = useTangent ? this.vector3InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient) : this.vector3InterpolateFunction(startValue, endValue, gradient);\r\n                        switch (state.loopMode) {\r\n                            case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                            case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                                return vec3Value;\r\n                            case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                                return vec3Value.add(state.offsetValue.scale(state.repeatCount));\r\n                        }\r\n                    // Vector2\r\n                    case Animation.ANIMATIONTYPE_VECTOR2:\r\n                        var vec2Value = useTangent ? this.vector2InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient) : this.vector2InterpolateFunction(startValue, endValue, gradient);\r\n                        switch (state.loopMode) {\r\n                            case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                            case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                                return vec2Value;\r\n                            case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                                return vec2Value.add(state.offsetValue.scale(state.repeatCount));\r\n                        }\r\n                    // Size\r\n                    case Animation.ANIMATIONTYPE_SIZE:\r\n                        switch (state.loopMode) {\r\n                            case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                            case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                                return this.sizeInterpolateFunction(startValue, endValue, gradient);\r\n                            case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                                return this.sizeInterpolateFunction(startValue, endValue, gradient).add(state.offsetValue.scale(state.repeatCount));\r\n                        }\r\n                    // Color3\r\n                    case Animation.ANIMATIONTYPE_COLOR3:\r\n                        switch (state.loopMode) {\r\n                            case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                            case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                                return this.color3InterpolateFunction(startValue, endValue, gradient);\r\n                            case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                                return this.color3InterpolateFunction(startValue, endValue, gradient).add(state.offsetValue.scale(state.repeatCount));\r\n                        }\r\n                    // Matrix\r\n                    case Animation.ANIMATIONTYPE_MATRIX:\r\n                        switch (state.loopMode) {\r\n                            case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                            case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                                if (Animation.AllowMatricesInterpolation) {\r\n                                    return this.matrixInterpolateFunction(startValue, endValue, gradient, state.workValue);\r\n                                }\r\n                            case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                                return startValue;\r\n                        }\r\n                    default:\r\n                        break;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this._getKeyValue(keys[keys.length - 1].value);\r\n    }\r\n\r\n    /**\r\n     * Defines the function to use to interpolate matrices\r\n     * @param startValue defines the start matrix\r\n     * @param endValue defines the end matrix\r\n     * @param gradient defines the gradient between both matrices\r\n     * @param result defines an optional target matrix where to store the interpolation\r\n     * @returns the interpolated matrix\r\n     */\r\n    public matrixInterpolateFunction(startValue: Matrix, endValue: Matrix, gradient: number, result?: Matrix): Matrix {\r\n        if (Animation.AllowMatrixDecomposeForInterpolation) {\r\n            if (result) {\r\n                Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\r\n                return result;\r\n            }\r\n            return Matrix.DecomposeLerp(startValue, endValue, gradient);\r\n        }\r\n\r\n        if (result) {\r\n            Matrix.LerpToRef(startValue, endValue, gradient, result);\r\n            return result;\r\n        }\r\n        return Matrix.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Makes a copy of the animation\r\n     * @returns Cloned animation\r\n     */\r\n    public clone(): Animation {\r\n        var clone = new Animation(this.name, this.targetPropertyPath.join(\".\"), this.framePerSecond, this.dataType, this.loopMode);\r\n\r\n        clone.enableBlending = this.enableBlending;\r\n        clone.blendingSpeed = this.blendingSpeed;\r\n\r\n        if (this._keys) {\r\n            clone.setKeys(this._keys);\r\n        }\r\n\r\n        if (this._ranges) {\r\n            clone._ranges = {};\r\n            for (var name in this._ranges) {\r\n                let range = this._ranges[name];\r\n                if (!range) {\r\n                    continue;\r\n                }\r\n                clone._ranges[name] = range.clone();\r\n            }\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Sets the key frames of the animation\r\n     * @param values The animation key frames to set\r\n     */\r\n    public setKeys(values: Array<IAnimationKey>): void {\r\n        this._keys = values.slice(0);\r\n    }\r\n\r\n    /**\r\n     * Serializes the animation to an object\r\n     * @returns Serialized object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.property = this.targetProperty;\r\n        serializationObject.framePerSecond = this.framePerSecond;\r\n        serializationObject.dataType = this.dataType;\r\n        serializationObject.loopBehavior = this.loopMode;\r\n        serializationObject.enableBlending = this.enableBlending;\r\n        serializationObject.blendingSpeed = this.blendingSpeed;\r\n\r\n        var dataType = this.dataType;\r\n        serializationObject.keys = [];\r\n        var keys = this.getKeys();\r\n        for (var index = 0; index < keys.length; index++) {\r\n            var animationKey = keys[index];\r\n\r\n            var key: any = {};\r\n            key.frame = animationKey.frame;\r\n\r\n            switch (dataType) {\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    key.values = [animationKey.value];\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                    key.values = animationKey.value.asArray();\r\n                    break;\r\n            }\r\n\r\n            serializationObject.keys.push(key);\r\n        }\r\n\r\n        serializationObject.ranges = [];\r\n        for (var name in this._ranges) {\r\n            let source = this._ranges[name];\r\n\r\n            if (!source) {\r\n                continue;\r\n            }\r\n            var range: any = {};\r\n            range.name = name;\r\n            range.from = source.from;\r\n            range.to = source.to;\r\n            serializationObject.ranges.push(range);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Float animation type\r\n     */\r\n    private static _ANIMATIONTYPE_FLOAT = 0;\r\n    /**\r\n     * Vector3 animation type\r\n     */\r\n    private static _ANIMATIONTYPE_VECTOR3 = 1;\r\n    /**\r\n     * Quaternion animation type\r\n     */\r\n    private static _ANIMATIONTYPE_QUATERNION = 2;\r\n    /**\r\n     * Matrix animation type\r\n     */\r\n    private static _ANIMATIONTYPE_MATRIX = 3;\r\n    /**\r\n     * Color3 animation type\r\n     */\r\n    private static _ANIMATIONTYPE_COLOR3 = 4;\r\n    /**\r\n     * Vector2 animation type\r\n     */\r\n    private static _ANIMATIONTYPE_VECTOR2 = 5;\r\n    /**\r\n     * Size animation type\r\n     */\r\n    private static _ANIMATIONTYPE_SIZE = 6;\r\n    /**\r\n     * Relative Loop Mode\r\n     */\r\n    private static _ANIMATIONLOOPMODE_RELATIVE = 0;\r\n    /**\r\n     * Cycle Loop Mode\r\n     */\r\n    private static _ANIMATIONLOOPMODE_CYCLE = 1;\r\n    /**\r\n     * Constant Loop Mode\r\n     */\r\n    private static _ANIMATIONLOOPMODE_CONSTANT = 2;\r\n\r\n    /**\r\n     * Get the float animation type\r\n     */\r\n    public static get ANIMATIONTYPE_FLOAT(): number {\r\n        return Animation._ANIMATIONTYPE_FLOAT;\r\n    }\r\n\r\n    /**\r\n     * Get the Vector3 animation type\r\n     */\r\n    public static get ANIMATIONTYPE_VECTOR3(): number {\r\n        return Animation._ANIMATIONTYPE_VECTOR3;\r\n    }\r\n\r\n    /**\r\n     * Get the Vector2 animation type\r\n     */\r\n    public static get ANIMATIONTYPE_VECTOR2(): number {\r\n        return Animation._ANIMATIONTYPE_VECTOR2;\r\n    }\r\n\r\n    /**\r\n     * Get the Size animation type\r\n     */\r\n    public static get ANIMATIONTYPE_SIZE(): number {\r\n        return Animation._ANIMATIONTYPE_SIZE;\r\n    }\r\n\r\n    /**\r\n     * Get the Quaternion animation type\r\n     */\r\n    public static get ANIMATIONTYPE_QUATERNION(): number {\r\n        return Animation._ANIMATIONTYPE_QUATERNION;\r\n    }\r\n\r\n    /**\r\n     * Get the Matrix animation type\r\n     */\r\n    public static get ANIMATIONTYPE_MATRIX(): number {\r\n        return Animation._ANIMATIONTYPE_MATRIX;\r\n    }\r\n\r\n    /**\r\n     * Get the Color3 animation type\r\n     */\r\n    public static get ANIMATIONTYPE_COLOR3(): number {\r\n        return Animation._ANIMATIONTYPE_COLOR3;\r\n    }\r\n\r\n    /**\r\n     * Get the Relative Loop Mode\r\n     */\r\n    public static get ANIMATIONLOOPMODE_RELATIVE(): number {\r\n        return Animation._ANIMATIONLOOPMODE_RELATIVE;\r\n    }\r\n\r\n    /**\r\n     * Get the Cycle Loop Mode\r\n     */\r\n    public static get ANIMATIONLOOPMODE_CYCLE(): number {\r\n        return Animation._ANIMATIONLOOPMODE_CYCLE;\r\n    }\r\n\r\n    /**\r\n     * Get the Constant Loop Mode\r\n     */\r\n    public static get ANIMATIONLOOPMODE_CONSTANT(): number {\r\n        return Animation._ANIMATIONLOOPMODE_CONSTANT;\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _UniversalLerp(left: any, right: any, amount: number): any {\r\n        let constructor = left.constructor;\r\n        if (constructor.Lerp) { // Lerp supported\r\n            return constructor.Lerp(left, right, amount);\r\n        } else if (constructor.Slerp) { // Slerp supported\r\n            return constructor.Slerp(left, right, amount);\r\n        } else if (left.toFixed) { // Number\r\n            return left * (1.0 - amount) + amount * right;\r\n        } else { // Blending not supported\r\n            return right;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses an animation object and creates an animation\r\n     * @param parsedAnimation Parsed animation object\r\n     * @returns Animation object\r\n     */\r\n    public static Parse(parsedAnimation: any): Animation {\r\n        var animation = new Animation(parsedAnimation.name, parsedAnimation.property, parsedAnimation.framePerSecond, parsedAnimation.dataType, parsedAnimation.loopBehavior);\r\n\r\n        var dataType = parsedAnimation.dataType;\r\n        var keys: Array<IAnimationKey> = [];\r\n        var data;\r\n        var index: number;\r\n\r\n        if (parsedAnimation.enableBlending) {\r\n            animation.enableBlending = parsedAnimation.enableBlending;\r\n        }\r\n\r\n        if (parsedAnimation.blendingSpeed) {\r\n            animation.blendingSpeed = parsedAnimation.blendingSpeed;\r\n        }\r\n\r\n        for (index = 0; index < parsedAnimation.keys.length; index++) {\r\n            var key = parsedAnimation.keys[index];\r\n            var inTangent: any;\r\n            var outTangent: any;\r\n\r\n            switch (dataType) {\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    data = key.values[0];\r\n                    if (key.values.length >= 1) {\r\n                        inTangent = key.values[1];\r\n                    }\r\n                    if (key.values.length >= 2) {\r\n                        outTangent = key.values[2];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                    data = Quaternion.FromArray(key.values);\r\n                    if (key.values.length >= 8) {\r\n                        var _inTangent = Quaternion.FromArray(key.values.slice(4, 8));\r\n                        if (!_inTangent.equals(Quaternion.Zero())) {\r\n                            inTangent = _inTangent;\r\n                        }\r\n                    }\r\n                    if (key.values.length >= 12) {\r\n                        var _outTangent = Quaternion.FromArray(key.values.slice(8, 12));\r\n                        if (!_outTangent.equals(Quaternion.Zero())) {\r\n                            outTangent = _outTangent;\r\n                        }\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                    data = Matrix.FromArray(key.values);\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                    data = Color3.FromArray(key.values);\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                default:\r\n                    data = Vector3.FromArray(key.values);\r\n                    break;\r\n            }\r\n\r\n            var keyData: any = {};\r\n            keyData.frame = key.frame;\r\n            keyData.value = data;\r\n\r\n            if (inTangent != undefined) {\r\n                keyData.inTangent = inTangent;\r\n            }\r\n            if (outTangent != undefined) {\r\n                keyData.outTangent = outTangent;\r\n            }\r\n            keys.push(keyData);\r\n        }\r\n\r\n        animation.setKeys(keys);\r\n\r\n        if (parsedAnimation.ranges) {\r\n            for (index = 0; index < parsedAnimation.ranges.length; index++) {\r\n                data = parsedAnimation.ranges[index];\r\n                animation.createRange(data.name, data.from, data.to);\r\n            }\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Appends the serialized animations from the source animations\r\n     * @param source Source containing the animations\r\n     * @param destination Target to store the animations\r\n     */\r\n    public static AppendSerializedAnimations(source: IAnimatable, destination: any): void {\r\n        SerializationHelper.AppendSerializedAnimations(source, destination);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.Animation\"] = Animation;\r\nNode._AnimationRangeFactory = (name: string, from: number, to: number) => new AnimationRange(name, from, to);"]}