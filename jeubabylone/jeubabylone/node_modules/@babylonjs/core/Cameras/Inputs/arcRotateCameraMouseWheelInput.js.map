{"version":3,"file":"arcRotateCameraMouseWheelInput.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/Inputs/arcRotateCameraMouseWheelInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { EventState, Observer } from \"../../Misc/observable\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { PointerInfo, PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Scalar } from '../../Maths/math.scalar';\r\n\r\n/**\r\n * Manage the mouse wheel inputs to control an arc rotate camera.\r\n * @see http://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class ArcRotateCameraMouseWheelInput implements ICameraInput<ArcRotateCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Gets or Set the mouse wheel precision or how fast is the camera zooming.\r\n     */\r\n    @serialize()\r\n    public wheelPrecision = 3.0;\r\n\r\n    /**\r\n     * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when wheel is used.\r\n     */\r\n    @serialize()\r\n    public wheelDeltaPercentage = 0;\r\n\r\n    private _wheel: Nullable<(p: PointerInfo, s: EventState) => void>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n\r\n    private computeDeltaFromMouseWheelLegacyEvent(mouseWheelLegacyEvent: any, radius: number) {\r\n        var delta = 0;\r\n        var wheelDelta = (mouseWheelLegacyEvent.wheelDelta * 0.01 * this.wheelDeltaPercentage) * radius;\r\n        if (mouseWheelLegacyEvent.wheelDelta > 0) {\r\n            delta = wheelDelta / (1.0 + this.wheelDeltaPercentage);\r\n        } else {\r\n            delta = wheelDelta * (1.0 + this.wheelDeltaPercentage);\r\n        }\r\n        return delta;\r\n    }\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param element Defines the element the controls should be listened from\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(element: HTMLElement, noPreventDefault?: boolean): void {\r\n        this._wheel = (p, s) => {\r\n            //sanity check - this should be a PointerWheel event.\r\n            if (p.type !== PointerEventTypes.POINTERWHEEL) { return; }\r\n            var event = <MouseWheelEvent>p.event;\r\n            var delta = 0;\r\n\r\n            let mouseWheelLegacyEvent = event as any;\r\n            if (mouseWheelLegacyEvent.wheelDelta) {\r\n                if (this.wheelDeltaPercentage) {\r\n                    delta = this.computeDeltaFromMouseWheelLegacyEvent(mouseWheelLegacyEvent, this.camera.radius);\r\n\r\n                    // If zooming in, estimate the target radius and use that to compute the delta for inertia\r\n                    // this will stop multiple scroll events zooming in from adding too much inertia\r\n                    if (delta > 0) {\r\n                        var estimatedTargetRadius = this.camera.radius;\r\n                        var targetInertia = this.camera.inertialRadiusOffset + delta;\r\n                        for (var i = 0; i < 20 && Math.abs(targetInertia) > 0.001; i++) {\r\n                            estimatedTargetRadius -= targetInertia;\r\n                            targetInertia *= this.camera.inertia;\r\n                        }\r\n                        estimatedTargetRadius = Scalar.Clamp(estimatedTargetRadius, 0, Number.MAX_VALUE);\r\n                        delta = this.computeDeltaFromMouseWheelLegacyEvent(mouseWheelLegacyEvent, estimatedTargetRadius);\r\n                    }\r\n                } else {\r\n                    delta = mouseWheelLegacyEvent.wheelDelta / (this.wheelPrecision * 40);\r\n                }\r\n            } else {\r\n                let deltaValue = event.deltaY || event.detail;\r\n                delta = -deltaValue / this.wheelPrecision;\r\n            }\r\n\r\n            if (delta) {\r\n                this.camera.inertialRadiusOffset += delta;\r\n            }\r\n\r\n            if (event.preventDefault) {\r\n                if (!noPreventDefault) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param element Defines the element to stop listening the inputs from\r\n     */\r\n    public detachControl(element: Nullable<HTMLElement>): void {\r\n        if (this._observer && element) {\r\n            this.camera.getScene().onPointerObservable.remove(this._observer);\r\n            this._observer = null;\r\n            this._wheel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mousewheel\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"ArcRotateCameraMouseWheelInput\"] = ArcRotateCameraMouseWheelInput;\r\n"]}