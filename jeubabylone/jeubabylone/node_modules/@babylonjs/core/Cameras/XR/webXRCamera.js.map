{"version":3,"file":"webXRCamera.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/XR/webXRCamera.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector3, Matrix, Quaternion, Viewport } from \"../../Maths/math\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Camera } from \"../../Cameras/camera\";\r\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { TargetCamera } from \"../../Cameras/targetCamera\";\r\nimport { WebXRSessionManager } from \"./webXRSessionManager\";\r\n\r\n/**\r\n * WebXR Camera which holds the views for the xrSession\r\n * @see https://doc.babylonjs.com/how_to/webxr\r\n */\r\nexport class WebXRCamera extends FreeCamera {\r\n    private static _TmpMatrix = new Matrix();\r\n\r\n    /**\r\n     * Creates a new webXRCamera, this should only be set at the camera after it has been updated by the xrSessionManager\r\n     * @param name the name of the camera\r\n     * @param scene the scene to add the camera to\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, Vector3.Zero(), scene);\r\n\r\n        // Initial camera configuration\r\n        this.minZ = 0;\r\n        this.rotationQuaternion = new Quaternion();\r\n        this.cameraRigMode = Camera.RIG_MODE_CUSTOM;\r\n        this.updateUpVectorFromRotation = true;\r\n        this._updateNumberOfRigCameras(1);\r\n    }\r\n\r\n    private _updateNumberOfRigCameras(viewCount = 1) {\r\n        while (this.rigCameras.length < viewCount) {\r\n            var newCamera = new TargetCamera(\"view: \" + this.rigCameras.length, Vector3.Zero(), this.getScene());\r\n            newCamera.minZ = 0;\r\n            newCamera.parent = this;\r\n            newCamera.rotationQuaternion = new Quaternion();\r\n            newCamera.updateUpVectorFromRotation = true;\r\n            this.rigCameras.push(newCamera);\r\n        }\r\n        while (this.rigCameras.length > viewCount) {\r\n            var removedCamera = this.rigCameras.pop();\r\n            if (removedCamera) {\r\n                removedCamera.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _updateForDualEyeDebugging(pupilDistance = 0.01) {\r\n        // Create initial camera rigs\r\n        this._updateNumberOfRigCameras(2);\r\n        this.rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\r\n        this.rigCameras[0].position.x = -pupilDistance / 2;\r\n        this.rigCameras[0].outputRenderTarget = null;\r\n        this.rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\r\n        this.rigCameras[1].position.x = pupilDistance / 2;\r\n        this.rigCameras[1].outputRenderTarget = null;\r\n    }\r\n\r\n    /**\r\n     * Updates the cameras position from the current pose information of the  XR session\r\n     * @param xrSessionManager the session containing pose information\r\n     * @returns true if the camera has been updated, false if the session did not contain pose or frame data\r\n     */\r\n    public updateFromXRSessionManager(xrSessionManager: WebXRSessionManager) {\r\n        // Ensure all frame data is available\r\n        if (!xrSessionManager._currentXRFrame || !xrSessionManager._currentXRFrame.getDevicePose) {\r\n            return false;\r\n        }\r\n        var pose = xrSessionManager._currentXRFrame.getDevicePose(xrSessionManager._frameOfReference);\r\n        if (!pose || !pose.poseModelMatrix) {\r\n            return false;\r\n        }\r\n\r\n        // Update the parent cameras matrix\r\n        Matrix.FromFloat32ArrayToRefScaled(pose.poseModelMatrix, 0, 1, WebXRCamera._TmpMatrix);\r\n        if (!this._scene.useRightHandedSystem) {\r\n            WebXRCamera._TmpMatrix.toggleModelMatrixHandInPlace();\r\n        }\r\n        WebXRCamera._TmpMatrix.getTranslationToRef(this.position);\r\n        WebXRCamera._TmpMatrix.getRotationMatrixToRef(WebXRCamera._TmpMatrix);\r\n        Quaternion.FromRotationMatrixToRef(WebXRCamera._TmpMatrix, this.rotationQuaternion);\r\n        this.computeWorldMatrix();\r\n\r\n        // Update camera rigs\r\n        this._updateNumberOfRigCameras(xrSessionManager._currentXRFrame.views.length);\r\n        xrSessionManager._currentXRFrame.views.forEach((view, i) => {\r\n            // Update view/projection matrix\r\n            Matrix.FromFloat32ArrayToRefScaled(pose.getViewMatrix(view), 0, 1, this.rigCameras[i]._computedViewMatrix);\r\n            Matrix.FromFloat32ArrayToRefScaled(view.projectionMatrix, 0, 1, this.rigCameras[i]._projectionMatrix);\r\n            if (!this._scene.useRightHandedSystem) {\r\n                this.rigCameras[i]._computedViewMatrix.toggleModelMatrixHandInPlace();\r\n                this.rigCameras[i]._projectionMatrix.toggleProjectionMatrixHandInPlace();\r\n            }\r\n\r\n            // Update viewport\r\n            var viewport = xrSessionManager._xrSession.baseLayer.getViewport(view);\r\n            var width = xrSessionManager._xrSession.baseLayer.framebufferWidth;\r\n            var height = xrSessionManager._xrSession.baseLayer.framebufferHeight;\r\n            this.rigCameras[i].viewport.width = viewport.width / width;\r\n            this.rigCameras[i].viewport.height = viewport.height / height;\r\n            this.rigCameras[i].viewport.x = viewport.x / width;\r\n            this.rigCameras[i].viewport.y = viewport.y / height;\r\n\r\n            // Set cameras to render to the session's render target\r\n            this.rigCameras[i].outputRenderTarget = xrSessionManager._sessionRenderTargetTexture;\r\n        });\r\n        return true;\r\n    }\r\n}\r\n"]}