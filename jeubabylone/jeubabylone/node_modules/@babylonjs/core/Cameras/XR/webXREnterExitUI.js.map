{"version":3,"file":"webXREnterExitUI.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/XR/webXREnterExitUI.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { IDisposable, Scene } from \"../../scene\";\r\nimport { WebXRExperienceHelper, WebXRState } from \"./webXRExperienceHelper\";\r\n/**\r\n * Button which can be used to enter a different mode of XR\r\n */\r\nexport class WebXREnterExitUIButton {\r\n    /**\r\n     * Creates a WebXREnterExitUIButton\r\n     * @param element button element\r\n     * @param initializationOptions XR initialization options for the button\r\n     */\r\n    constructor(\r\n        /** button element */\r\n        public element: HTMLElement,\r\n        /** XR initialization options for the button */\r\n        public initializationOptions: XRSessionCreationOptions\r\n    ) { }\r\n    /**\r\n     * Overwritable function which can be used to update the button's visuals when the state changes\r\n     * @param activeButton the current active button in the UI\r\n     */\r\n    update(activeButton: Nullable<WebXREnterExitUIButton>) {\r\n    }\r\n}\r\n\r\n/**\r\n * Options to create the webXR UI\r\n */\r\nexport class WebXREnterExitUIOptions {\r\n    /**\r\n     * Context to enter xr with\r\n     */\r\n    outputCanvasContext?: Nullable<WebGLRenderingContext>;\r\n\r\n    /**\r\n     * User provided buttons to enable/disable WebXR. The system will provide default if not set\r\n     */\r\n    customButtons?: Array<WebXREnterExitUIButton>;\r\n}\r\n/**\r\n * UI to allow the user to enter/exit XR mode\r\n */\r\nexport class WebXREnterExitUI implements IDisposable {\r\n    private _overlay: HTMLDivElement;\r\n    private _buttons: Array<WebXREnterExitUIButton> = [];\r\n    private _activeButton: Nullable<WebXREnterExitUIButton> = null;\r\n    /**\r\n     * Fired every time the active button is changed.\r\n     *\r\n     * When xr is entered via a button that launches xr that button will be the callback parameter\r\n     *\r\n     * When exiting xr the callback parameter will be null)\r\n     */\r\n    public activeButtonChangedObservable = new Observable<Nullable<WebXREnterExitUIButton>>();\r\n    /**\r\n     * Creates UI to allow the user to enter/exit XR mode\r\n     * @param scene the scene to add the ui to\r\n     * @param helper the xr experience helper to enter/exit xr with\r\n     * @param options options to configure the UI\r\n     * @returns the created ui\r\n     */\r\n    public static CreateAsync(scene: Scene, helper: WebXRExperienceHelper, options: WebXREnterExitUIOptions): Promise<WebXREnterExitUI> {\r\n        var ui = new WebXREnterExitUI(scene, options);\r\n        var supportedPromises = ui._buttons.map((btn) => {\r\n            return helper.supportsSessionAsync(btn.initializationOptions);\r\n        });\r\n        helper.onStateChangedObservable.add((state) => {\r\n            if (state == WebXRState.NOT_IN_XR) {\r\n                ui._updateButtons(null);\r\n            }\r\n        });\r\n        return Promise.all(supportedPromises).then((results) => {\r\n            results.forEach((supported, i) => {\r\n                if (supported) {\r\n                    ui._overlay.appendChild(ui._buttons[i].element);\r\n                    ui._buttons[i].element.onclick = async() => {\r\n                        if (helper.state == WebXRState.IN_XR) {\r\n                            ui._updateButtons(null);\r\n                            await helper.exitXRAsync();\r\n                            return;\r\n                        } else if (helper.state == WebXRState.NOT_IN_XR) {\r\n                            ui._updateButtons(ui._buttons[i]);\r\n                            await helper.enterXRAsync(ui._buttons[i].initializationOptions, \"eye-level\");\r\n                        }\r\n                    };\r\n                }\r\n            });\r\n            return ui;\r\n        });\r\n    }\r\n\r\n    private constructor(private scene: Scene, options: WebXREnterExitUIOptions) {\r\n        this._overlay = document.createElement(\"div\");\r\n        this._overlay.style.cssText = \"z-index:11;position: absolute; right: 20px;bottom: 50px;\";\r\n\r\n        if (options.customButtons) {\r\n            this._buttons = options.customButtons;\r\n        } else {\r\n            var hmdBtn = document.createElement(\"button\");\r\n            hmdBtn.style.cssText = \"color: #868686; border-color: #868686; border-style: solid; margin-left: 10px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-repeat:no-repeat; background-position: center; outline: none;\";\r\n            hmdBtn.innerText = \"HMD\";\r\n            this._buttons.push(new WebXREnterExitUIButton(hmdBtn, { immersive: true, outputContext: options.outputCanvasContext }));\r\n            this._buttons[this._buttons.length - 1].update = function(activeButton: WebXREnterExitUIButton) {\r\n                this.element.style.display = (activeButton === null || activeButton === this) ? \"\" : \"none\";\r\n                this.element.innerText = activeButton === this ? \"EXIT\" : \"HMD\";\r\n            };\r\n\r\n            var windowBtn = document.createElement(\"button\");\r\n            windowBtn.style.cssText = hmdBtn.style.cssText;\r\n            windowBtn.innerText = \"Window\";\r\n            this._buttons.push(new WebXREnterExitUIButton(windowBtn, { immersive: false, environmentIntegration: true, outputContext: options.outputCanvasContext }));\r\n            this._buttons[this._buttons.length - 1].update = function(activeButton: WebXREnterExitUIButton) {\r\n                this.element.style.display = (activeButton === null || activeButton === this) ? \"\" : \"none\";\r\n                this.element.innerText = activeButton === this ? \"EXIT\" : \"Window\";\r\n            };\r\n            this._updateButtons(null);\r\n        }\r\n\r\n        var renderCanvas = scene.getEngine().getRenderingCanvas();\r\n        if (renderCanvas && renderCanvas.parentNode) {\r\n            renderCanvas.parentNode.appendChild(this._overlay);\r\n            scene.onDisposeObservable.addOnce(() => {\r\n                this.dispose();\r\n            });\r\n        }\r\n    }\r\n\r\n    private _updateButtons(activeButton: Nullable<WebXREnterExitUIButton>) {\r\n        this._activeButton = activeButton;\r\n        this._buttons.forEach((b) => {\r\n            b.update(this._activeButton);\r\n        });\r\n        this.activeButtonChangedObservable.notifyObservers(this._activeButton);\r\n    }\r\n\r\n    /**\r\n     * Disposes of the object\r\n     */\r\n    dispose() {\r\n        var renderCanvas = this.scene.getEngine().getRenderingCanvas();\r\n        if (renderCanvas && renderCanvas.parentNode && renderCanvas.parentNode.contains(this._overlay)) {\r\n            renderCanvas.parentNode.removeChild(this._overlay);\r\n        }\r\n        this.activeButtonChangedObservable.clear();\r\n    }\r\n}\r\n"]}