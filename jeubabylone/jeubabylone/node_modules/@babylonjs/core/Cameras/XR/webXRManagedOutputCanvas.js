import { WebXRState } from "./webXRExperienceHelper";
/**
 * Creates a canvas that is added/removed from the webpage when entering/exiting XR
 */
var WebXRManagedOutputCanvas = /** @class */ (function () {
    /**
     * Initializes the canvas to be added/removed upon entering/exiting xr
     * @param helper the xr experience helper used to trigger adding/removing of the canvas
     * @param canvas The canvas to be added/removed (If not specified a full screen canvas will be created)
     */
    function WebXRManagedOutputCanvas(helper, canvas) {
        var _this = this;
        this._canvas = null;
        /**
         * xrpresent context of the canvas which can be used to display/mirror xr content
         */
        this.canvasContext = null;
        if (!canvas) {
            canvas = document.createElement('canvas');
            canvas.style.cssText = "position:absolute; bottom:0px;right:0px;z-index:10;width:100%;height:100%;background-color: #000000;";
        }
        this._setManagedOutputCanvas(canvas);
        helper.onStateChangedObservable.add(function (stateInfo) {
            if (stateInfo == WebXRState.ENTERING_XR) {
                // The canvas is added to the screen before entering XR because currently the xr session must be initialized while the canvas is added render properly
                _this._addCanvas();
            }
            else if (helper.state == WebXRState.NOT_IN_XR) {
                _this._removeCanvas();
            }
        });
    }
    /**
     * Disposes of the object
     */
    WebXRManagedOutputCanvas.prototype.dispose = function () {
        this._removeCanvas();
        this._setManagedOutputCanvas(null);
    };
    WebXRManagedOutputCanvas.prototype._setManagedOutputCanvas = function (canvas) {
        this._removeCanvas();
        if (!canvas) {
            this._canvas = null;
            this.canvasContext = null;
        }
        else {
            this._canvas = canvas;
            this.canvasContext = this._canvas.getContext('xrpresent');
        }
    };
    WebXRManagedOutputCanvas.prototype._addCanvas = function () {
        if (this._canvas) {
            document.body.appendChild(this._canvas);
        }
    };
    WebXRManagedOutputCanvas.prototype._removeCanvas = function () {
        if (this._canvas && document.body.contains(this._canvas)) {
            document.body.removeChild(this._canvas);
        }
    };
    return WebXRManagedOutputCanvas;
}());
export { WebXRManagedOutputCanvas };
//# sourceMappingURL=webXRManagedOutputCanvas.js.map