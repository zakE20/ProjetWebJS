{"version":3,"file":"webXRManagedOutputCanvas.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/XR/webXRManagedOutputCanvas.ts"],"names":[],"mappings":"AAEA,OAAO,EAAyB,UAAU,EAAE,MAAM,yBAAyB,CAAC;AAC5E;;GAEG;AACH;IAMI;;;;OAIG;IACH,kCAAmB,MAA6B,EAAE,MAA0B;QAA5E,iBAcC;QAxBO,YAAO,GAAgC,IAAI,CAAC;QACpD;;WAEG;QACI,kBAAa,GAAoC,IAAI,CAAC;QAOzD,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,sGAAsG,CAAC;SACjI;QACD,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;QACrC,MAAM,CAAC,wBAAwB,CAAC,GAAG,CAAC,UAAC,SAAS;YAC1C,IAAI,SAAS,IAAI,UAAU,CAAC,WAAW,EAAE;gBACrC,sJAAsJ;gBACtJ,KAAI,CAAC,UAAU,EAAE,CAAC;aACrB;iBAAM,IAAI,MAAM,CAAC,KAAK,IAAI,UAAU,CAAC,SAAS,EAAE;gBAC7C,KAAI,CAAC,aAAa,EAAE,CAAC;aACxB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;OAEG;IACI,0CAAO,GAAd;QACI,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAEO,0DAAuB,GAA/B,UAAgC,MAAmC;QAC/D,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,EAAE;YACT,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC7B;aAAM;YACH,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAI,CAAC,aAAa,GAAQ,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;SAClE;IACL,CAAC;IAEO,6CAAU,GAAlB;QACI,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC3C;IACL,CAAC;IAEO,gDAAa,GAArB;QACI,IAAI,IAAI,CAAC,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACtD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC3C;IACL,CAAC;IACL,+BAAC;AAAD,CAAC,AAxDD,IAwDC","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { IDisposable } from \"../../scene\";\r\nimport { WebXRExperienceHelper, WebXRState } from \"./webXRExperienceHelper\";\r\n/**\r\n * Creates a canvas that is added/removed from the webpage when entering/exiting XR\r\n */\r\nexport class WebXRManagedOutputCanvas implements IDisposable {\r\n    private _canvas: Nullable<HTMLCanvasElement> = null;\r\n    /**\r\n     * xrpresent context of the canvas which can be used to display/mirror xr content\r\n     */\r\n    public canvasContext: Nullable<WebGLRenderingContext> = null;\r\n    /**\r\n     * Initializes the canvas to be added/removed upon entering/exiting xr\r\n     * @param helper the xr experience helper used to trigger adding/removing of the canvas\r\n     * @param canvas The canvas to be added/removed (If not specified a full screen canvas will be created)\r\n     */\r\n    public constructor(helper: WebXRExperienceHelper, canvas?: HTMLCanvasElement) {\r\n        if (!canvas) {\r\n            canvas = document.createElement('canvas');\r\n            canvas.style.cssText = \"position:absolute; bottom:0px;right:0px;z-index:10;width:100%;height:100%;background-color: #000000;\";\r\n        }\r\n        this._setManagedOutputCanvas(canvas);\r\n        helper.onStateChangedObservable.add((stateInfo) => {\r\n            if (stateInfo == WebXRState.ENTERING_XR) {\r\n                // The canvas is added to the screen before entering XR because currently the xr session must be initialized while the canvas is added render properly\r\n                this._addCanvas();\r\n            } else if (helper.state == WebXRState.NOT_IN_XR) {\r\n                this._removeCanvas();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Disposes of the object\r\n     */\r\n    public dispose() {\r\n        this._removeCanvas();\r\n        this._setManagedOutputCanvas(null);\r\n    }\r\n\r\n    private _setManagedOutputCanvas(canvas: Nullable<HTMLCanvasElement>) {\r\n        this._removeCanvas();\r\n        if (!canvas) {\r\n            this._canvas = null;\r\n            this.canvasContext = null;\r\n        } else {\r\n            this._canvas = canvas;\r\n            this.canvasContext = <any>this._canvas.getContext('xrpresent');\r\n        }\r\n    }\r\n\r\n    private _addCanvas() {\r\n        if (this._canvas) {\r\n            document.body.appendChild(this._canvas);\r\n        }\r\n    }\r\n\r\n    private _removeCanvas() {\r\n        if (this._canvas && document.body.contains(this._canvas)) {\r\n            document.body.removeChild(this._canvas);\r\n        }\r\n    }\r\n}\r\n"]}