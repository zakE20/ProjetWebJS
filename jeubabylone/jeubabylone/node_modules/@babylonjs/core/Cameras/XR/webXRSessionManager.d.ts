import { Observable } from "../../Misc/observable";
import { Nullable } from "../../types";
import { IDisposable, Scene } from "../../scene";
import { Vector3 } from "../../Maths/math";
import { RenderTargetTexture } from "../../Materials/Textures/renderTargetTexture";
import { Ray } from "../../Culling/ray";
/**
 * Manages an XRSession
 * @see https://doc.babylonjs.com/how_to/webxr
 */
export declare class WebXRSessionManager implements IDisposable {
    private scene;
    /**
     * Fires every time a new xrFrame arrives which can be used to update the camera
     */
    onXRFrameObservable: Observable<any>;
    /**
     * Fires when the xr session is ended either by the device or manually done
     */
    onXRSessionEnded: Observable<any>;
    /** @hidden */
    _xrSession: XRSession;
    /** @hidden */
    _frameOfReference: XRFrameOfReference;
    /** @hidden */
    _sessionRenderTargetTexture: Nullable<RenderTargetTexture>;
    /** @hidden */
    _currentXRFrame: Nullable<XRFrame>;
    private _xrNavigator;
    private _xrDevice;
    private _tmpMatrix;
    /**
     * Constructs a WebXRSessionManager, this must be initialized within a user action before usage
     * @param scene The scene which the session should be created for
     */
    constructor(scene: Scene);
    /**
     * Initializes the manager
     * After initialization enterXR can be called to start an XR session
     * @returns Promise which resolves after it is initialized
     */
    initializeAsync(): Promise<void>;
    /**
     * Enters XR with the desired XR session options, this must be done with a user action (eg. button click event)
     * @param sessionCreationOptions xr options to create the session with
     * @param frameOfReferenceType option to configure how the xr pose is expressed
     * @returns Promise which resolves after it enters XR
     */
    enterXRAsync(sessionCreationOptions: XRSessionCreationOptions, frameOfReferenceType: string): Promise<void>;
    /**
     * Stops the xrSession and restores the renderloop
     * @returns Promise which resolves after it exits XR
     */
    exitXRAsync(): Promise<void>;
    /**
     * Fires a ray and returns the closest hit in the xr sessions enviornment, useful to place objects in AR
     * @param ray ray to cast into the environment
     * @returns Promise which resolves with a collision point in the environment if it exists
     */
    environmentPointHitTestAsync(ray: Ray): Promise<Nullable<Vector3>>;
    /**
     * Checks if a session would be supported for the creation options specified
     * @param options creation options to check if they are supported
     * @returns true if supported
     */
    supportsSessionAsync(options: XRSessionCreationOptions): Promise<boolean>;
    /**
     * @hidden
     * Converts the render layer of xrSession to a render target
     * @param session session to create render target for
     * @param scene scene the new render target should be created for
     */
    static _CreateRenderTargetTextureFromSession(session: XRSession, scene: Scene): RenderTargetTexture;
    /**
     * Disposes of the session manager
     */
    dispose(): void;
}
