import { Color3 } from "../Maths/math";
import { Scene } from "../scene";
import { Nullable } from "../types";
import { Skeleton } from "../Bones/skeleton";
import { AbstractMesh } from "../Meshes/abstractMesh";
import { LinesMesh } from "../Meshes/linesMesh";
/**
     * Class used to render a debug view of a given skeleton
     * @see http://www.babylonjs-playground.com/#1BZJVJ#8
     */
export declare class SkeletonViewer {
    /** defines the skeleton to render */
    skeleton: Skeleton;
    /** defines the mesh attached to the skeleton */
    mesh: AbstractMesh;
    /** defines a boolean indicating if bones matrices must be forced to update before rendering (true by default)  */
    autoUpdateBonesMatrices: boolean;
    /** defines the rendering group id to use with the viewer */
    renderingGroupId: number;
    /** Gets or sets the color used to render the skeleton */
    color: Color3;
    private _scene;
    private _debugLines;
    private _debugMesh;
    private _isEnabled;
    private _renderFunction;
    private _utilityLayer;
    /**
     * Returns the mesh used to render the bones
     */
    readonly debugMesh: Nullable<LinesMesh>;
    /**
     * Creates a new SkeletonViewer
     * @param skeleton defines the skeleton to render
     * @param mesh defines the mesh attached to the skeleton
     * @param scene defines the hosting scene
     * @param autoUpdateBonesMatrices defines a boolean indicating if bones matrices must be forced to update before rendering (true by default)
     * @param renderingGroupId defines the rendering group id to use with the viewer
     */
    constructor(
    /** defines the skeleton to render */
    skeleton: Skeleton, 
    /** defines the mesh attached to the skeleton */
    mesh: AbstractMesh, scene: Scene, 
    /** defines a boolean indicating if bones matrices must be forced to update before rendering (true by default)  */
    autoUpdateBonesMatrices?: boolean, 
    /** defines the rendering group id to use with the viewer */
    renderingGroupId?: number);
    /** Gets or sets a boolean indicating if the viewer is enabled */
    isEnabled: boolean;
    private _getBonePosition;
    private _getLinesForBonesWithLength;
    private _getLinesForBonesNoLength;
    /** Update the viewer to sync with current skeleton state */
    update(): void;
    /** Release associated resources */
    dispose(): void;
}
