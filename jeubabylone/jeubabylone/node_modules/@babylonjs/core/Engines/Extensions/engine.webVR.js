import { Engine } from "../../Engines/engine";
import { Size } from '../../Maths/math';
import { Observable } from '../../Misc/observable';
import { Tools } from '../../Misc/tools';
import { DomManagement } from '../../Misc/domManagement';
Object.defineProperty(Engine.prototype, "isInVRExclusivePointerMode", {
    get: function () {
        return this._vrExclusivePointerMode;
    },
    enumerable: true,
    configurable: true
});
Engine.prototype._prepareVRComponent = function () {
    this._vrSupported = false;
    this._vrExclusivePointerMode = false;
    this.onVRDisplayChangedObservable = new Observable();
    this.onVRRequestPresentComplete = new Observable();
    this.onVRRequestPresentStart = new Observable();
};
Engine.prototype.isVRDevicePresent = function () {
    return !!this._vrDisplay;
};
Engine.prototype.getVRDevice = function () {
    return this._vrDisplay;
};
Engine.prototype.initWebVR = function () {
    this.initWebVRAsync();
    return this.onVRDisplayChangedObservable;
};
Engine.prototype.initWebVRAsync = function () {
    var _this = this;
    var notifyObservers = function () {
        var eventArgs = {
            vrDisplay: _this._vrDisplay,
            vrSupported: _this._vrSupported
        };
        _this.onVRDisplayChangedObservable.notifyObservers(eventArgs);
        _this._webVRInitPromise = new Promise(function (res) { res(eventArgs); });
    };
    if (!this._onVrDisplayConnect) {
        this._onVrDisplayConnect = function (event) {
            _this._vrDisplay = event.display;
            notifyObservers();
        };
        this._onVrDisplayDisconnect = function () {
            _this._vrDisplay.cancelAnimationFrame(_this._frameHandler);
            _this._vrDisplay = undefined;
            _this._frameHandler = Tools.QueueNewFrame(_this._bindedRenderFunction);
            notifyObservers();
        };
        this._onVrDisplayPresentChange = function () {
            _this._vrExclusivePointerMode = _this._vrDisplay && _this._vrDisplay.isPresenting;
        };
        window.addEventListener('vrdisplayconnect', this._onVrDisplayConnect);
        window.addEventListener('vrdisplaydisconnect', this._onVrDisplayDisconnect);
        window.addEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);
    }
    this._webVRInitPromise = this._webVRInitPromise || this._getVRDisplaysAsync();
    this._webVRInitPromise.then(notifyObservers);
    return this._webVRInitPromise;
};
Engine.prototype._getVRDisplaysAsync = function () {
    var _this = this;
    return new Promise(function (res) {
        if (navigator.getVRDisplays) {
            navigator.getVRDisplays().then(function (devices) {
                _this._vrSupported = true;
                // note that devices may actually be an empty array. This is fine;
                // we expect this._vrDisplay to be undefined in this case.
                _this._vrDisplay = devices[0];
                res({
                    vrDisplay: _this._vrDisplay,
                    vrSupported: _this._vrSupported
                });
            });
        }
        else {
            _this._vrDisplay = undefined;
            _this._vrSupported = false;
            res({
                vrDisplay: _this._vrDisplay,
                vrSupported: _this._vrSupported
            });
        }
    });
};
Engine.prototype.enableVR = function () {
    var _this = this;
    if (this._vrDisplay && !this._vrDisplay.isPresenting) {
        var onResolved = function () {
            _this.onVRRequestPresentComplete.notifyObservers(true);
            _this._onVRFullScreenTriggered();
        };
        var onRejected = function () {
            _this.onVRRequestPresentComplete.notifyObservers(false);
        };
        this.onVRRequestPresentStart.notifyObservers(this);
        this._vrDisplay.requestPresent([{ source: this.getRenderingCanvas() }]).then(onResolved).catch(onRejected);
    }
};
Engine.prototype._onVRFullScreenTriggered = function () {
    if (this._vrDisplay && this._vrDisplay.isPresenting) {
        //get the old size before we change
        this._oldSize = new Size(this.getRenderWidth(), this.getRenderHeight());
        this._oldHardwareScaleFactor = this.getHardwareScalingLevel();
        //get the width and height, change the render size
        var leftEye = this._vrDisplay.getEyeParameters('left');
        this.setHardwareScalingLevel(1);
        this.setSize(leftEye.renderWidth * 2, leftEye.renderHeight);
    }
    else {
        this.setHardwareScalingLevel(this._oldHardwareScaleFactor);
        this.setSize(this._oldSize.width, this._oldSize.height);
    }
};
Engine.prototype.disableVR = function () {
    var _this = this;
    if (this._vrDisplay && this._vrDisplay.isPresenting) {
        this._vrDisplay.exitPresent()
            .then(function () { return _this._onVRFullScreenTriggered(); })
            .catch(function () { return _this._onVRFullScreenTriggered(); });
    }
    if (DomManagement.IsWindowObjectExist()) {
        window.removeEventListener('vrdisplaypointerrestricted', this._onVRDisplayPointerRestricted);
        window.removeEventListener('vrdisplaypointerunrestricted', this._onVRDisplayPointerUnrestricted);
        if (this._onVrDisplayConnect) {
            window.removeEventListener('vrdisplayconnect', this._onVrDisplayConnect);
            if (this._onVrDisplayDisconnect) {
                window.removeEventListener('vrdisplaydisconnect', this._onVrDisplayDisconnect);
            }
            if (this._onVrDisplayPresentChange) {
                window.removeEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);
            }
            this._onVrDisplayConnect = null;
            this._onVrDisplayDisconnect = null;
        }
    }
};
Engine.prototype._connectVREvents = function (canvas, document) {
    this._onVRDisplayPointerRestricted = function () {
        if (canvas) {
            canvas.requestPointerLock();
        }
    };
    this._onVRDisplayPointerUnrestricted = function () {
        if (!document.exitPointerLock) {
            return;
        }
        document.exitPointerLock();
    };
    if (DomManagement.IsWindowObjectExist()) {
        window.addEventListener('vrdisplaypointerrestricted', this._onVRDisplayPointerRestricted, false);
        window.addEventListener('vrdisplaypointerunrestricted', this._onVRDisplayPointerUnrestricted, false);
    }
};
Engine.prototype._submitVRFrame = function () {
    // Submit frame to the vr device, if enabled
    if (this._vrDisplay && this._vrDisplay.isPresenting) {
        // TODO: We should only submit the frame if we read frameData successfully.
        try {
            this._vrDisplay.submitFrame();
        }
        catch (e) {
            Tools.Warn("webVR submitFrame has had an unexpected failure: " + e);
        }
    }
};
Engine.prototype.isVRPresenting = function () {
    return this._vrDisplay && this._vrDisplay.isPresenting;
};
Engine.prototype._requestVRFrame = function () {
    this._frameHandler = Tools.QueueNewFrame(this._bindedRenderFunction, this._vrDisplay);
};
//# sourceMappingURL=engine.webVR.js.map