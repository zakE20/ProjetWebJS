{"version":3,"file":"engine.webVR.js","sourceRoot":"","sources":["../../../../sourceES6/core/Engines/Extensions/engine.webVR.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { Engine, IDisplayChangedEventArgs } from \"../../Engines/engine\";\r\nimport { _TimeToken } from \"../../Instrumentation/timeToken\";\r\nimport { Size } from '../../Maths/math';\r\nimport { Observable } from '../../Misc/observable';\r\nimport { Tools } from '../../Misc/tools';\r\nimport { DomManagement } from '../../Misc/domManagement';\r\n\r\ndeclare module \"../../Engines/engine\" {\r\n    /**\r\n     * Defines the interface used by display changed events\r\n     */\r\n    export interface IDisplayChangedEventArgs {\r\n        /** Gets the vrDisplay object (if any) */\r\n        vrDisplay: Nullable<any>;\r\n        /** Gets a boolean indicating if webVR is supported */\r\n        vrSupported: boolean;\r\n    }\r\n\r\n    export interface Engine {\r\n        /** @hidden */\r\n        _vrDisplay: any;\r\n        /** @hidden */\r\n        _vrSupported: boolean;\r\n        /** @hidden */\r\n        _oldSize: Size;\r\n        /** @hidden */\r\n        _oldHardwareScaleFactor: number;\r\n        /** @hidden */\r\n        _vrExclusivePointerMode: boolean;\r\n        /** @hidden */\r\n        _webVRInitPromise: Promise<IDisplayChangedEventArgs>;\r\n\r\n        /** @hidden */\r\n        _onVRDisplayPointerRestricted: () => void;\r\n        /** @hidden */\r\n        _onVRDisplayPointerUnrestricted: () => void;\r\n\r\n        /** @hidden */\r\n        _onVrDisplayConnect: Nullable<(display: any) => void>;\r\n        /** @hidden */\r\n        _onVrDisplayDisconnect: Nullable<() => void>;\r\n        /** @hidden */\r\n        _onVrDisplayPresentChange: Nullable<() => void>;\r\n\r\n        /**\r\n         * Observable signaled when VR display mode changes\r\n         */\r\n        onVRDisplayChangedObservable: Observable<IDisplayChangedEventArgs>;\r\n        /**\r\n         * Observable signaled when VR request present is complete\r\n         */\r\n        onVRRequestPresentComplete: Observable<boolean>;\r\n        /**\r\n         * Observable signaled when VR request present starts\r\n         */\r\n        onVRRequestPresentStart: Observable<Engine>;\r\n\r\n        /**\r\n         * Gets a boolean indicating that the engine is currently in VR exclusive mode for the pointers\r\n         * @see https://docs.microsoft.com/en-us/microsoft-edge/webvr/essentials#mouse-input\r\n         */\r\n        isInVRExclusivePointerMode: boolean;\r\n\r\n        /**\r\n         * Gets a boolean indicating if a webVR device was detected\r\n         * @returns true if a webVR device was detected\r\n         */\r\n        isVRDevicePresent(): boolean;\r\n\r\n        /**\r\n         * Gets the current webVR device\r\n         * @returns the current webVR device (or null)\r\n         */\r\n        getVRDevice(): any;\r\n\r\n        /**\r\n         * Initializes a webVR display and starts listening to display change events\r\n         * The onVRDisplayChangedObservable will be notified upon these changes\r\n         * @returns A promise containing a VRDisplay and if vr is supported\r\n         */\r\n        initWebVRAsync(): Promise<IDisplayChangedEventArgs>;\r\n\r\n        /** @hidden */\r\n        _getVRDisplaysAsync(): Promise<IDisplayChangedEventArgs>;\r\n\r\n        /**\r\n         * Call this function to switch to webVR mode\r\n         * Will do nothing if webVR is not supported or if there is no webVR device\r\n         * @see http://doc.babylonjs.com/how_to/webvr_camera\r\n         */\r\n        enableVR(): void;\r\n\r\n        /** @hidden */\r\n        _onVRFullScreenTriggered(): void;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Engine.prototype, \"isInVRExclusivePointerMode\", {\r\n    get: function(this: Engine) {\r\n        return this._vrExclusivePointerMode;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\nEngine.prototype._prepareVRComponent = function() {\r\n    this._vrSupported = false;\r\n    this._vrExclusivePointerMode = false;\r\n    this.onVRDisplayChangedObservable = new Observable<IDisplayChangedEventArgs>();\r\n    this.onVRRequestPresentComplete = new Observable<boolean>();\r\n    this.onVRRequestPresentStart = new Observable<Engine>();\r\n};\r\n\r\nEngine.prototype.isVRDevicePresent = function() {\r\n    return !!this._vrDisplay;\r\n};\r\n\r\nEngine.prototype.getVRDevice = function(): any {\r\n    return this._vrDisplay;\r\n};\r\n\r\nEngine.prototype.initWebVR = function(): Observable<IDisplayChangedEventArgs> {\r\n    this.initWebVRAsync();\r\n    return this.onVRDisplayChangedObservable;\r\n};\r\n\r\nEngine.prototype.initWebVRAsync = function(): Promise<IDisplayChangedEventArgs> {\r\n    var notifyObservers = () => {\r\n        var eventArgs = {\r\n            vrDisplay: this._vrDisplay,\r\n            vrSupported: this._vrSupported\r\n        };\r\n        this.onVRDisplayChangedObservable.notifyObservers(eventArgs);\r\n        this._webVRInitPromise = new Promise((res) => { res(eventArgs); });\r\n    };\r\n\r\n    if (!this._onVrDisplayConnect) {\r\n        this._onVrDisplayConnect = (event) => {\r\n            this._vrDisplay = event.display;\r\n            notifyObservers();\r\n        };\r\n        this._onVrDisplayDisconnect = () => {\r\n            this._vrDisplay.cancelAnimationFrame(this._frameHandler);\r\n            this._vrDisplay = undefined;\r\n            this._frameHandler = Tools.QueueNewFrame(this._bindedRenderFunction);\r\n            notifyObservers();\r\n        };\r\n        this._onVrDisplayPresentChange = () => {\r\n            this._vrExclusivePointerMode = this._vrDisplay && this._vrDisplay.isPresenting;\r\n        };\r\n        window.addEventListener('vrdisplayconnect', this._onVrDisplayConnect);\r\n        window.addEventListener('vrdisplaydisconnect', this._onVrDisplayDisconnect);\r\n        window.addEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\r\n    }\r\n    this._webVRInitPromise = this._webVRInitPromise || this._getVRDisplaysAsync();\r\n    this._webVRInitPromise.then(notifyObservers);\r\n    return this._webVRInitPromise;\r\n};\r\n\r\nEngine.prototype._getVRDisplaysAsync = function(): Promise<IDisplayChangedEventArgs> {\r\n    return new Promise((res) => {\r\n        if (navigator.getVRDisplays) {\r\n            navigator.getVRDisplays().then((devices: Array<any>) => {\r\n                this._vrSupported = true;\r\n                // note that devices may actually be an empty array. This is fine;\r\n                // we expect this._vrDisplay to be undefined in this case.\r\n                this._vrDisplay = devices[0];\r\n                res({\r\n                    vrDisplay: this._vrDisplay,\r\n                    vrSupported: this._vrSupported\r\n                });\r\n            });\r\n        } else {\r\n            this._vrDisplay = undefined;\r\n            this._vrSupported = false;\r\n            res({\r\n                vrDisplay: this._vrDisplay,\r\n                vrSupported: this._vrSupported\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nEngine.prototype.enableVR = function() {\r\n    if (this._vrDisplay && !this._vrDisplay.isPresenting) {\r\n        var onResolved = () => {\r\n            this.onVRRequestPresentComplete.notifyObservers(true);\r\n            this._onVRFullScreenTriggered();\r\n        };\r\n        var onRejected = () => {\r\n            this.onVRRequestPresentComplete.notifyObservers(false);\r\n        };\r\n\r\n        this.onVRRequestPresentStart.notifyObservers(this);\r\n        this._vrDisplay.requestPresent([{ source: this.getRenderingCanvas() }]).then(onResolved).catch(onRejected);\r\n    }\r\n};\r\n\r\nEngine.prototype._onVRFullScreenTriggered = function() {\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        //get the old size before we change\r\n        this._oldSize = new Size(this.getRenderWidth(), this.getRenderHeight());\r\n        this._oldHardwareScaleFactor = this.getHardwareScalingLevel();\r\n\r\n        //get the width and height, change the render size\r\n        var leftEye = this._vrDisplay.getEyeParameters('left');\r\n        this.setHardwareScalingLevel(1);\r\n        this.setSize(leftEye.renderWidth * 2, leftEye.renderHeight);\r\n    } else {\r\n        this.setHardwareScalingLevel(this._oldHardwareScaleFactor);\r\n        this.setSize(this._oldSize.width, this._oldSize.height);\r\n    }\r\n};\r\n\r\nEngine.prototype.disableVR = function() {\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        this._vrDisplay.exitPresent()\r\n            .then(() => this._onVRFullScreenTriggered())\r\n            .catch(() => this._onVRFullScreenTriggered());\r\n    }\r\n\r\n    if (DomManagement.IsWindowObjectExist()) {\r\n        window.removeEventListener('vrdisplaypointerrestricted', this._onVRDisplayPointerRestricted);\r\n        window.removeEventListener('vrdisplaypointerunrestricted', this._onVRDisplayPointerUnrestricted);\r\n\r\n        if (this._onVrDisplayConnect) {\r\n            window.removeEventListener('vrdisplayconnect', this._onVrDisplayConnect);\r\n            if (this._onVrDisplayDisconnect) {\r\n                window.removeEventListener('vrdisplaydisconnect', this._onVrDisplayDisconnect);\r\n            }\r\n\r\n            if (this._onVrDisplayPresentChange) {\r\n                window.removeEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\r\n            }\r\n            this._onVrDisplayConnect = null;\r\n            this._onVrDisplayDisconnect = null;\r\n        }\r\n    }\r\n};\r\n\r\nEngine.prototype._connectVREvents = function(canvas: HTMLCanvasElement, document: any) {\r\n    this._onVRDisplayPointerRestricted = () => {\r\n        if (canvas) {\r\n            canvas.requestPointerLock();\r\n        }\r\n    };\r\n\r\n    this._onVRDisplayPointerUnrestricted = () => {\r\n        if (!document.exitPointerLock) {\r\n            return;\r\n        }\r\n        document.exitPointerLock();\r\n    };\r\n\r\n    if (DomManagement.IsWindowObjectExist()) {\r\n        window.addEventListener('vrdisplaypointerrestricted', this._onVRDisplayPointerRestricted, false);\r\n        window.addEventListener('vrdisplaypointerunrestricted', this._onVRDisplayPointerUnrestricted, false);\r\n    }\r\n};\r\n\r\nEngine.prototype._submitVRFrame = function() {\r\n    // Submit frame to the vr device, if enabled\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        // TODO: We should only submit the frame if we read frameData successfully.\r\n        try {\r\n            this._vrDisplay.submitFrame();\r\n        } catch (e) {\r\n            Tools.Warn(\"webVR submitFrame has had an unexpected failure: \" + e);\r\n        }\r\n    }\r\n};\r\n\r\nEngine.prototype.isVRPresenting = function() {\r\n    return this._vrDisplay && this._vrDisplay.isPresenting;\r\n};\r\n\r\nEngine.prototype._requestVRFrame = function() {\r\n    this._frameHandler = Tools.QueueNewFrame(this._bindedRenderFunction, this._vrDisplay);\r\n};"]}