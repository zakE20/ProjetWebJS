import { Observable } from "../../Misc/observable";
import { Scene } from "../../scene";
import { AbstractMesh } from "../../Meshes/abstractMesh";
import { Ray } from "../../Culling/ray";
import { WebVRController } from "./webVRController";
import { ExtendedGamepadButton } from "./poseEnabledController";
import { StickValues, GamepadButtonChanges } from "../../Gamepads/gamepad";
/**
 * Defines the WindowsMotionController object that the state of the windows motion controller
 */
export declare class WindowsMotionController extends WebVRController {
    /**
     * The base url used to load the left and right controller models
     */
    static MODEL_BASE_URL: string;
    /**
     * The name of the left controller model file
     */
    static MODEL_LEFT_FILENAME: string;
    /**
     * The name of the right controller model file
     */
    static MODEL_RIGHT_FILENAME: string;
    /**
     * The controller name prefix for this controller type
     */
    static readonly GAMEPAD_ID_PREFIX: string;
    /**
     * The controller id pattern for this controller type
     */
    private static readonly GAMEPAD_ID_PATTERN;
    private _loadedMeshInfo;
    private readonly _mapping;
    /**
     * Fired when the trackpad on this controller is clicked
     */
    onTrackpadChangedObservable: Observable<ExtendedGamepadButton>;
    /**
     * Fired when the trackpad on this controller is modified
     */
    onTrackpadValuesChangedObservable: Observable<StickValues>;
    /**
     * The current x and y values of this controller's trackpad
     */
    trackpad: StickValues;
    /**
     * Creates a new WindowsMotionController from a gamepad
     * @param vrGamepad the gamepad that the controller should be created from
     */
    constructor(vrGamepad: any);
    /**
     * Fired when the trigger on this controller is modified
     */
    readonly onTriggerButtonStateChangedObservable: Observable<ExtendedGamepadButton>;
    /**
     * Fired when the menu button on this controller is modified
     */
    readonly onMenuButtonStateChangedObservable: Observable<ExtendedGamepadButton>;
    /**
     * Fired when the grip button on this controller is modified
     */
    readonly onGripButtonStateChangedObservable: Observable<ExtendedGamepadButton>;
    /**
     * Fired when the thumbstick button on this controller is modified
     */
    readonly onThumbstickButtonStateChangedObservable: Observable<ExtendedGamepadButton>;
    /**
     * Fired when the touchpad button on this controller is modified
     */
    readonly onTouchpadButtonStateChangedObservable: Observable<ExtendedGamepadButton>;
    /**
     * Fired when the touchpad values on this controller are modified
     */
    readonly onTouchpadValuesChangedObservable: Observable<StickValues>;
    private _updateTrackpad;
    /**
     * Called once per frame by the engine.
     */
    update(): void;
    /**
     * Called once for each button that changed state since the last frame
     * @param buttonIdx Which button index changed
     * @param state New state of the button
     * @param changes Which properties on the state changed since last frame
     */
    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton, changes: GamepadButtonChanges): void;
    /**
     * Moves the buttons on the controller mesh based on their current state
     * @param buttonName the name of the button to move
     * @param buttonValue the value of the button which determines the buttons new position
     */
    protected _lerpButtonTransform(buttonName: string, buttonValue: number): void;
    /**
     * Moves the axis on the controller mesh based on its current state
     * @param axis the index of the axis
     * @param axisValue the value of the axis which determines the meshes new position
     * @hidden
     */
    protected _lerpAxisTransform(axis: number, axisValue: number): void;
    /**
     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.
     * @param scene scene in which to add meshes
     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.
     */
    initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void, forceDefault?: boolean): void;
    /**
     * Takes a list of meshes (as loaded from the glTF file) and finds the root node, as well as nodes that
     * can be transformed by button presses and axes values, based on this._mapping.
     *
     * @param scene scene in which the meshes exist
     * @param meshes list of meshes that make up the controller model to process
     * @return structured view of the given meshes, with mapping of buttons and axes to meshes that can be transformed.
     */
    private processModel;
    private createMeshInfo;
    /**
     * Gets the ray of the controller in the direction the controller is pointing
     * @param length the length the resulting ray should be
     * @returns a ray in the direction the controller is pointing
     */
    getForwardRay(length?: number): Ray;
    /**
    * Disposes of the controller
    */
    dispose(): void;
}
