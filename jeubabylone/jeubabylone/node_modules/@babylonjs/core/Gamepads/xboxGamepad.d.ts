import { Observable } from "../Misc/observable";
import { Gamepad } from "../Gamepads/gamepad";
/**
 * Defines supported buttons for XBox360 compatible gamepads
 */
export declare enum Xbox360Button {
    /** A */
    A = 0,
    /** B */
    B = 1,
    /** X */
    X = 2,
    /** Y */
    Y = 3,
    /** Start */
    Start = 4,
    /** Back */
    Back = 5,
    /** Left button */
    LB = 6,
    /** Right button */
    RB = 7,
    /** Left stick */
    LeftStick = 8,
    /** Right stick */
    RightStick = 9
}
/** Defines values for XBox360 DPad  */
export declare enum Xbox360Dpad {
    /** Up */
    Up = 0,
    /** Down */
    Down = 1,
    /** Left */
    Left = 2,
    /** Right */
    Right = 3
}
/**
 * Defines a XBox360 gamepad
 */
export declare class Xbox360Pad extends Gamepad {
    private _leftTrigger;
    private _rightTrigger;
    private _onlefttriggerchanged;
    private _onrighttriggerchanged;
    private _onbuttondown;
    private _onbuttonup;
    private _ondpaddown;
    private _ondpadup;
    /** Observable raised when a button is pressed */
    onButtonDownObservable: Observable<Xbox360Button>;
    /** Observable raised when a button is released */
    onButtonUpObservable: Observable<Xbox360Button>;
    /** Observable raised when a pad is pressed */
    onPadDownObservable: Observable<Xbox360Dpad>;
    /** Observable raised when a pad is released */
    onPadUpObservable: Observable<Xbox360Dpad>;
    private _buttonA;
    private _buttonB;
    private _buttonX;
    private _buttonY;
    private _buttonBack;
    private _buttonStart;
    private _buttonLB;
    private _buttonRB;
    private _buttonLeftStick;
    private _buttonRightStick;
    private _dPadUp;
    private _dPadDown;
    private _dPadLeft;
    private _dPadRight;
    private _isXboxOnePad;
    /**
     * Creates a new XBox360 gamepad object
     * @param id defines the id of this gamepad
     * @param index defines its index
     * @param gamepad defines the internal HTML gamepad object
     * @param xboxOne defines if it is a XBox One gamepad
     */
    constructor(id: string, index: number, gamepad: any, xboxOne?: boolean);
    /**
     * Defines the callback to call when left trigger is pressed
     * @param callback defines the callback to use
     */
    onlefttriggerchanged(callback: (value: number) => void): void;
    /**
     * Defines the callback to call when right trigger is pressed
     * @param callback defines the callback to use
     */
    onrighttriggerchanged(callback: (value: number) => void): void;
    /**
     * Gets the left trigger value
     */
    /**
    * Sets the left trigger value
    */
    leftTrigger: number;
    /**
     * Gets the right trigger value
     */
    /**
    * Sets the right trigger value
    */
    rightTrigger: number;
    /**
     * Defines the callback to call when a button is pressed
     * @param callback defines the callback to use
     */
    onbuttondown(callback: (buttonPressed: Xbox360Button) => void): void;
    /**
     * Defines the callback to call when a button is released
     * @param callback defines the callback to use
     */
    onbuttonup(callback: (buttonReleased: Xbox360Button) => void): void;
    /**
     * Defines the callback to call when a pad is pressed
     * @param callback defines the callback to use
     */
    ondpaddown(callback: (dPadPressed: Xbox360Dpad) => void): void;
    /**
     * Defines the callback to call when a pad is released
     * @param callback defines the callback to use
     */
    ondpadup(callback: (dPadReleased: Xbox360Dpad) => void): void;
    private _setButtonValue;
    private _setDPadValue;
    /**
     * Gets the value of the `A` button
     */
    /**
    * Sets the value of the `A` button
    */
    buttonA: number;
    /**
     * Gets the value of the `B` button
     */
    /**
    * Sets the value of the `B` button
    */
    buttonB: number;
    /**
     * Gets the value of the `X` button
     */
    /**
    * Sets the value of the `X` button
    */
    buttonX: number;
    /**
     * Gets the value of the `Y` button
     */
    /**
    * Sets the value of the `Y` button
    */
    buttonY: number;
    /**
     * Gets the value of the `Start` button
     */
    /**
    * Sets the value of the `Start` button
    */
    buttonStart: number;
    /**
     * Gets the value of the `Back` button
     */
    /**
    * Sets the value of the `Back` button
    */
    buttonBack: number;
    /**
     * Gets the value of the `Left` button
     */
    /**
    * Sets the value of the `Left` button
    */
    buttonLB: number;
    /**
     * Gets the value of the `Right` button
     */
    /**
    * Sets the value of the `Right` button
    */
    buttonRB: number;
    /**
     * Gets the value of the Left joystick
     */
    /**
    * Sets the value of the Left joystick
    */
    buttonLeftStick: number;
    /**
     * Gets the value of the Right joystick
     */
    /**
    * Sets the value of the Right joystick
    */
    buttonRightStick: number;
    /**
     * Gets the value of D-pad up
     */
    /**
    * Sets the value of D-pad up
    */
    dPadUp: number;
    /**
     * Gets the value of D-pad down
     */
    /**
    * Sets the value of D-pad down
    */
    dPadDown: number;
    /**
     * Gets the value of D-pad left
     */
    /**
    * Sets the value of D-pad left
    */
    dPadLeft: number;
    /**
     * Gets the value of D-pad right
     */
    /**
    * Sets the value of D-pad right
    */
    dPadRight: number;
    /**
     * Force the gamepad to synchronize with device values
     */
    update(): void;
    /**
     * Disposes the gamepad
     */
    dispose(): void;
}
