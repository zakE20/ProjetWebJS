{"version":3,"file":"axisScaleGizmo.js","sourceRoot":"","sources":["../../../sourceES6/core/Gizmos/axisScaleGizmo.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observer, Observable } from \"../Misc/observable\";\r\nimport { Nullable } from \"../types\";\r\nimport { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { Vector3, Color3 } from \"../Maths/math\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { LinesMesh } from \"../Meshes/linesMesh\";\r\nimport { BoxBuilder } from \"../Meshes/Builders/boxBuilder\";\r\nimport { CylinderBuilder } from \"../Meshes/Builders/cylinderBuilder\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\r\nimport { _TimeToken } from \"../Instrumentation/timeToken\";\r\nimport { _DepthCullingState, _StencilState, _AlphaState } from \"../States/index\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\n/**\r\n * Single axis scale gizmo\r\n */\r\nexport class AxisScaleGizmo extends Gizmo {\r\n    private _coloredMaterial: StandardMaterial;\r\n    /**\r\n     * Drag behavior responsible for the gizmos dragging interactions\r\n     */\r\n    public dragBehavior: PointerDragBehavior;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>> = null;\r\n    /**\r\n     * Scale distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public snapDistance = 0;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    public onSnapObservable = new Observable<{ snapDistance: number }>();\r\n    /**\r\n     * If the scaling operation should be done on all axis (default: false)\r\n     */\r\n    public uniformScaling = false;\r\n    /**\r\n     * Creates an AxisScaleGizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param dragAxis The axis which the gizmo will be able to scale on\r\n     * @param color The color of the gizmo\r\n     */\r\n    constructor(dragAxis: Vector3, color: Color3 = Color3.Gray(), gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer) {\r\n        super(gizmoLayer);\r\n\r\n        // Create Material\r\n        this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = color;\r\n        this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\r\n\r\n        var hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        hoverMaterial.diffuseColor = color.add(new Color3(0.3, 0.3, 0.3));\r\n\r\n        // Build mesh on root node\r\n        var arrow = new AbstractMesh(\"\", gizmoLayer.utilityLayerScene);\r\n        var arrowMesh = BoxBuilder.CreateBox(\"yPosMesh\", { size: 0.4 }, gizmoLayer.utilityLayerScene);\r\n        var arrowTail = CylinderBuilder.CreateCylinder(\"cylinder\", { diameterTop: 0.005, height: 0.275, diameterBottom: 0.005, tessellation: 96 }, gizmoLayer.utilityLayerScene);\r\n        arrowTail.material = this._coloredMaterial;\r\n        arrow.addChild(arrowMesh);\r\n        arrow.addChild(arrowTail);\r\n\r\n        // Position arrow pointing in its drag axis\r\n        arrowMesh.scaling.scaleInPlace(0.1);\r\n        arrowMesh.material = this._coloredMaterial;\r\n        arrowMesh.rotation.x = Math.PI / 2;\r\n        arrowMesh.position.z += 0.3;\r\n        arrowTail.position.z += 0.275 / 2;\r\n        arrowTail.rotation.x = Math.PI / 2;\r\n        arrow.lookAt(this._rootMesh.position.add(dragAxis));\r\n        this._rootMesh.addChild(arrow);\r\n        arrow.scaling.scaleInPlace(1 / 3);\r\n\r\n        // Add drag behavior to handle events when the gizmo is dragged\r\n        this.dragBehavior = new PointerDragBehavior({ dragAxis: dragAxis });\r\n        this.dragBehavior.moveAttached = false;\r\n        this._rootMesh.addBehavior(this.dragBehavior);\r\n\r\n        var currentSnapDragDistance = 0;\r\n        var tmpVector = new Vector3();\r\n        var tmpSnapEvent = { snapDistance: 0 };\r\n        this.dragBehavior.onDragObservable.add((event) => {\r\n            if (this.attachedMesh) {\r\n                // Drag strength is modified by the scale of the gizmo (eg. for small objects like boombox the strength will be increased to match the behavior of larger objects)\r\n                var dragStrength = event.dragDistance * ((this.scaleRatio * 3) / this._rootMesh.scaling.length());\r\n\r\n                // Snapping logic\r\n                var snapped = false;\r\n                var dragSteps = 0;\r\n                if (this.uniformScaling) {\r\n                    this.attachedMesh.scaling.normalizeToRef(tmpVector);\r\n                    if (tmpVector.y < 0) {\r\n                        tmpVector.scaleInPlace(-1);\r\n                    }\r\n                } else {\r\n                    tmpVector.copyFrom(dragAxis);\r\n                }\r\n                if (this.snapDistance == 0) {\r\n                    tmpVector.scaleToRef(dragStrength, tmpVector);\r\n                } else {\r\n                    currentSnapDragDistance += dragStrength;\r\n                    if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\r\n                        dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\r\n                        if (currentSnapDragDistance < 0) {\r\n                            dragSteps *= -1;\r\n                        }\r\n                        currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\r\n                        tmpVector.scaleToRef(this.snapDistance * dragSteps, tmpVector);\r\n                        snapped = true;\r\n                    } else {\r\n                        tmpVector.scaleInPlace(0);\r\n                    }\r\n                }\r\n\r\n                this.attachedMesh.scaling.addInPlace(tmpVector);\r\n\r\n                if (snapped) {\r\n                    tmpSnapEvent.snapDistance = this.snapDistance * dragSteps;\r\n                    this.onSnapObservable.notifyObservers(tmpSnapEvent);\r\n                }\r\n            }\r\n        });\r\n\r\n        this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (this._customMeshSet) {\r\n                return;\r\n            }\r\n            var isHovered = pointerInfo.pickInfo && (this._rootMesh.getChildMeshes().indexOf(<Mesh>pointerInfo.pickInfo.pickedMesh) != -1);\r\n            var material = isHovered ? hoverMaterial : this._coloredMaterial;\r\n            this._rootMesh.getChildMeshes().forEach((m) => {\r\n                m.material = material;\r\n                if ((<LinesMesh>m).color) {\r\n                    (<LinesMesh>m).color = material.diffuseColor;\r\n                }\r\n            });\r\n        });\r\n\r\n        var light = gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes());\r\n    }\r\n\r\n    protected _attachedMeshChanged(value: Nullable<AbstractMesh>) {\r\n        if (this.dragBehavior) {\r\n            this.dragBehavior.enabled = value ? true : false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this.onSnapObservable.clear();\r\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n        this.dragBehavior.detach();\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Disposes and replaces the current meshes in the gizmo with the specified mesh\r\n     * @param mesh The mesh to replace the default mesh of the gizmo\r\n     * @param useGizmoMaterial If the gizmo's default material should be used (default: false)\r\n     */\r\n    public setCustomMesh(mesh: Mesh, useGizmoMaterial: boolean = false) {\r\n        super.setCustomMesh(mesh);\r\n        if (useGizmoMaterial) {\r\n            this._rootMesh.getChildMeshes().forEach((m) => {\r\n                m.material = this._coloredMaterial;\r\n                if ((<LinesMesh>m).color) {\r\n                    (<LinesMesh>m).color = this._coloredMaterial.diffuseColor;\r\n                }\r\n            });\r\n            this._customMeshSet = false;\r\n        }\r\n    }\r\n}\r\n"]}