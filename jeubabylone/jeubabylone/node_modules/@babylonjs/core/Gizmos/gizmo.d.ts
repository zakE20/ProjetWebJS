import { Nullable } from "../types";
import { IDisposable } from "../scene";
import { AbstractMesh } from "../Meshes/abstractMesh";
import { Mesh } from "../Meshes/mesh";
import { UtilityLayerRenderer } from "../Rendering/utilityLayerRenderer";
/**
 * Renders gizmos on top of an existing scene which provide controls for position, rotation, etc.
 */
export declare class Gizmo implements IDisposable {
    /** The utility layer the gizmo will be added to */
    gizmoLayer: UtilityLayerRenderer;
    /**
     * The root mesh of the gizmo
     */
    _rootMesh: Mesh;
    private _attachedMesh;
    /**
     * Ratio for the scale of the gizmo (Default: 1)
     */
    scaleRatio: number;
    /**
     * If a custom mesh has been set (Default: false)
     */
    protected _customMeshSet: boolean;
    /**
     * Mesh that the gizmo will be attached to. (eg. on a drag gizmo the mesh that will be dragged)
     * * When set, interactions will be enabled
     */
    attachedMesh: Nullable<AbstractMesh>;
    /**
     * Disposes and replaces the current meshes in the gizmo with the specified mesh
     * @param mesh The mesh to replace the default mesh of the gizmo
     */
    setCustomMesh(mesh: Mesh): void;
    /**
     * If set the gizmo's rotation will be updated to match the attached mesh each frame (Default: true)
     */
    updateGizmoRotationToMatchAttachedMesh: boolean;
    /**
     * If set the gizmo's position will be updated to match the attached mesh each frame (Default: true)
     */
    updateGizmoPositionToMatchAttachedMesh: boolean;
    /**
     * When set, the gizmo will always appear the same size no matter where the camera is (default: false)
     */
    protected _updateScale: boolean;
    protected _interactionsEnabled: boolean;
    protected _attachedMeshChanged(value: Nullable<AbstractMesh>): void;
    private _beforeRenderObserver;
    private _tempVector;
    /**
     * Creates a gizmo
     * @param gizmoLayer The utility layer the gizmo will be added to
     */
    constructor(
    /** The utility layer the gizmo will be added to */
    gizmoLayer?: UtilityLayerRenderer);
    /**
     * Updates the gizmo to match the attached mesh's position/rotation
     */
    protected _update(): void;
    /**
     * Disposes of the gizmo
     */
    dispose(): void;
}
