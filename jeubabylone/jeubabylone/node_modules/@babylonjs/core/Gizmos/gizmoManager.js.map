{"version":3,"file":"gizmoManager.js","sourceRoot":"","sources":["../../../sourceES6/core/Gizmos/gizmoManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observer, Observable } from \"../Misc/observable\";\nimport { Nullable } from \"../types\";\nimport { PointerInfo, PointerEventTypes } from \"../Events/pointerEvents\";\nimport { Scene, IDisposable } from \"../scene\";\nimport { Node } from \"../node\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\nimport { _TimeToken } from \"../Instrumentation/timeToken\";\nimport { _DepthCullingState, _StencilState, _AlphaState } from \"../States/index\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\nimport { Color3 } from \"../Maths/math\";\nimport { SixDofDragBehavior } from \"../Behaviors/Meshes/sixDofDragBehavior\";\n\nimport { Gizmo } from \"./gizmo\";\nimport { RotationGizmo } from \"./rotationGizmo\";\nimport { PositionGizmo } from \"./positionGizmo\";\nimport { ScaleGizmo } from \"./scaleGizmo\";\nimport { BoundingBoxGizmo } from \"./boundingBoxGizmo\";\n\n/**\n * Helps setup gizmo's in the scene to rotate/scale/position meshes\n */\nexport class GizmoManager implements IDisposable {\n    /**\n     * Gizmo's created by the gizmo manager, gizmo will be null until gizmo has been enabled for the first time\n     */\n    public gizmos: { positionGizmo: Nullable<PositionGizmo>, rotationGizmo: Nullable<RotationGizmo>, scaleGizmo: Nullable<ScaleGizmo>, boundingBoxGizmo: Nullable<BoundingBoxGizmo> };\n    /** When true, the gizmo will be detached from the current object when a pointer down occurs with an empty picked mesh */\n    public clearGizmoOnEmptyPointerEvent = false;\n    /** Fires an event when the manager is attached to a mesh */\n    public onAttachedToMeshObservable = new Observable<Nullable<AbstractMesh>>();\n    private _gizmosEnabled = { positionGizmo: false, rotationGizmo: false, scaleGizmo: false, boundingBoxGizmo: false };\n    private _pointerObserver: Nullable<Observer<PointerInfo>> = null;\n    private _attachedMesh: Nullable<AbstractMesh> = null;\n    private _boundingBoxColor = Color3.FromHexString(\"#0984e3\");\n    private _defaultUtilityLayer: UtilityLayerRenderer;\n    private _defaultKeepDepthUtilityLayer: UtilityLayerRenderer;\n    /**\n     * When bounding box gizmo is enabled, this can be used to track drag/end events\n     */\n    public boundingBoxDragBehavior = new SixDofDragBehavior();\n    /**\n     * Array of meshes which will have the gizmo attached when a pointer selected them. If null, all meshes are attachable. (Default: null)\n     */\n    public attachableMeshes: Nullable<Array<AbstractMesh>> = null;\n    /**\n     * If pointer events should perform attaching/detaching a gizmo, if false this can be done manually via attachToMesh. (Default: true)\n     */\n    public usePointerToAttachGizmos = true;\n\n    /**\n     * Instatiates a gizmo manager\n     * @param scene the scene to overlay the gizmos on top of\n     */\n    constructor(private scene: Scene) {\n        this._defaultKeepDepthUtilityLayer = new UtilityLayerRenderer(scene);\n        this._defaultKeepDepthUtilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\n        this._defaultUtilityLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n\n        this.gizmos = { positionGizmo: null, rotationGizmo: null, scaleGizmo: null, boundingBoxGizmo: null };\n\n        // Instatiate/dispose gizmos based on pointer actions\n        this._pointerObserver = scene.onPointerObservable.add((pointerInfo) => {\n            if (!this.usePointerToAttachGizmos) {\n                return;\n            }\n            if (pointerInfo.type == PointerEventTypes.POINTERDOWN) {\n                if (pointerInfo.pickInfo && pointerInfo.pickInfo.pickedMesh) {\n                    var node: Nullable<Node> = pointerInfo.pickInfo.pickedMesh;\n                    if (this.attachableMeshes == null) {\n                        // Attach to the most parent node\n                        while (node && node.parent != null) {\n                            node = node.parent;\n                        }\n                    } else {\n                        // Attach to the parent node that is an attachableMesh\n                        var found = false;\n                        this.attachableMeshes.forEach((mesh) => {\n                            if (node && (node == mesh || node.isDescendantOf(mesh))) {\n                                node = mesh;\n                                found = true;\n                            }\n                        });\n                        if (!found) {\n                            node = null;\n                        }\n                    }\n                    if (node instanceof AbstractMesh) {\n                        if (this._attachedMesh != node) {\n                            this.attachToMesh(node);\n                        }\n                    } else {\n                        if (this.clearGizmoOnEmptyPointerEvent) {\n                            this.attachToMesh(null);\n                        }\n                    }\n                } else {\n                    if (this.clearGizmoOnEmptyPointerEvent) {\n                        this.attachToMesh(null);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Attaches a set of gizmos to the specified mesh\n     * @param mesh The mesh the gizmo's should be attached to\n     */\n    public attachToMesh(mesh: Nullable<AbstractMesh>) {\n        if (this._attachedMesh) {\n            this._attachedMesh.removeBehavior(this.boundingBoxDragBehavior);\n        }\n        this._attachedMesh = mesh;\n        for (var key in this.gizmos) {\n            var gizmo = <Nullable<Gizmo>>((<any>this.gizmos)[key]);\n            if (gizmo && (<any>this._gizmosEnabled)[key]) {\n                gizmo.attachedMesh = mesh;\n            }\n        }\n        if (this.boundingBoxGizmoEnabled && this._attachedMesh) {\n            this._attachedMesh.addBehavior(this.boundingBoxDragBehavior);\n        }\n        this.onAttachedToMeshObservable.notifyObservers(mesh);\n    }\n\n    /**\n     * If the position gizmo is enabled\n     */\n    public set positionGizmoEnabled(value: boolean) {\n        if (value) {\n            if (!this.gizmos.positionGizmo) {\n                this.gizmos.positionGizmo = new PositionGizmo(this._defaultUtilityLayer);\n            }\n            this.gizmos.positionGizmo.attachedMesh = this._attachedMesh;\n        } else if (this.gizmos.positionGizmo) {\n            this.gizmos.positionGizmo.attachedMesh = null;\n        }\n        this._gizmosEnabled.positionGizmo = value;\n    }\n    public get positionGizmoEnabled(): boolean {\n        return this._gizmosEnabled.positionGizmo;\n    }\n    /**\n     * If the rotation gizmo is enabled\n     */\n    public set rotationGizmoEnabled(value: boolean) {\n        if (value) {\n            if (!this.gizmos.rotationGizmo) {\n                this.gizmos.rotationGizmo = new RotationGizmo(this._defaultUtilityLayer);\n            }\n            this.gizmos.rotationGizmo.attachedMesh = this._attachedMesh;\n        } else if (this.gizmos.rotationGizmo) {\n            this.gizmos.rotationGizmo.attachedMesh = null;\n        }\n        this._gizmosEnabled.rotationGizmo = value;\n    }\n    public get rotationGizmoEnabled(): boolean {\n        return this._gizmosEnabled.rotationGizmo;\n    }\n    /**\n     * If the scale gizmo is enabled\n     */\n    public set scaleGizmoEnabled(value: boolean) {\n        if (value) {\n            this.gizmos.scaleGizmo = this.gizmos.scaleGizmo || new ScaleGizmo(this._defaultUtilityLayer);\n            this.gizmos.scaleGizmo.attachedMesh = this._attachedMesh;\n        } else if (this.gizmos.scaleGizmo) {\n            this.gizmos.scaleGizmo.attachedMesh = null;\n        }\n        this._gizmosEnabled.scaleGizmo = value;\n    }\n    public get scaleGizmoEnabled(): boolean {\n        return this._gizmosEnabled.scaleGizmo;\n    }\n    /**\n     * If the boundingBox gizmo is enabled\n     */\n    public set boundingBoxGizmoEnabled(value: boolean) {\n        if (value) {\n            this.gizmos.boundingBoxGizmo = this.gizmos.boundingBoxGizmo || new BoundingBoxGizmo(this._boundingBoxColor, this._defaultKeepDepthUtilityLayer);\n            this.gizmos.boundingBoxGizmo.attachedMesh = this._attachedMesh;\n            if (this._attachedMesh) {\n                this._attachedMesh.removeBehavior(this.boundingBoxDragBehavior);\n                this._attachedMesh.addBehavior(this.boundingBoxDragBehavior);\n            }\n        } else if (this.gizmos.boundingBoxGizmo) {\n            if (this._attachedMesh) {\n                this._attachedMesh.removeBehavior(this.boundingBoxDragBehavior);\n            }\n            this.gizmos.boundingBoxGizmo.attachedMesh = null;\n        }\n        this._gizmosEnabled.boundingBoxGizmo = value;\n    }\n    public get boundingBoxGizmoEnabled(): boolean {\n        return this._gizmosEnabled.boundingBoxGizmo;\n    }\n\n    /**\n     * Disposes of the gizmo manager\n     */\n    public dispose() {\n        this.scene.onPointerObservable.remove(this._pointerObserver);\n        for (var key in this.gizmos) {\n            var gizmo = <Nullable<Gizmo>>((<any>this.gizmos)[key]);\n            if (gizmo) {\n                gizmo.dispose();\n            }\n        }\n        this._defaultKeepDepthUtilityLayer.dispose();\n        this.boundingBoxDragBehavior.detach();\n        this.onAttachedToMeshObservable.clear();\n    }\n}"]}