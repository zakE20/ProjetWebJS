{"version":3,"file":"scaleGizmo.js","sourceRoot":"","sources":["../../../sourceES6/core/Gizmos/scaleGizmo.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Nullable } from \"../types\";\r\nimport { Vector3, Color3 } from \"../Maths/math\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { PolyhedronBuilder } from \"../Meshes/Builders/polyhedronBuilder\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { AxisScaleGizmo } from \"./axisScaleGizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\n/**\r\n * Gizmo that enables scaling a mesh along 3 axis\r\n */\r\nexport class ScaleGizmo extends Gizmo {\r\n    /**\r\n     * Internal gizmo used for interactions on the x axis\r\n     */\r\n    public xGizmo: AxisScaleGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the y axis\r\n     */\r\n    public yGizmo: AxisScaleGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the z axis\r\n     */\r\n    public zGizmo: AxisScaleGizmo;\r\n\r\n    /**\r\n     * Internal gizmo used to scale all axis equally\r\n     */\r\n    public uniformScaleGizmo: AxisScaleGizmo;\r\n\r\n    /** Fires an event when any of it's sub gizmos are dragged */\r\n    public onDragStartObservable = new Observable();\r\n    /** Fires an event when any of it's sub gizmos are released from dragging */\r\n    public onDragEndObservable = new Observable();\r\n\r\n    public get attachedMesh() {\r\n        return this.xGizmo.attachedMesh;\r\n    }\r\n    public set attachedMesh(mesh: Nullable<AbstractMesh>) {\r\n        if (this.xGizmo) {\r\n            this.xGizmo.attachedMesh = mesh;\r\n            this.yGizmo.attachedMesh = mesh;\r\n            this.zGizmo.attachedMesh = mesh;\r\n            this.uniformScaleGizmo.attachedMesh = mesh;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a ScaleGizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     */\r\n    constructor(gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer) {\r\n        super(gizmoLayer);\r\n        this.xGizmo = new AxisScaleGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer);\r\n        this.yGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer);\r\n        this.zGizmo = new AxisScaleGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer);\r\n\r\n        // Create uniform scale gizmo\r\n        this.uniformScaleGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Yellow().scale(0.5), gizmoLayer);\r\n        this.uniformScaleGizmo.updateGizmoRotationToMatchAttachedMesh = false;\r\n        this.uniformScaleGizmo.uniformScaling = true;\r\n        var uniformScalingMesh = PolyhedronBuilder.CreatePolyhedron(\"\", { type: 1 }, this.uniformScaleGizmo.gizmoLayer.utilityLayerScene);\r\n        uniformScalingMesh.scaling.scaleInPlace(0.02);\r\n        uniformScalingMesh.visibility = 0;\r\n        var octahedron = PolyhedronBuilder.CreatePolyhedron(\"\", { type: 1 }, this.uniformScaleGizmo.gizmoLayer.utilityLayerScene);\r\n        octahedron.scaling.scaleInPlace(0.007);\r\n        uniformScalingMesh.addChild(octahedron);\r\n        this.uniformScaleGizmo.setCustomMesh(uniformScalingMesh, true);\r\n        var light = gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(octahedron);\r\n\r\n        // Relay drag events\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            gizmo.dragBehavior.onDragStartObservable.add(() => {\r\n                this.onDragStartObservable.notifyObservers({});\r\n            });\r\n            gizmo.dragBehavior.onDragEndObservable.add(() => {\r\n                this.onDragEndObservable.notifyObservers({});\r\n            });\r\n        });\r\n\r\n        this.attachedMesh = null;\r\n    }\r\n\r\n    public set updateGizmoRotationToMatchAttachedMesh(value: boolean) {\r\n        if (!value) {\r\n            Logger.Warn(\"Setting updateGizmoRotationToMatchAttachedMesh = false on scaling gizmo is not supported.\");\r\n        }\r\n        if (this.xGizmo) {\r\n            this.xGizmo.updateGizmoRotationToMatchAttachedMesh = value;\r\n            this.yGizmo.updateGizmoRotationToMatchAttachedMesh = value;\r\n            this.zGizmo.updateGizmoRotationToMatchAttachedMesh = value;\r\n        }\r\n    }\r\n    public get updateGizmoRotationToMatchAttachedMesh() {\r\n        return this.xGizmo.updateGizmoRotationToMatchAttachedMesh;\r\n    }\r\n\r\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public set snapDistance(value: number) {\r\n        if (this.xGizmo) {\r\n            this.xGizmo.snapDistance = value;\r\n            this.yGizmo.snapDistance = value;\r\n            this.zGizmo.snapDistance = value;\r\n            this.uniformScaleGizmo.snapDistance = value;\r\n        }\r\n    }\r\n    public get snapDistance() {\r\n        return this.xGizmo.snapDistance;\r\n    }\r\n\r\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\r\n    public set scaleRatio(value: number) {\r\n        if (this.xGizmo) {\r\n            this.xGizmo.scaleRatio = value;\r\n            this.yGizmo.scaleRatio = value;\r\n            this.zGizmo.scaleRatio = value;\r\n            this.uniformScaleGizmo.scaleRatio = value;\r\n        }\r\n    }\r\n    public get scaleRatio() {\r\n        return this.xGizmo.scaleRatio;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this.xGizmo.dispose();\r\n        this.yGizmo.dispose();\r\n        this.zGizmo.dispose();\r\n        this.uniformScaleGizmo.dispose();\r\n        this.onDragStartObservable.clear();\r\n        this.onDragEndObservable.clear();\r\n    }\r\n}\r\n"]}