import * as tslib_1 from "tslib";
import { Observable } from "../Misc/observable";
import { TransformNode } from "../Meshes/transformNode";
import { Mesh } from "../Meshes/mesh";
import { Texture } from "../Materials/Textures/texture";
import { BackgroundMaterial } from "../Materials/Background/backgroundMaterial";
import "../Meshes/Builders/sphereBuilder";
import { Vector3 } from '../Maths/math';
/**
 * Display a 360 degree photo on an approximately spherical surface, useful for VR applications or skyboxes.
 * As a subclass of TransformNode, this allow parenting to the camera with different locations in the scene.
 * This class achieves its effect with a Texture and a correctly configured BackgroundMaterial on an inverted sphere.
 * Potential additions to this helper include zoom and and non-infinite distance rendering effects.
 */
var PhotoDome = /** @class */ (function (_super) {
    tslib_1.__extends(PhotoDome, _super);
    /**
     * Create an instance of this class and pass through the parameters to the relevant classes, Texture, StandardMaterial, and Mesh.
     * @param name Element's name, child elements will append suffixes for their own names.
     * @param urlsOfPhoto defines the url of the photo to display
     * @param options defines an object containing optional or exposed sub element properties
     * @param onError defines a callback called when an error occured while loading the texture
     */
    function PhotoDome(name, urlOfPhoto, options, scene, onError) {
        if (onError === void 0) { onError = null; }
        var _this = _super.call(this, name, scene) || this;
        _this._useDirectMapping = false;
        /**
         * Observable raised when an error occured while loading the 360 image
         */
        _this.onLoadErrorObservable = new Observable();
        // set defaults and manage values
        name = name || "photoDome";
        options.resolution = (Math.abs(options.resolution) | 0) || 32;
        options.size = Math.abs(options.size) || (scene.activeCamera ? scene.activeCamera.maxZ * 0.48 : 1000);
        if (options.useDirectMapping === undefined) {
            _this._useDirectMapping = true;
        }
        else {
            _this._useDirectMapping = options.useDirectMapping;
        }
        if (options.faceForward === undefined) {
            options.faceForward = true;
        }
        _this._setReady(false);
        // create
        var material = _this._material = new BackgroundMaterial(name + "_material", scene);
        _this._mesh = Mesh.CreateSphere(name + "_mesh", options.resolution, options.size, scene, false, Mesh.BACKSIDE);
        // configure material
        material.opacityFresnel = false;
        material.useEquirectangularFOV = true;
        material.fovMultiplier = 1.0;
        _this.photoTexture = new Texture(urlOfPhoto, scene, true, !_this._useDirectMapping, undefined, undefined, function (message, exception) {
            _this.onLoadErrorObservable.notifyObservers(message || "Unknown error occured");
            if (onError) {
                onError(message, exception);
            }
        });
        _this.photoTexture.onLoadObservable.addOnce(function () {
            _this._setReady(true);
        });
        // configure mesh
        _this._mesh.material = material;
        _this._mesh.parent = _this;
        // Initial rotation
        if (options.faceForward && scene.activeCamera) {
            var camera = scene.activeCamera;
            var forward = Vector3.Forward();
            var direction = Vector3.TransformNormal(forward, camera.getViewMatrix());
            direction.normalize();
            _this.rotation.y = Math.acos(Vector3.Dot(forward, direction));
        }
        return _this;
    }
    Object.defineProperty(PhotoDome.prototype, "photoTexture", {
        /**
         * Gets or sets the texture being displayed on the sphere
         */
        get: function () {
            return this._photoTexture;
        },
        set: function (value) {
            if (this._photoTexture === value) {
                return;
            }
            this._photoTexture = value;
            if (this._useDirectMapping) {
                this._photoTexture.wrapU = Texture.CLAMP_ADDRESSMODE;
                this._photoTexture.wrapV = Texture.CLAMP_ADDRESSMODE;
                this._material.diffuseTexture = this._photoTexture;
            }
            else {
                this._photoTexture.coordinatesMode = Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE; // matches orientation
                this._photoTexture.wrapV = Texture.CLAMP_ADDRESSMODE;
                this._material.reflectionTexture = this._photoTexture;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhotoDome.prototype, "fovMultiplier", {
        /**
         * The current fov(field of view) multiplier, 0.0 - 2.0. Defaults to 1.0. Lower values "zoom in" and higher values "zoom out".
         * Also see the options.resolution property.
         */
        get: function () {
            return this._material.fovMultiplier;
        },
        set: function (value) {
            this._material.fovMultiplier = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Releases resources associated with this node.
     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)
     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)
     */
    PhotoDome.prototype.dispose = function (doNotRecurse, disposeMaterialAndTextures) {
        if (disposeMaterialAndTextures === void 0) { disposeMaterialAndTextures = false; }
        this._photoTexture.dispose();
        this._mesh.dispose();
        this._material.dispose();
        this.onLoadErrorObservable.clear();
        _super.prototype.dispose.call(this, doNotRecurse, disposeMaterialAndTextures);
    };
    return PhotoDome;
}(TransformNode));
export { PhotoDome };
//# sourceMappingURL=photoDome.js.map