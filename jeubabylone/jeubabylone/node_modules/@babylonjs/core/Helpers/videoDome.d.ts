import { Scene } from "../scene";
import { TransformNode } from "../Meshes/transformNode";
import { Mesh } from "../Meshes/mesh";
import { VideoTexture } from "../Materials/Textures/videoTexture";
import { BackgroundMaterial } from "../Materials/Background/backgroundMaterial";
import "../Meshes/Builders/sphereBuilder";
/**
 * Display a 360 degree video on an approximately spherical surface, useful for VR applications or skyboxes.
 * As a subclass of TransformNode, this allow parenting to the camera or multiple videos with different locations in the scene.
 * This class achieves its effect with a VideoTexture and a correctly configured BackgroundMaterial on an inverted sphere.
 * Potential additions to this helper include zoom and and non-infinite distance rendering effects.
 */
export declare class VideoDome extends TransformNode {
    /**
     * Define the video source as a Monoscopic panoramic 360 video.
     */
    static readonly MODE_MONOSCOPIC = 0;
    /**
     * Define the video source as a Stereoscopic TopBottom/OverUnder panoramic 360 video.
     */
    static readonly MODE_TOPBOTTOM = 1;
    /**
     * Define the video source as a Stereoscopic Side by Side panoramic 360 video.
     */
    static readonly MODE_SIDEBYSIDE = 2;
    private _useDirectMapping;
    /**
     * The video texture being displayed on the sphere
     */
    protected _videoTexture: VideoTexture;
    /**
     * Gets the video texture being displayed on the sphere
     */
    readonly videoTexture: VideoTexture;
    /**
     * The skybox material
     */
    protected _material: BackgroundMaterial;
    /**
     * The surface used for the skybox
     */
    protected _mesh: Mesh;
    /**
     * The current fov(field of view) multiplier, 0.0 - 2.0. Defaults to 1.0. Lower values "zoom in" and higher values "zoom out".
     * Also see the options.resolution property.
     */
    fovMultiplier: number;
    private _videoMode;
    /**
     * Gets or set the current video mode for the video. It can be:
     * * VideoDome.MODE_MONOSCOPIC : Define the video source as a Monoscopic panoramic 360 video.
     * * VideoDome.MODE_TOPBOTTOM  : Define the video source as a Stereoscopic TopBottom/OverUnder panoramic 360 video.
     * * VideoDome.MODE_SIDEBYSIDE : Define the video source as a Stereoscopic Side by Side panoramic 360 video.
     */
    videoMode: number;
    /**
     * Oberserver used in Stereoscopic VR Mode.
     */
    private _onBeforeCameraRenderObserver;
    /**
     * Create an instance of this class and pass through the parameters to the relevant classes, VideoTexture, StandardMaterial, and Mesh.
     * @param name Element's name, child elements will append suffixes for their own names.
     * @param urlsOrVideo defines the url(s) or the video element to use
     * @param options An object containing optional or exposed sub element properties
     */
    constructor(name: string, urlsOrVideo: string | string[] | HTMLVideoElement, options: {
        resolution?: number;
        clickToPlay?: boolean;
        autoPlay?: boolean;
        loop?: boolean;
        size?: number;
        poster?: string;
        faceForward?: boolean;
        useDirectMapping?: boolean;
    }, scene: Scene);
    private _changeVideoMode;
    /**
     * Releases resources associated with this node.
     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)
     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)
     */
    dispose(doNotRecurse?: boolean, disposeMaterialAndTextures?: boolean): void;
}
