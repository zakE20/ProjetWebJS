{"version":3,"file":"videoDome.js","sourceRoot":"","sources":["../../../sourceES6/core/Helpers/videoDome.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"../scene\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { _TimeToken } from \"../Instrumentation/timeToken\";\r\nimport { _DepthCullingState, _StencilState, _AlphaState } from \"../States/index\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { VideoTexture, VideoTextureSettings } from \"../Materials/Textures/videoTexture\";\r\nimport { BackgroundMaterial } from \"../Materials/Background/backgroundMaterial\";\r\nimport \"../Meshes/Builders/sphereBuilder\";\r\nimport { Nullable } from \"../types\";\r\nimport { Observer } from \"../Misc/observable\";\r\nimport { Vector3 } from '../Maths/math';\r\n\r\ndeclare type Camera = import(\"../Cameras/camera\").Camera;\r\n\r\n/**\r\n * Display a 360 degree video on an approximately spherical surface, useful for VR applications or skyboxes.\r\n * As a subclass of TransformNode, this allow parenting to the camera or multiple videos with different locations in the scene.\r\n * This class achieves its effect with a VideoTexture and a correctly configured BackgroundMaterial on an inverted sphere.\r\n * Potential additions to this helper include zoom and and non-infinite distance rendering effects.\r\n */\r\nexport class VideoDome extends TransformNode {\r\n    /**\r\n     * Define the video source as a Monoscopic panoramic 360 video.\r\n     */\r\n    public static readonly MODE_MONOSCOPIC = 0;\r\n    /**\r\n     * Define the video source as a Stereoscopic TopBottom/OverUnder panoramic 360 video.\r\n     */\r\n    public static readonly MODE_TOPBOTTOM = 1;\r\n    /**\r\n     * Define the video source as a Stereoscopic Side by Side panoramic 360 video.\r\n     */\r\n    public static readonly MODE_SIDEBYSIDE = 2;\r\n\r\n    private _useDirectMapping = false;\r\n\r\n    /**\r\n     * The video texture being displayed on the sphere\r\n     */\r\n    protected _videoTexture: VideoTexture;\r\n\r\n    /**\r\n     * Gets the video texture being displayed on the sphere\r\n     */\r\n    public get videoTexture(): VideoTexture {\r\n        return this._videoTexture;\r\n    }\r\n\r\n    /**\r\n     * The skybox material\r\n     */\r\n    protected _material: BackgroundMaterial;\r\n\r\n    /**\r\n     * The surface used for the skybox\r\n     */\r\n    protected _mesh: Mesh;\r\n\r\n    /**\r\n     * The current fov(field of view) multiplier, 0.0 - 2.0. Defaults to 1.0. Lower values \"zoom in\" and higher values \"zoom out\".\r\n     * Also see the options.resolution property.\r\n     */\r\n    public get fovMultiplier(): number {\r\n        return this._material.fovMultiplier;\r\n    }\r\n    public set fovMultiplier(value: number) {\r\n        this._material.fovMultiplier = value;\r\n    }\r\n\r\n    private _videoMode = VideoDome.MODE_MONOSCOPIC;\r\n    /**\r\n     * Gets or set the current video mode for the video. It can be:\r\n     * * VideoDome.MODE_MONOSCOPIC : Define the video source as a Monoscopic panoramic 360 video.\r\n     * * VideoDome.MODE_TOPBOTTOM  : Define the video source as a Stereoscopic TopBottom/OverUnder panoramic 360 video.\r\n     * * VideoDome.MODE_SIDEBYSIDE : Define the video source as a Stereoscopic Side by Side panoramic 360 video.\r\n     */\r\n    public get videoMode(): number {\r\n        return this._videoMode;\r\n    }\r\n    public set videoMode(value: number) {\r\n        if (this._videoMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._changeVideoMode(value);\r\n    }\r\n\r\n    /**\r\n     * Oberserver used in Stereoscopic VR Mode.\r\n     */\r\n    private _onBeforeCameraRenderObserver: Nullable<Observer<Camera>> = null;\r\n\r\n    /**\r\n     * Create an instance of this class and pass through the parameters to the relevant classes, VideoTexture, StandardMaterial, and Mesh.\r\n     * @param name Element's name, child elements will append suffixes for their own names.\r\n     * @param urlsOrVideo defines the url(s) or the video element to use\r\n     * @param options An object containing optional or exposed sub element properties\r\n     */\r\n    constructor(name: string, urlsOrVideo: string | string[] | HTMLVideoElement, options: {\r\n        resolution?: number,\r\n        clickToPlay?: boolean,\r\n        autoPlay?: boolean,\r\n        loop?: boolean,\r\n        size?: number,\r\n        poster?: string,\r\n        faceForward?: boolean,\r\n        useDirectMapping?: boolean\r\n    }, scene: Scene) {\r\n        super(name, scene);\r\n\r\n        scene = this.getScene();\r\n\r\n        // set defaults and manage values\r\n        name = name || \"videoDome\";\r\n        options.resolution = (Math.abs(options.resolution as any) | 0) || 32;\r\n        options.clickToPlay = Boolean(options.clickToPlay);\r\n        options.autoPlay = options.autoPlay === undefined ? true : Boolean(options.autoPlay);\r\n        options.loop = options.loop === undefined ? true : Boolean(options.loop);\r\n        options.size = Math.abs(options.size as any) || (scene.activeCamera ? scene.activeCamera.maxZ * 0.48 : 1000);\r\n\r\n        if (options.useDirectMapping === undefined) {\r\n            this._useDirectMapping = true;\r\n        } else {\r\n            this._useDirectMapping = options.useDirectMapping;\r\n        }\r\n\r\n        if (options.faceForward === undefined) {\r\n            options.faceForward = true;\r\n        }\r\n\r\n        this._setReady(false);\r\n\r\n        // create\r\n        let tempOptions: VideoTextureSettings = { loop: options.loop, autoPlay: options.autoPlay, autoUpdateTexture: true, poster: options.poster };\r\n        let material = this._material = new BackgroundMaterial(name + \"_material\", scene);\r\n        let texture = this._videoTexture = new VideoTexture(name + \"_texture\", urlsOrVideo, scene, false, this._useDirectMapping, Texture.TRILINEAR_SAMPLINGMODE, tempOptions);\r\n        this._mesh = Mesh.CreateSphere(name + \"_mesh\", options.resolution, options.size, scene, false, Mesh.BACKSIDE);\r\n\r\n        texture.onLoadObservable.addOnce(() => {\r\n            this._setReady(true);\r\n        });\r\n\r\n        // configure material\r\n        material.useEquirectangularFOV = true;\r\n        material.fovMultiplier = 1.0;\r\n        material.opacityFresnel = false;\r\n\r\n        if (this._useDirectMapping) {\r\n            texture.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n            texture.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n            material.diffuseTexture = texture;\r\n        } else {\r\n            texture.coordinatesMode = Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE; // matches orientation\r\n            texture.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n            material.reflectionTexture = texture;\r\n        }\r\n\r\n        // configure mesh\r\n        this._mesh.material = material;\r\n        this._mesh.parent = this;\r\n\r\n        // optional configuration\r\n        if (options.clickToPlay) {\r\n            scene.onPointerUp = () => {\r\n                this._videoTexture.video.play();\r\n            };\r\n        }\r\n\r\n        // Initial rotation\r\n        if (options.faceForward && scene.activeCamera) {\r\n            let camera = scene.activeCamera;\r\n\r\n            let forward = Vector3.Forward();\r\n            var direction = Vector3.TransformNormal(forward, camera.getViewMatrix());\r\n            direction.normalize();\r\n\r\n            this.rotation.y = Math.acos(Vector3.Dot(forward, direction));\r\n        }\r\n    }\r\n\r\n    private _changeVideoMode(value: number): void {\r\n        this._scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\r\n        this._videoMode = value;\r\n\r\n        // Default Setup and Reset.\r\n        this._videoTexture.uScale = 1;\r\n        this._videoTexture.vScale = 1;\r\n        this._videoTexture.uOffset = 0;\r\n        this._videoTexture.vOffset = 0;\r\n\r\n        switch (value) {\r\n            case VideoDome.MODE_SIDEBYSIDE:\r\n                this._videoTexture.uScale = 0.5;\r\n                this._onBeforeCameraRenderObserver = this._scene.onBeforeCameraRenderObservable.add((camera) => {\r\n                    this._videoTexture.uOffset = camera.isRightCamera ? 0.5 : 0.0;\r\n                });\r\n                break;\r\n            case VideoDome.MODE_TOPBOTTOM:\r\n                this._videoTexture.vScale = 0.5;\r\n                this._onBeforeCameraRenderObserver = this._scene.onBeforeCameraRenderObservable.add((camera) => {\r\n                    this._videoTexture.vOffset = camera.isRightCamera ? 0.5 : 0.0;\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        this._videoTexture.dispose();\r\n        this._mesh.dispose();\r\n        this._material.dispose();\r\n\r\n        this._scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n}\r\n"]}