import { Nullable } from "../types";
import { Scene } from "../scene";
import { Matrix, Vector3 } from "../Maths/math";
import { AbstractMesh } from "../Meshes/abstractMesh";
import { Effect } from "../Materials/effect";
import { BaseTexture } from "../Materials/Textures/baseTexture";
import { ShadowLight } from "./shadowLight";
/**
 * A spot light is defined by a position, a direction, an angle, and an exponent.
 * These values define a cone of light starting from the position, emitting toward the direction.
 * The angle, in radians, defines the size (field of illumination) of the spotlight's conical beam,
 * and the exponent defines the speed of the decay of the light with distance (reach).
 * Documentation: https://doc.babylonjs.com/babylon101/lights
 */
export declare class SpotLight extends ShadowLight {
    private _angle;
    private _innerAngle;
    private _cosHalfAngle;
    private _lightAngleScale;
    private _lightAngleOffset;
    /**
     * Gets the cone angle of the spot light in Radians.
     */
    /**
    * Sets the cone angle of the spot light in Radians.
    */
    angle: number;
    /**
     * Only used in gltf falloff mode, this defines the angle where
     * the directional falloff will start before cutting at angle which could be seen
     * as outer angle.
     */
    /**
    * Only used in gltf falloff mode, this defines the angle where
    * the directional falloff will start before cutting at angle which could be seen
    * as outer angle.
    */
    innerAngle: number;
    private _shadowAngleScale;
    /**
     * Allows scaling the angle of the light for shadow generation only.
     */
    /**
    * Allows scaling the angle of the light for shadow generation only.
    */
    shadowAngleScale: number;
    /**
     * The light decay speed with the distance from the emission spot.
     */
    exponent: number;
    private _projectionTextureMatrix;
    /**
    * Allows reading the projecton texture
    */
    readonly projectionTextureMatrix: Matrix;
    protected _projectionTextureLightNear: number;
    /**
     * Gets the near clip of the Spotlight for texture projection.
     */
    /**
    * Sets the near clip of the Spotlight for texture projection.
    */
    projectionTextureLightNear: number;
    protected _projectionTextureLightFar: number;
    /**
     * Gets the far clip of the Spotlight for texture projection.
     */
    /**
    * Sets the far clip of the Spotlight for texture projection.
    */
    projectionTextureLightFar: number;
    protected _projectionTextureUpDirection: Vector3;
    /**
     * Gets the Up vector of the Spotlight for texture projection.
     */
    /**
    * Sets the Up vector of the Spotlight for texture projection.
    */
    projectionTextureUpDirection: Vector3;
    private _projectionTexture;
    /**
     * Gets the projection texture of the light.
    */
    /**
    * Sets the projection texture of the light.
    */
    projectionTexture: Nullable<BaseTexture>;
    private _projectionTextureViewLightDirty;
    private _projectionTextureProjectionLightDirty;
    private _projectionTextureDirty;
    private _projectionTextureViewTargetVector;
    private _projectionTextureViewLightMatrix;
    private _projectionTextureProjectionLightMatrix;
    private _projectionTextureScalingMatrix;
    /**
     * Creates a SpotLight object in the scene. A spot light is a simply light oriented cone.
     * It can cast shadows.
     * Documentation : https://doc.babylonjs.com/babylon101/lights
     * @param name The light friendly name
     * @param position The position of the spot light in the scene
     * @param direction The direction of the light in the scene
     * @param angle The cone angle of the light in Radians
     * @param exponent The light decay speed with the distance from the emission spot
     * @param scene The scene the lights belongs to
     */
    constructor(name: string, position: Vector3, direction: Vector3, angle: number, exponent: number, scene: Scene);
    /**
     * Returns the string "SpotLight".
     * @returns the class name
     */
    getClassName(): string;
    /**
     * Returns the integer 2.
     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x
     */
    getTypeID(): number;
    /**
     * Overrides the direction setter to recompute the projection texture view light Matrix.
     */
    protected _setDirection(value: Vector3): void;
    /**
     * Overrides the position setter to recompute the projection texture view light Matrix.
     */
    protected _setPosition(value: Vector3): void;
    /**
     * Sets the passed matrix "matrix" as perspective projection matrix for the shadows and the passed view matrix with the fov equal to the SpotLight angle and and aspect ratio of 1.0.
     * Returns the SpotLight.
     */
    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void;
    protected _computeProjectionTextureViewLightMatrix(): void;
    protected _computeProjectionTextureProjectionLightMatrix(): void;
    /**
     * Main function for light texture projection matrix computing.
     */
    protected _computeProjectionTextureMatrix(): void;
    protected _buildUniformLayout(): void;
    private _computeAngleValues;
    /**
     * Sets the passed Effect object with the SpotLight transfomed position (or position if not parented) and normalized direction.
     * @param effect The effect to update
     * @param lightIndex The index of the light in the effect to update
     * @returns The spot light
     */
    transferToEffect(effect: Effect, lightIndex: string): SpotLight;
    /**
     * Disposes the light and the associated resources.
     */
    dispose(): void;
    /**
     * Prepares the list of defines specific to the light type.
     * @param defines the list of defines
     * @param lightIndex defines the index of the light for the effect
     */
    prepareLightSpecificDefines(defines: any, lightIndex: number): void;
}
