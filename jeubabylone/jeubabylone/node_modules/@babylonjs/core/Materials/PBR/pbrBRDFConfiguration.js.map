{"version":3,"file":"pbrBRDFConfiguration.js","sourceRoot":"","sources":["../../../../sourceES6/core/Materials/PBR/pbrBRDFConfiguration.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,mBAAmB,EAAE,SAAS,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAczF;;GAEG;AACH;IA8DI;;;OAGG;IACH,8BAAY,2BAAuC;QA5C3C,2BAAsB,GAAG,oBAAoB,CAAC,+BAA+B,CAAC;QACtF;;WAEG;QAEI,0BAAqB,GAAG,oBAAoB,CAAC,+BAA+B,CAAC;QAG5E,wCAAmC,GAAG,oBAAoB,CAAC,8CAA8C,CAAC;QAClH;;;;;;;WAOG;QAEI,uCAAkC,GAAG,oBAAoB,CAAC,8CAA8C,CAAC;QAGxG,2BAAsB,GAAG,oBAAoB,CAAC,+BAA+B,CAAC;QACtF;;;;;;WAMG;QAEI,0BAAqB,GAAG,oBAAoB,CAAC,+BAA+B,CAAC;QAehF,IAAI,CAAC,oCAAoC,GAAG,2BAA2B,CAAC;IAC5E,CAAC;IAXD,cAAc;IACP,2DAA4B,GAAnC;QACI,IAAI,CAAC,oCAAoC,EAAE,CAAC;IAChD,CAAC;IAUD;;;OAGG;IACI,6CAAc,GAArB,UAAsB,OAA6B;QAC/C,OAAO,CAAC,wBAAwB,GAAG,IAAI,CAAC,mCAAmC,CAAC;QAC5E,OAAO,CAAC,2BAA2B,GAAG,IAAI,CAAC,sBAAsB,IAAI,IAAI,CAAC,mCAAmC,CAAC;QAC9G,OAAO,CAAC,mBAAmB,GAAG,IAAI,CAAC,sBAAsB,CAAC;IAC9D,CAAC;IAED;;;MAGE;IACK,2CAAY,GAAnB;QACI,OAAO,sBAAsB,CAAC;IAClC,CAAC;IAED;;;OAGG;IACI,qCAAM,GAAb,UAAc,iBAAuC;QACjD,mBAAmB,CAAC,KAAK,CAAC,cAAM,OAAA,iBAAiB,EAAjB,CAAiB,EAAE,IAAI,CAAC,CAAC;IAC7D,CAAC;IAED;;;OAGG;IACI,wCAAS,GAAhB;QACI,OAAO,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACI,oCAAK,GAAZ,UAAa,MAAW;QAAxB,iBAEC;QADG,mBAAmB,CAAC,KAAK,CAAC,cAAM,OAAA,KAAI,EAAJ,CAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IA5GD;;;OAGG;IACW,oDAA+B,GAAG,IAAI,CAAC;IAErD;;;OAGG;IACW,mEAA8C,GAAG,IAAI,CAAC;IAEpE;;;;OAIG;IACW,oDAA+B,GAAG,IAAI,CAAC;IAGrD;QADC,SAAS,EAAE;wEAC0E;IAKtF;QADC,gBAAgB,CAAC,8BAA8B,CAAC;uEACmC;IAGpF;QADC,SAAS,EAAE;qFACsG;IAUlH;QADC,gBAAgB,CAAC,8BAA8B,CAAC;oFAC+D;IAGhH;QADC,SAAS,EAAE;wEAC0E;IAStF;QADC,gBAAgB,CAAC,8BAA8B,CAAC;uEACmC;IA2DxF,2BAAC;CAAA,AA/GD,IA+GC;SA/GY,oBAAoB","sourcesContent":["import { SerializationHelper, serialize, expandToProperty } from \"../../Misc/decorators\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport interface IMaterialBRDFDefines {\r\n    BRDF_V_HEIGHT_CORRELATED: boolean;\r\n    MS_BRDF_ENERGY_CONSERVATION: boolean;\r\n    SPHERICAL_HARMONICS: boolean;\r\n\r\n    /** @hidden */\r\n    _areMiscDirty: boolean;\r\n}\r\n\r\n/**\r\n * Define the code related to the BRDF parameters of the pbr material.\r\n */\r\nexport class PBRBRDFConfiguration {\r\n\r\n    /**\r\n     * Default value used for the energy conservation.\r\n     * This should only be changed to adapt to the type of texture in scene.environmentBRDFTexture.\r\n     */\r\n    public static DEFAULT_USE_ENERGY_CONSERVATION = true;\r\n\r\n    /**\r\n     * Default value used for the Smith Visibility Height Correlated mode.\r\n     * This should only be changed to adapt to the type of texture in scene.environmentBRDFTexture.\r\n     */\r\n    public static DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED = true;\r\n\r\n    /**\r\n     * Default value used for the IBL diffuse part.\r\n     * This can help switching back to the polynomials mode globally which is a tiny bit\r\n     * less GPU intensive at the drawback of a lower quality.\r\n     */\r\n    public static DEFAULT_USE_SPHERICAL_HARMONICS = true;\r\n\r\n    @serialize()\r\n    private _useEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION;\r\n    /**\r\n     * Defines if the material uses energy conservation.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION;\r\n\r\n    @serialize()\r\n    private _useSmithVisibilityHeightCorrelated = PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED;\r\n    /**\r\n     * LEGACY Mode set to false\r\n     * Defines if the material uses height smith correlated visibility term.\r\n     * If you intent to not use our default BRDF, you need to load a separate BRDF Texture for the PBR\r\n     * You can either load https://assets.babylonjs.com/environments/uncorrelatedBRDF.png\r\n     * or https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds to have more precision\r\n     * Not relying on height correlated will also disable energy conservation.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useSmithVisibilityHeightCorrelated = PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED;\r\n\r\n    @serialize()\r\n    private _useSphericalHarmonics = PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS;\r\n    /**\r\n     * LEGACY Mode set to false\r\n     * Defines if the material uses spherical harmonics vs spherical polynomials for the\r\n     * diffuse part of the IBL.\r\n     * The harmonics despite a tiny bigger cost has been proven to provide closer results\r\n     * to the ground truth.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useSphericalHarmonics = PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS;\r\n\r\n    /** @hidden */\r\n    private _internalMarkAllSubMeshesAsMiscDirty: () => void;\r\n\r\n    /** @hidden */\r\n    public _markAllSubMeshesAsMiscDirty(): void {\r\n        this._internalMarkAllSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new istance of clear coat configuration.\r\n     * @param markAllSubMeshesAsMiscDirty Callback to flag the material to dirty\r\n     */\r\n    constructor(markAllSubMeshesAsMiscDirty: () => void) {\r\n        this._internalMarkAllSubMeshesAsMiscDirty = markAllSubMeshesAsMiscDirty;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if a texture is used in the material.\r\n     * @param defines the list of \"defines\" to update.\r\n     */\r\n    public prepareDefines(defines: IMaterialBRDFDefines): void {\r\n        defines.BRDF_V_HEIGHT_CORRELATED = this._useSmithVisibilityHeightCorrelated;\r\n        defines.MS_BRDF_ENERGY_CONSERVATION = this._useEnergyConservation && this._useSmithVisibilityHeightCorrelated;\r\n        defines.SPHERICAL_HARMONICS = this._useSphericalHarmonics;\r\n    }\r\n\r\n    /**\r\n    * Get the current class name of the texture useful for serialization or dynamic coding.\r\n    * @returns \"PBRClearCoatConfiguration\"\r\n    */\r\n    public getClassName(): string {\r\n        return \"PBRBRDFConfiguration\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current configuration into another one.\r\n     * @param brdfConfiguration define the config where to copy the info\r\n     */\r\n    public copyTo(brdfConfiguration: PBRBRDFConfiguration): void {\r\n        SerializationHelper.Clone(() => brdfConfiguration, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this BRDF configuration.\r\n     * @returns - An object with the serialized config.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a BRDF Configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     */\r\n    public parse(source: any): void {\r\n        SerializationHelper.Parse(() => this, source, null);\r\n    }\r\n}"]}