import { Nullable } from "../../types";
import { IAnimatable } from "../../Misc/tools";
import { Color3 } from "../../Maths/math";
import { BaseTexture } from "../../Materials/Textures/baseTexture";
import { EffectFallbacks } from "../../Materials/effect";
import { UniformBuffer } from "../../Materials/uniformBuffer";
declare type Engine = import("../../Engines/engine").Engine;
declare type Scene = import("../../scene").Scene;
/**
 * @hidden
 */
export interface IMaterialClearCoatDefines {
    CLEARCOAT: boolean;
    CLEARCOAT_DEFAULTIOR: boolean;
    CLEARCOAT_TEXTURE: boolean;
    CLEARCOAT_TEXTUREDIRECTUV: number;
    CLEARCOAT_BUMP: boolean;
    CLEARCOAT_BUMPDIRECTUV: number;
    CLEARCOAT_TINT: boolean;
    CLEARCOAT_TINT_TEXTURE: boolean;
    CLEARCOAT_TINT_TEXTUREDIRECTUV: number;
    /** @hidden */
    _areTexturesDirty: boolean;
}
/**
 * Define the code related to the clear coat parameters of the pbr material.
 */
export declare class PBRClearCoatConfiguration {
    /**
     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence
     * The default fits with a polyurethane material.
     */
    private static readonly _DefaultIndiceOfRefraction;
    private _isEnabled;
    /**
     * Defines if the clear coat is enabled in the material.
     */
    isEnabled: boolean;
    /**
     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.
     */
    intensity: number;
    /**
     * Defines the clear coat layer roughness.
     */
    roughness: number;
    private _indiceOfRefraction;
    /**
     * Defines the indice of refraction of the clear coat.
     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence
     * The default fits with a polyurethane material.
     * Changing the default value is more performance intensive.
     */
    indiceOfRefraction: number;
    private _texture;
    /**
     * Stores the clear coat values in a texture.
     */
    texture: Nullable<BaseTexture>;
    private _bumpTexture;
    /**
     * Define the clear coat specific bump texture.
     */
    bumpTexture: Nullable<BaseTexture>;
    private _isTintEnabled;
    /**
     * Defines if the clear coat tint is enabled in the material.
     */
    isTintEnabled: boolean;
    /**
     * Defines the clear coat tint of the material.
     * This is only use if tint is enabled
     */
    tintColor: Color3;
    /**
     * Defines the distance at which the tint color should be found in the
     * clear coat media.
     * This is only use if tint is enabled
     */
    tintColorAtDistance: number;
    /**
     * Defines the clear coat layer thickness.
     * This is only use if tint is enabled
     */
    tintThickness: number;
    private _tintTexture;
    /**
     * Stores the clear tint values in a texture.
     * rgb is tint
     * a is a thickness factor
     */
    tintTexture: Nullable<BaseTexture>;
    /** @hidden */
    private _internalMarkAllSubMeshesAsTexturesDirty;
    /** @hidden */
    _markAllSubMeshesAsTexturesDirty(): void;
    /**
     * Instantiate a new istance of clear coat configuration.
     * @param markAllSubMeshesAsTexturesDirty Callback to flag the material to dirty
     */
    constructor(markAllSubMeshesAsTexturesDirty: () => void);
    /**
     * Gets wehter the submesh is ready to be used or not.
     * @param defines the list of "defines" to update.
     * @param scene defines the scene the material belongs to.
     * @param engine defines the engine the material belongs to.
     * @param disableBumpMap defines wether the material disables bump or not.
     * @returns - boolean indicating that the submesh is ready or not.
     */
    isReadyForSubMesh(defines: IMaterialClearCoatDefines, scene: Scene, engine: Engine, disableBumpMap: boolean): boolean;
    /**
     * Checks to see if a texture is used in the material.
     * @param defines the list of "defines" to update.
     * @param scene defines the scene to the material belongs to.
     */
    prepareDefines(defines: IMaterialClearCoatDefines, scene: Scene): void;
    /**
     * Binds the material data.
     * @param uniformBuffer defines the Uniform buffer to fill in.
     * @param scene defines the scene the material belongs to.
     * @param engine defines the engine the material belongs to.
     * @param disableBumpMap defines wether the material disables bump or not.
     * @param isFrozen defines wether the material is frozen or not.
     * @param invertNormalMapX If sets to true, x component of normal map value will be inverted (x = 1.0 - x).
     * @param invertNormalMapY If sets to true, y component of normal map value will be inverted (y = 1.0 - y).
     */
    bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, disableBumpMap: boolean, isFrozen: boolean, invertNormalMapX: boolean, invertNormalMapY: boolean): void;
    /**
     * Checks to see if a texture is used in the material.
     * @param texture - Base texture to use.
     * @returns - Boolean specifying if a texture is used in the material.
     */
    hasTexture(texture: BaseTexture): boolean;
    /**
     * Returns an array of the actively used textures.
     * @param activeTextures Array of BaseTextures
     */
    getActiveTextures(activeTextures: BaseTexture[]): void;
    /**
     * Returns the animatable textures.
     * @param animatables Array of animatable textures.
     */
    getAnimatables(animatables: IAnimatable[]): void;
    /**
     * Disposes the resources of the material.
     * @param forceDisposeTextures - Forces the disposal of all textures.
     */
    dispose(forceDisposeTextures?: boolean): void;
    /**
    * Get the current class name of the texture useful for serialization or dynamic coding.
    * @returns "PBRClearCoatConfiguration"
    */
    getClassName(): string;
    /**
     * Add fallbacks to the effect fallbacks list.
     * @param defines defines the Base texture to use.
     * @param fallbacks defines the current fallback list.
     * @param currentRank defines the current fallback rank.
     * @returns the new fallback rank.
     */
    static AddFallbacks(defines: IMaterialClearCoatDefines, fallbacks: EffectFallbacks, currentRank: number): number;
    /**
     * Add the required uniforms to the current list.
     * @param uniforms defines the current uniform list.
     */
    static AddUniforms(uniforms: string[]): void;
    /**
     * Add the required samplers to the current list.
     * @param samplers defines the current sampler list.
     */
    static AddSamplers(samplers: string[]): void;
    /**
     * Add the required uniforms to the current buffer.
     * @param uniformBuffer defines the current uniform buffer.
     */
    static PrepareUniformBuffer(uniformBuffer: UniformBuffer): void;
    /**
     * Makes a duplicate of the current configuration into another one.
     * @param clearCoatConfiguration define the config where to copy the info
     */
    copyTo(clearCoatConfiguration: PBRClearCoatConfiguration): void;
    /**
     * Serializes this clear coat configuration.
     * @returns - An object with the serialized config.
     */
    serialize(): any;
    /**
     * Parses a Clear Coat Configuration from a serialized object.
     * @param source - Serialized object.
     */
    parse(source: any): void;
}
export {};
