{"version":3,"file":"ddsTextureLoader.js","sourceRoot":"","sources":["../../../../../sourceES6/core/Materials/Textures/Loaders/ddsTextureLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../../types\";\r\nimport { SphericalPolynomial } from \"../../../Maths/sphericalPolynomial\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { _TimeToken } from \"../../../Instrumentation/timeToken\";\r\nimport { _DepthCullingState, _StencilState, _AlphaState } from \"../../../States/index\";\r\nimport { DDSTools, DDSInfo } from \"../../../Misc/dds\";\r\n/**\r\n * Implementation of the DDS Texture Loader.\r\n * @hidden\r\n */\r\nexport class _DDSTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = true;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @param fallback defines the fallback internal texture if any\r\n     * @param isBase64 defines whether the texture is encoded as a base64\r\n     * @param isBuffer defines whether the texture data are stored as a buffer\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string, textureFormatInUse: Nullable<string>, fallback: Nullable<InternalTexture>, isBase64: boolean, isBuffer: boolean): boolean {\r\n        return extension.indexOf(\".dds\") === 0;\r\n    }\r\n\r\n    /**\r\n     * Transform the url before loading if required.\r\n     * @param rootUrl the url of the texture\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @returns the transformed texture\r\n     */\r\n    public transformUrl(rootUrl: string, textureFormatInUse: Nullable<string>): string {\r\n        return rootUrl;\r\n    }\r\n\r\n    /**\r\n     * Gets the fallback url in case the load fail. This can return null to allow the default fallback mecanism to work\r\n     * @param rootUrl the url of the texture\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @returns the fallback texture\r\n     */\r\n    public getFallbackTextureUrl(rootUrl: string, textureFormatInUse: Nullable<string>): Nullable<string> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGl Texture. It has alreday been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(imgs: string | ArrayBuffer | (string | ArrayBuffer)[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>, onError: Nullable<(message?: string, exception?: any) => void>): void {\r\n        var engine = texture.getEngine();\r\n        var info: DDSInfo | undefined;\r\n        var loadMipmap: boolean = false;\r\n        if (Array.isArray(imgs)) {\r\n            for (let index = 0; index < imgs.length; index++) {\r\n                let data = imgs[index];\r\n                info = DDSTools.GetDDSInfo(data);\r\n\r\n                texture.width = info.width;\r\n                texture.height = info.height;\r\n\r\n                loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\r\n\r\n                engine._unpackFlipY(info.isCompressed);\r\n\r\n                DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6, -1, index);\r\n\r\n                if (!info.isFourCC && info.mipmapCount === 1) {\r\n                    engine.generateMipMapsForCubemap(texture);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var data = imgs;\r\n            info = DDSTools.GetDDSInfo(data);\r\n\r\n            texture.width = info.width;\r\n            texture.height = info.height;\r\n\r\n            if (createPolynomials) {\r\n                info.sphericalPolynomial = new SphericalPolynomial();\r\n            }\r\n\r\n            loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\r\n            engine._unpackFlipY(info.isCompressed);\r\n\r\n            DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6);\r\n\r\n            if (!info.isFourCC && info.mipmapCount === 1) {\r\n                engine.generateMipMapsForCubemap(texture);\r\n            }\r\n        }\r\n\r\n        engine._setCubeMapTextureParams(loadMipmap);\r\n        texture.isReady = true;\r\n\r\n        if (onLoad) {\r\n            onLoad({ isDDS: true, width: texture.width, info, data: imgs, texture });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGl Texture. It has alreday been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(data: ArrayBuffer, texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void): void {\r\n        var info = DDSTools.GetDDSInfo(data);\r\n\r\n        var loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps && ((info.width >> (info.mipmapCount - 1)) === 1);\r\n        callback(info.width, info.height, loadMipmap, info.isFourCC, () => {\r\n            DDSTools.UploadDDSLevels(texture.getEngine(), texture, data, info, loadMipmap, 1);\r\n        });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _DDSTextureLoader());\r\n"]}