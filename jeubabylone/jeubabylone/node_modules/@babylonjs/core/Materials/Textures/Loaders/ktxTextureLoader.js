import { KhronosTextureContainer } from "../../../Misc/khronosTextureContainer";
import { Engine } from "../../../Engines/engine";
/**
 * Implementation of the KTX Texture Loader.
 * @hidden
 */
var _KTXTextureLoader = /** @class */ (function () {
    function _KTXTextureLoader() {
        /**
         * Defines wether the loader supports cascade loading the different faces.
         */
        this.supportCascades = false;
    }
    /**
     * This returns if the loader support the current file information.
     * @param extension defines the file extension of the file being loaded
     * @param textureFormatInUse defines the current compressed format in use iun the engine
     * @param fallback defines the fallback internal texture if any
     * @param isBase64 defines whether the texture is encoded as a base64
     * @param isBuffer defines whether the texture data are stored as a buffer
     * @returns true if the loader can load the specified file
     */
    _KTXTextureLoader.prototype.canLoad = function (extension, textureFormatInUse, fallback, isBase64, isBuffer) {
        if (textureFormatInUse && !isBase64 && !fallback && !isBuffer) {
            return true;
        }
        return false;
    };
    /**
     * Transform the url before loading if required.
     * @param rootUrl the url of the texture
     * @param textureFormatInUse defines the current compressed format in use iun the engine
     * @returns the transformed texture
     */
    _KTXTextureLoader.prototype.transformUrl = function (rootUrl, textureFormatInUse) {
        var lastDot = rootUrl.lastIndexOf('.');
        if (lastDot != -1 && rootUrl.substring(lastDot + 1) == "ktx") {
            // Already transformed
            return rootUrl;
        }
        return (lastDot > -1 ? rootUrl.substring(0, lastDot) : rootUrl) + textureFormatInUse;
    };
    /**
     * Gets the fallback url in case the load fail. This can return null to allow the default fallback mecanism to work
     * @param rootUrl the url of the texture
     * @param textureFormatInUse defines the current compressed format in use iun the engine
     * @returns the fallback texture
     */
    _KTXTextureLoader.prototype.getFallbackTextureUrl = function (rootUrl, textureFormatInUse) {
        // remove the format appended to the rootUrl in the original createCubeTexture call.
        var exp = new RegExp("" + textureFormatInUse + "$");
        return rootUrl.replace(exp, "");
    };
    /**
     * Uploads the cube texture data to the WebGl Texture. It has alreday been bound.
     * @param data contains the texture data
     * @param texture defines the BabylonJS internal texture
     * @param createPolynomials will be true if polynomials have been requested
     * @param onLoad defines the callback to trigger once the texture is ready
     * @param onError defines the callback to trigger in case of error
     */
    _KTXTextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {
        if (Array.isArray(data)) {
            return;
        }
        // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture
        texture._invertVScale = !texture.invertY;
        var engine = texture.getEngine();
        var ktx = new KhronosTextureContainer(data, 6);
        var loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;
        engine._unpackFlipY(true);
        ktx.uploadLevels(texture, texture.generateMipMaps);
        texture.width = ktx.pixelWidth;
        texture.height = ktx.pixelHeight;
        engine._setCubeMapTextureParams(loadMipmap);
        texture.isReady = true;
    };
    /**
     * Uploads the 2D texture data to the WebGl Texture. It has alreday been bound once in the callback.
     * @param data contains the texture data
     * @param texture defines the BabylonJS internal texture
     * @param callback defines the method to call once ready to upload
     */
    _KTXTextureLoader.prototype.loadData = function (data, texture, callback) {
        // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture
        texture._invertVScale = !texture.invertY;
        var ktx = new KhronosTextureContainer(data, 1);
        callback(ktx.pixelWidth, ktx.pixelHeight, false, true, function () {
            ktx.uploadLevels(texture, texture.generateMipMaps);
        }, ktx.isInvalid);
    };
    return _KTXTextureLoader;
}());
export { _KTXTextureLoader };
// Register the loader.
Engine._TextureLoaders.unshift(new _KTXTextureLoader());
//# sourceMappingURL=ktxTextureLoader.js.map