{"version":3,"file":"ktxTextureLoader.js","sourceRoot":"","sources":["../../../../../sourceES6/core/Materials/Textures/Loaders/ktxTextureLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { KhronosTextureContainer } from \"../../../Misc/khronosTextureContainer\";\r\nimport { Nullable } from \"../../../types\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { _TimeToken } from \"../../../Instrumentation/timeToken\";\r\nimport { _DepthCullingState, _StencilState, _AlphaState } from \"../../../States/index\";\r\n/**\r\n * Implementation of the KTX Texture Loader.\r\n * @hidden\r\n */\r\nexport class _KTXTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @param fallback defines the fallback internal texture if any\r\n     * @param isBase64 defines whether the texture is encoded as a base64\r\n     * @param isBuffer defines whether the texture data are stored as a buffer\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string, textureFormatInUse: Nullable<string>, fallback: Nullable<InternalTexture>, isBase64: boolean, isBuffer: boolean): boolean {\r\n        if (textureFormatInUse && !isBase64 && !fallback && !isBuffer) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Transform the url before loading if required.\r\n     * @param rootUrl the url of the texture\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @returns the transformed texture\r\n     */\r\n    public transformUrl(rootUrl: string, textureFormatInUse: Nullable<string>): string {\r\n        var lastDot = rootUrl.lastIndexOf('.');\r\n        if (lastDot != -1 && rootUrl.substring(lastDot + 1) == \"ktx\") {\r\n            // Already transformed\r\n            return rootUrl;\r\n        }\r\n        return (lastDot > -1 ? rootUrl.substring(0, lastDot) : rootUrl) + textureFormatInUse;\r\n    }\r\n\r\n    /**\r\n     * Gets the fallback url in case the load fail. This can return null to allow the default fallback mecanism to work\r\n     * @param rootUrl the url of the texture\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @returns the fallback texture\r\n     */\r\n    public getFallbackTextureUrl(rootUrl: string, textureFormatInUse: Nullable<string>): Nullable<string> {\r\n        // remove the format appended to the rootUrl in the original createCubeTexture call.\r\n        var exp = new RegExp(\"\" + textureFormatInUse! + \"$\");\r\n        return rootUrl.replace(exp, \"\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGl Texture. It has alreday been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(data: string | ArrayBuffer | (string | ArrayBuffer)[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>, onError: Nullable<(message?: string, exception?: any) => void>): void {\r\n        if (Array.isArray(data)) {\r\n            return;\r\n        }\r\n\r\n        // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\r\n        texture._invertVScale = !texture.invertY;\r\n        var engine = texture.getEngine();\r\n        var ktx = new KhronosTextureContainer(data, 6);\r\n\r\n        var loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;\r\n\r\n        engine._unpackFlipY(true);\r\n\r\n        ktx.uploadLevels(texture, texture.generateMipMaps);\r\n\r\n        texture.width = ktx.pixelWidth;\r\n        texture.height = ktx.pixelHeight;\r\n\r\n        engine._setCubeMapTextureParams(loadMipmap);\r\n        texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGl Texture. It has alreday been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(data: ArrayBuffer, texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void, loadFailed: boolean) => void): void {\r\n        // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\r\n        texture._invertVScale = !texture.invertY;\r\n        var ktx = new KhronosTextureContainer(data, 1);\r\n\r\n        callback(ktx.pixelWidth, ktx.pixelHeight, false, true, () => {\r\n            ktx.uploadLevels(texture, texture.generateMipMaps);\r\n        }, ktx.isInvalid);\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.unshift(new _KTXTextureLoader());\r\n"]}