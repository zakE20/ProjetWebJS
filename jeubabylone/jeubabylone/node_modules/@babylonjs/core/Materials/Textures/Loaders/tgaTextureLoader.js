import { TGATools } from "../../../Misc/tga";
import { Engine } from "../../../Engines/engine";
/**
 * Implementation of the TGA Texture Loader.
 * @hidden
 */
var _TGATextureLoader = /** @class */ (function () {
    function _TGATextureLoader() {
        /**
         * Defines wether the loader supports cascade loading the different faces.
         */
        this.supportCascades = false;
    }
    /**
     * This returns if the loader support the current file information.
     * @param extension defines the file extension of the file being loaded
     * @param textureFormatInUse defines the current compressed format in use iun the engine
     * @param fallback defines the fallback internal texture if any
     * @param isBase64 defines whether the texture is encoded as a base64
     * @param isBuffer defines whether the texture data are stored as a buffer
     * @returns true if the loader can load the specified file
     */
    _TGATextureLoader.prototype.canLoad = function (extension, textureFormatInUse, fallback, isBase64, isBuffer) {
        return extension.indexOf(".tga") === 0;
    };
    /**
     * Transform the url before loading if required.
     * @param rootUrl the url of the texture
     * @param textureFormatInUse defines the current compressed format in use iun the engine
     * @returns the transformed texture
     */
    _TGATextureLoader.prototype.transformUrl = function (rootUrl, textureFormatInUse) {
        return rootUrl;
    };
    /**
     * Gets the fallback url in case the load fail. This can return null to allow the default fallback mecanism to work
     * @param rootUrl the url of the texture
     * @param textureFormatInUse defines the current compressed format in use iun the engine
     * @returns the fallback texture
     */
    _TGATextureLoader.prototype.getFallbackTextureUrl = function (rootUrl, textureFormatInUse) {
        return null;
    };
    /**
     * Uploads the cube texture data to the WebGl Texture. It has alreday been bound.
     * @param data contains the texture data
     * @param texture defines the BabylonJS internal texture
     * @param createPolynomials will be true if polynomials have been requested
     * @param onLoad defines the callback to trigger once the texture is ready
     * @param onError defines the callback to trigger in case of error
     */
    _TGATextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {
        throw ".env not supported in Cube.";
    };
    /**
     * Uploads the 2D texture data to the WebGl Texture. It has alreday been bound once in the callback.
     * @param data contains the texture data
     * @param texture defines the BabylonJS internal texture
     * @param callback defines the method to call once ready to upload
     */
    _TGATextureLoader.prototype.loadData = function (data, texture, callback) {
        var uintData = new Uint8Array(data);
        var header = TGATools.GetTGAHeader(uintData);
        callback(header.width, header.height, texture.generateMipMaps, false, function () {
            TGATools.UploadContent(texture, uintData);
        });
    };
    return _TGATextureLoader;
}());
export { _TGATextureLoader };
// Register the loader.
Engine._TextureLoaders.push(new _TGATextureLoader());
//# sourceMappingURL=tgaTextureLoader.js.map