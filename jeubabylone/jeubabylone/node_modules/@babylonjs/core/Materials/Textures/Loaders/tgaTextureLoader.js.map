{"version":3,"file":"tgaTextureLoader.js","sourceRoot":"","sources":["../../../../../sourceES6/core/Materials/Textures/Loaders/tgaTextureLoader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C,OAAO,EAAE,MAAM,EAAE,MAAM,yBAAyB,CAAC;AAKjD;;;GAGG;AACH;IAAA;QACI;;WAEG;QACa,oBAAe,GAAG,KAAK,CAAC;IA8D5C,CAAC;IA5DG;;;;;;;;OAQG;IACI,mCAAO,GAAd,UAAe,SAAiB,EAAE,kBAAoC,EAAE,QAAmC,EAAE,QAAiB,EAAE,QAAiB;QAC7I,OAAO,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACI,wCAAY,GAAnB,UAAoB,OAAe,EAAE,kBAAoC;QACrE,OAAO,OAAO,CAAC;IACnB,CAAC;IAED;;;;;OAKG;IACI,iDAAqB,GAA5B,UAA6B,OAAe,EAAE,kBAAoC;QAC9E,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;OAOG;IACI,wCAAY,GAAnB,UAAoB,IAAqD,EAAE,OAAwB,EAAE,iBAA0B,EAAE,MAAsC,EAAE,OAA8D;QACnO,MAAM,6BAA6B,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACI,oCAAQ,GAAf,UAAgB,IAAiB,EAAE,OAAwB,EACvD,QAA+G;QAC/G,IAAI,QAAQ,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;QAEpC,IAAI,MAAM,GAAG,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC7C,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,eAAe,EAAE,KAAK,EAAE;YAClE,QAAQ,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACP,CAAC;IACL,wBAAC;AAAD,CAAC,AAlED,IAkEC;;AAED,uBAAuB;AACvB,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,iBAAiB,EAAE,CAAC,CAAC","sourcesContent":["import { TGATools } from \"../../../Misc/tga\";\r\nimport { Nullable } from \"../../../types\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { _TimeToken } from \"../../../Instrumentation/timeToken\";\r\nimport { _DepthCullingState, _StencilState, _AlphaState } from \"../../../States/index\";\r\n/**\r\n * Implementation of the TGA Texture Loader.\r\n * @hidden\r\n */\r\nexport class _TGATextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @param fallback defines the fallback internal texture if any\r\n     * @param isBase64 defines whether the texture is encoded as a base64\r\n     * @param isBuffer defines whether the texture data are stored as a buffer\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string, textureFormatInUse: Nullable<string>, fallback: Nullable<InternalTexture>, isBase64: boolean, isBuffer: boolean): boolean {\r\n        return extension.indexOf(\".tga\") === 0;\r\n    }\r\n\r\n    /**\r\n     * Transform the url before loading if required.\r\n     * @param rootUrl the url of the texture\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @returns the transformed texture\r\n     */\r\n    public transformUrl(rootUrl: string, textureFormatInUse: Nullable<string>): string {\r\n        return rootUrl;\r\n    }\r\n\r\n    /**\r\n     * Gets the fallback url in case the load fail. This can return null to allow the default fallback mecanism to work\r\n     * @param rootUrl the url of the texture\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @returns the fallback texture\r\n     */\r\n    public getFallbackTextureUrl(rootUrl: string, textureFormatInUse: Nullable<string>): Nullable<string> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGl Texture. It has alreday been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(data: string | ArrayBuffer | (string | ArrayBuffer)[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>, onError: Nullable<(message?: string, exception?: any) => void>): void {\r\n        throw \".env not supported in Cube.\";\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGl Texture. It has alreday been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(data: ArrayBuffer, texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void): void {\r\n        var uintData = new Uint8Array(data);\r\n\r\n        var header = TGATools.GetTGAHeader(uintData);\r\n        callback(header.width, header.height, texture.generateMipMaps, false, () => {\r\n            TGATools.UploadContent(texture, uintData);\r\n        });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _TGATextureLoader());\r\n"]}