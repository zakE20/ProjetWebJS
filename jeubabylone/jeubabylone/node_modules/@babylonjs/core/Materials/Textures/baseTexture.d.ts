import { Observable } from "../../Misc/observable";
import { IAnimatable } from "../../Misc/tools";
import { Nullable } from "../../types";
import { Scene } from "../../scene";
import { Matrix, ISize } from "../../Maths/math";
import { SphericalPolynomial } from "../../Maths/sphericalPolynomial";
import { InternalTexture } from "../../Materials/Textures/internalTexture";
/**
 * Base class of all the textures in babylon.
 * It groups all the common properties the materials, post process, lights... might need
 * in order to make a correct use of the texture.
 */
export declare class BaseTexture implements IAnimatable {
    /**
     * Default anisotropic filtering level for the application.
     * It is set to 4 as a good tradeoff between perf and quality.
     */
    static DEFAULT_ANISOTROPIC_FILTERING_LEVEL: number;
    /**
     * Gets or sets the unique id of the texture
     */
    uniqueId: number;
    /**
     * Define the name of the texture.
     */
    name: string;
    /**
     * Gets or sets an object used to store user defined information.
     */
    metadata: any;
    /**
     * For internal use only. Please do not use.
     */
    reservedDataStore: any;
    private _hasAlpha;
    /**
     * Define if the texture is having a usable alpha value (can be use for transparency or glossiness for instance).
     */
    hasAlpha: boolean;
    /**
     * Defines if the alpha value should be determined via the rgb values.
     * If true the luminance of the pixel might be used to find the corresponding alpha value.
     */
    getAlphaFromRGB: boolean;
    /**
     * Intensity or strength of the texture.
     * It is commonly used by materials to fine tune the intensity of the texture
     */
    level: number;
    /**
     * Define the UV chanel to use starting from 0 and defaulting to 0.
     * This is part of the texture as textures usually maps to one uv set.
     */
    coordinatesIndex: number;
    private _coordinatesMode;
    /**
    * How a texture is mapped.
    *
    * | Value | Type                                | Description |
    * | ----- | ----------------------------------- | ----------- |
    * | 0     | EXPLICIT_MODE                       |             |
    * | 1     | SPHERICAL_MODE                      |             |
    * | 2     | PLANAR_MODE                         |             |
    * | 3     | CUBIC_MODE                          |             |
    * | 4     | PROJECTION_MODE                     |             |
    * | 5     | SKYBOX_MODE                         |             |
    * | 6     | INVCUBIC_MODE                       |             |
    * | 7     | EQUIRECTANGULAR_MODE                |             |
    * | 8     | FIXED_EQUIRECTANGULAR_MODE          |             |
    * | 9     | FIXED_EQUIRECTANGULAR_MIRRORED_MODE |             |
    */
    coordinatesMode: number;
    /**
    * | Value | Type               | Description |
    * | ----- | ------------------ | ----------- |
    * | 0     | CLAMP_ADDRESSMODE  |             |
    * | 1     | WRAP_ADDRESSMODE   |             |
    * | 2     | MIRROR_ADDRESSMODE |             |
    */
    wrapU: number;
    /**
    * | Value | Type               | Description |
    * | ----- | ------------------ | ----------- |
    * | 0     | CLAMP_ADDRESSMODE  |             |
    * | 1     | WRAP_ADDRESSMODE   |             |
    * | 2     | MIRROR_ADDRESSMODE |             |
    */
    wrapV: number;
    /**
    * | Value | Type               | Description |
    * | ----- | ------------------ | ----------- |
    * | 0     | CLAMP_ADDRESSMODE  |             |
    * | 1     | WRAP_ADDRESSMODE   |             |
    * | 2     | MIRROR_ADDRESSMODE |             |
    */
    wrapR: number;
    /**
     * With compliant hardware and browser (supporting anisotropic filtering)
     * this defines the level of anisotropic filtering in the texture.
     * The higher the better but the slower. This defaults to 4 as it seems to be the best tradeoff.
     */
    anisotropicFilteringLevel: number;
    /**
     * Define if the texture is a cube texture or if false a 2d texture.
     */
    isCube: boolean;
    /**
     * Define if the texture is a 3d texture (webgl 2) or if false a 2d texture.
     */
    is3D: boolean;
    /**
     * Define if the texture contains data in gamma space (most of the png/jpg aside bump).
     * HDR texture are usually stored in linear space.
     * This only impacts the PBR and Background materials
     */
    gammaSpace: boolean;
    /**
     * Gets whether or not the texture contains RGBD data.
     */
    readonly isRGBD: boolean;
    /**
     * Is Z inverted in the texture (useful in a cube texture).
     */
    invertZ: boolean;
    /**
     * Are mip maps generated for this texture or not.
     */
    readonly noMipmap: boolean;
    /**
     * @hidden
     */
    lodLevelInAlpha: boolean;
    /**
     * With prefiltered texture, defined the offset used during the prefiltering steps.
     */
    lodGenerationOffset: number;
    /**
     * With prefiltered texture, defined the scale used during the prefiltering steps.
     */
    lodGenerationScale: number;
    /**
     * Define if the texture is a render target.
     */
    isRenderTarget: boolean;
    /**
     * Define the unique id of the texture in the scene.
     */
    readonly uid: string;
    /**
     * Return a string representation of the texture.
     * @returns the texture as a string
     */
    toString(): string;
    /**
     * Get the class name of the texture.
     * @returns "BaseTexture"
     */
    getClassName(): string;
    /**
     * Define the list of animation attached to the texture.
     */
    animations: import("../../Animations/animation").Animation[];
    /**
    * An event triggered when the texture is disposed.
    */
    onDisposeObservable: Observable<BaseTexture>;
    private _onDisposeObserver;
    /**
     * Callback triggered when the texture has been disposed.
     * Kept for back compatibility, you can use the onDisposeObservable instead.
     */
    onDispose: () => void;
    /**
     * Define the current state of the loading sequence when in delayed load mode.
     */
    delayLoadState: number;
    private _scene;
    /** @hidden */
    _texture: Nullable<InternalTexture>;
    private _uid;
    /**
     * Define if the texture is preventinga material to render or not.
     * If not and the texture is not ready, the engine will use a default black texture instead.
     */
    readonly isBlocking: boolean;
    /**
     * Instantiates a new BaseTexture.
     * Base class of all the textures in babylon.
     * It groups all the common properties the materials, post process, lights... might need
     * in order to make a correct use of the texture.
     * @param scene Define the scene the texture blongs to
     */
    constructor(scene: Nullable<Scene>);
    /**
     * Get the scene the texture belongs to.
     * @returns the scene or null if undefined
     */
    getScene(): Nullable<Scene>;
    /**
     * Get the texture transform matrix used to offset tile the texture for istance.
     * @returns the transformation matrix
     */
    getTextureMatrix(): Matrix;
    /**
     * Get the texture reflection matrix used to rotate/transform the reflection.
     * @returns the reflection matrix
     */
    getReflectionTextureMatrix(): Matrix;
    /**
     * Get the underlying lower level texture from Babylon.
     * @returns the insternal texture
     */
    getInternalTexture(): Nullable<InternalTexture>;
    /**
     * Get if the texture is ready to be consumed (either it is ready or it is not blocking)
     * @returns true if ready or not blocking
     */
    isReadyOrNotBlocking(): boolean;
    /**
     * Get if the texture is ready to be used (downloaded, converted, mip mapped...).
     * @returns true if fully ready
     */
    isReady(): boolean;
    private _cachedSize;
    /**
     * Get the size of the texture.
     * @returns the texture size.
     */
    getSize(): ISize;
    /**
     * Get the base size of the texture.
     * It can be different from the size if the texture has been resized for POT for instance
     * @returns the base size
     */
    getBaseSize(): ISize;
    /**
           * Update the sampling mode of the texture.
           * Default is Trilinear mode.
           *
           * | Value | Type               | Description |
           * | ----- | ------------------ | ----------- |
           * | 1     | NEAREST_SAMPLINGMODE or NEAREST_NEAREST_MIPLINEAR  | Nearest is: mag = nearest, min = nearest, mip = linear |
           * | 2     | BILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPNEAREST | Bilinear is: mag = linear, min = linear, mip = nearest |
           * | 3     | TRILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPLINEAR | Trilinear is: mag = linear, min = linear, mip = linear |
           * | 4     | NEAREST_NEAREST_MIPNEAREST |             |
           * | 5    | NEAREST_LINEAR_MIPNEAREST |             |
           * | 6    | NEAREST_LINEAR_MIPLINEAR |             |
           * | 7    | NEAREST_LINEAR |             |
           * | 8    | NEAREST_NEAREST |             |
           * | 9   | LINEAR_NEAREST_MIPNEAREST |             |
           * | 10   | LINEAR_NEAREST_MIPLINEAR |             |
           * | 11   | LINEAR_LINEAR |             |
           * | 12   | LINEAR_NEAREST |             |
           *
           *    > _mag_: magnification filter (close to the viewer)
           *    > _min_: minification filter (far from the viewer)
           *    > _mip_: filter used between mip map levels
           *@param samplingMode Define the new sampling mode of the texture
           */
    updateSamplingMode(samplingMode: number): void;
    /**
     * Scales the texture if is `canRescale()`
     * @param ratio the resize factor we want to use to rescale
     */
    scale(ratio: number): void;
    /**
     * Get if the texture can rescale.
     */
    readonly canRescale: boolean;
    /** @hidden */
    _getFromCache(url: Nullable<string>, noMipmap: boolean, sampling?: number, invertY?: boolean): Nullable<InternalTexture>;
    /** @hidden */
    _rebuild(): void;
    /**
     * Triggers the load sequence in delayed load mode.
     */
    delayLoad(): void;
    /**
     * Clones the texture.
     * @returns the cloned texture
     */
    clone(): Nullable<BaseTexture>;
    /**
     * Get the texture underlying type (INT, FLOAT...)
     */
    readonly textureType: number;
    /**
     * Get the texture underlying format (RGB, RGBA...)
     */
    readonly textureFormat: number;
    /**
     * Reads the pixels stored in the webgl texture and returns them as an ArrayBuffer.
     * This will returns an RGBA array buffer containing either in values (0-255) or
     * float values (0-1) depending of the underlying buffer type.
     * @param faceIndex defines the face of the texture to read (in case of cube texture)
     * @param level defines the LOD level of the texture to read (in case of Mip Maps)
     * @param buffer defines a user defined buffer to fill with data (can be null)
     * @returns The Array buffer containing the pixels data.
     */
    readPixels(faceIndex?: number, level?: number, buffer?: Nullable<ArrayBufferView>): Nullable<ArrayBufferView>;
    /**
     * Release and destroy the underlying lower level texture aka internalTexture.
     */
    releaseInternalTexture(): void;
    /**
     * Get the polynomial representation of the texture data.
     * This is mainly use as a fast way to recover IBL Diffuse irradiance data.
     * @see https://learnopengl.com/PBR/IBL/Diffuse-irradiance
     */
    sphericalPolynomial: Nullable<SphericalPolynomial>;
    /** @hidden */
    readonly _lodTextureHigh: Nullable<BaseTexture>;
    /** @hidden */
    readonly _lodTextureMid: Nullable<BaseTexture>;
    /** @hidden */
    readonly _lodTextureLow: Nullable<BaseTexture>;
    /**
     * Dispose the texture and release its associated resources.
     */
    dispose(): void;
    /**
     * Serialize the texture into a JSON representation that can be parsed later on.
     * @returns the JSON representation of the texture
     */
    serialize(): any;
    /**
     * Helper function to be called back once a list of texture contains only ready textures.
     * @param textures Define the list of textures to wait for
     * @param callback Define the callback triggered once the entire list will be ready
     */
    static WhenAllReady(textures: BaseTexture[], callback: () => void): void;
}
