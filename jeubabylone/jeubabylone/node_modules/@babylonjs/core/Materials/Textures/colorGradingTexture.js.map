{"version":3,"file":"colorGradingTexture.js","sourceRoot":"","sources":["../../../../sourceES6/core/Materials/Textures/colorGradingTexture.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAG1C,OAAO,EAAE,WAAW,EAAE,MAAM,sCAAsC,CAAC;AAGnE,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAElD;;;;;;;GAOG;AACH;IAAyC,+CAAW;IAkBhD;;;;;OAKG;IACH,6BAAY,GAAW,EAAE,KAAY;QAArC,YACI,kBAAM,KAAK,CAAC,SA4Bf;QA1BG,IAAI,CAAC,GAAG,EAAE;;SAET;QAED,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QACjC,KAAI,CAAC,cAAc,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QACxC,KAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,KAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC;QAC1C,KAAI,CAAC,KAAK,GAAG,SAAS,CAAC,yBAAyB,CAAC;QACjD,KAAI,CAAC,KAAK,GAAG,SAAS,CAAC,yBAAyB,CAAC;QACjD,KAAI,CAAC,KAAK,GAAG,SAAS,CAAC,yBAAyB,CAAC;QAEjD,KAAI,CAAC,yBAAyB,GAAG,CAAC,CAAC;QAEnC,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAE9C,IAAI,CAAC,KAAI,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,KAAK,CAAC,wBAAwB,EAAE;gBACjC,KAAI,CAAC,WAAW,EAAE,CAAC;aACtB;iBAAM;gBACH,KAAI,CAAC,cAAc,GAAG,SAAS,CAAC,wBAAwB,CAAC;aAC5D;SACJ;;IACL,CAAC;IAED;;;OAGG;IACI,8CAAgB,GAAvB;QACI,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED;;OAEG;IACK,4CAAc,GAAtB;QACI,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC1B,IAAI,OAAwB,CAAC;QAC7B,IAAI,MAAM,CAAC,YAAY,KAAK,CAAC,EAAE;YAC3B,OAAO,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,kBAAkB,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,6BAA6B,CAAC,CAAC;SACtI;aACI;YACD,OAAO,GAAG,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,kBAAkB,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,6BAA6B,CAAC,CAAC;SAC3I;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,QAAQ,GAAG,UAAC,IAA0B;YAEtC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAC1B,OAAO;aACV;YAED,IAAI,IAAI,GAAyB,IAAI,CAAC;YACtC,IAAI,QAAQ,GAA2B,IAAI,CAAC;YAE5C,IAAI,IAAY,CAAC;YACjB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC7B,IAAI,IAAI,GAAG,CAAC,EAAE,WAAW,GAAG,CAAC,EAAE,WAAW,GAAG,CAAC,EAAE,eAAe,GAAG,CAAC,CAAC;YACpE,IAAI,QAAQ,GAAG,CAAC,CAAC;YAEjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEhB,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBACrD,SAAS;iBACZ;gBAED,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBACzB,SAAS;iBACZ;gBAED,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC5B,IAAI,IAAI,KAAK,CAAC,EAAE;oBACZ,wBAAwB;oBACxB,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC;oBACpB,IAAI,GAAG,IAAI,UAAU,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,wCAAwC;oBACvF,QAAQ,GAAG,IAAI,YAAY,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;oBACpD,SAAS;iBACZ;gBAED,IAAI,IAAI,IAAI,CAAC,EAAE;oBACX,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAExC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;oBACjC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;oBACjC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;oBAEjC,IAAI,iBAAiB,GAAG,CAAC,WAAW,GAAG,eAAe,GAAG,IAAI,GAAG,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;oBAE/F,IAAI,QAAQ,EAAE;wBACV,QAAQ,CAAC,iBAAiB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;wBACpC,QAAQ,CAAC,iBAAiB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;wBACpC,QAAQ,CAAC,iBAAiB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;qBACvC;oBAED,sDAAsD;oBACtD,qBAAqB;oBACrB,qCAAqC;oBACrC,qBAAqB;oBACrB,2BAA2B;oBAC3B,qCAAqC;oBACrC,yBAAyB;oBACzB,2BAA2B;oBAC3B,QAAQ;oBACR,IAAI;oBAEJ,WAAW,EAAE,CAAC;oBACd,IAAI,WAAW,GAAG,IAAI,IAAI,CAAC,EAAE;wBACzB,eAAe,EAAE,CAAC;wBAClB,WAAW,GAAG,CAAC,CAAC;wBAChB,IAAI,eAAe,GAAG,IAAI,IAAI,CAAC,EAAE;4BAC7B,WAAW,EAAE,CAAC;4BACd,eAAe,GAAG,CAAC,CAAC;yBACvB;qBACJ;iBACJ;aACJ;YAED,IAAI,QAAQ,IAAI,IAAI,EAAE;gBAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACtC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;wBAC5B,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;qBACjB;yBACI;wBACD,IAAI,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;wBACxB,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC;qBACtC;iBACJ;aACJ;YAED,IAAI,OAAO,CAAC,IAAI,EAAE;gBACd,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACrC,MAAM,CAAC,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;aACjF;iBACI;gBACD,OAAO,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,EAAE,IAAI,CAAC,CAAC;gBACtC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;aAC/E;QACL,CAAC,CAAC;QAEF,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC5B,IAAI,KAAK,EAAE;YACP,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;SACvC;aACI;YACD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;SAC9C;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED;;OAEG;IACK,yCAAW,GAAnB;QACI,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;YACnF,IAAI,CAAC,cAAc,EAAE,CAAC;SACzB;IACL,CAAC;IAED;;OAEG;IACI,mCAAK,GAAZ;QACI,IAAI,UAAU,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,GAAG,EAAS,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE3E,eAAe;QACf,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAE9B,OAAO,UAAU,CAAC;IACtB,CAAC;IAED;;OAEG;IACI,uCAAS,GAAhB;QACI,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,CAAC,wBAAwB,EAAE;YAC5D,OAAO;SACV;QAED,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC,qBAAqB,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAEnD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,WAAW,EAAE,CAAC;SACtB;IACL,CAAC;IAED;;;;;;OAMG;IACW,yBAAK,GAAnB,UAAoB,aAAkB,EAAE,KAAY;QAChD,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,aAAa,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE;YACrD,OAAO,GAAG,IAAI,mBAAmB,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC7D,OAAO,CAAC,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;YAClC,OAAO,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;SACvC;QACD,OAAO,OAAO,CAAC;IACnB,CAAC;IAED;;OAEG;IACI,uCAAS,GAAhB;QACI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,OAAO,IAAI,CAAC;SACf;QAED,IAAI,mBAAmB,GAAQ,EAAE,CAAC;QAClC,mBAAmB,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrC,mBAAmB,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACvC,mBAAmB,CAAC,UAAU,GAAG,6BAA6B,CAAC;QAE/D,OAAO,mBAAmB,CAAC;IAC/B,CAAC;IAlPD;;OAEG;IACY,uCAAmB,GAAG,KAAK,CAAC;IAgP/C,0BAAC;CAAA,AA9PD,CAAyC,WAAW,GA8PnD;SA9PY,mBAAmB;AAgQhC,UAAU,CAAC,eAAe,CAAC,6BAA6B,CAAC,GAAG,mBAAmB,CAAC","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Matrix } from \"../../Maths/math\";\r\nimport { Engine } from \"../../Engines/engine\";\r\nimport { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { _TimeToken } from \"../../Instrumentation/timeToken\";\r\nimport { _DepthCullingState, _StencilState, _AlphaState } from \"../../States/index\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { _TypeStore } from '../../Misc/typeStore';\r\n\r\n/**\r\n * This represents a color grading texture. This acts as a lookup table LUT, useful during post process\r\n * It can help converting any input color in a desired output one. This can then be used to create effects\r\n * from sepia, black and white to sixties or futuristic rendering...\r\n *\r\n * The only supported format is currently 3dl.\r\n * More information on LUT: https://en.wikipedia.org/wiki/3D_lookup_table\r\n */\r\nexport class ColorGradingTexture extends BaseTexture {\r\n    /**\r\n     * The current texture matrix. (will always be identity in color grading texture)\r\n     */\r\n    private _textureMatrix: Matrix;\r\n\r\n    /**\r\n     * The texture URL.\r\n     */\r\n    public url: string;\r\n\r\n    /**\r\n     * Empty line regex stored for GC.\r\n     */\r\n    private static _noneEmptyLineRegex = /\\S+/;\r\n\r\n    private _engine: Engine;\r\n\r\n    /**\r\n     * Instantiates a ColorGradingTexture from the following parameters.\r\n     *\r\n     * @param url The location of the color gradind data (currently only supporting 3dl)\r\n     * @param scene The scene the texture will be used in\r\n     */\r\n    constructor(url: string, scene: Scene) {\r\n        super(scene);\r\n\r\n        if (!url) {\r\n            return;\r\n        }\r\n\r\n        this._engine = scene.getEngine();\r\n        this._textureMatrix = Matrix.Identity();\r\n        this.name = url;\r\n        this.url = url;\r\n        this.hasAlpha = false;\r\n        this.isCube = false;\r\n        this.is3D = this._engine.webGLVersion > 1;\r\n        this.wrapU = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n        this.wrapV = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n        this.wrapR = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n\r\n        this.anisotropicFilteringLevel = 1;\r\n\r\n        this._texture = this._getFromCache(url, true);\r\n\r\n        if (!this._texture) {\r\n            if (!scene.useDelayedTextureLoading) {\r\n                this.loadTexture();\r\n            } else {\r\n                this.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the texture matrix used in most of the material.\r\n     * This is not used in color grading but keep for troubleshooting purpose (easily swap diffuse by colorgrading to look in).\r\n     */\r\n    public getTextureMatrix(): Matrix {\r\n        return this._textureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Occurs when the file being loaded is a .3dl LUT file.\r\n     */\r\n    private load3dlTexture() {\r\n        var engine = this._engine;\r\n        var texture: InternalTexture;\r\n        if (engine.webGLVersion === 1) {\r\n            texture = engine.createRawTexture(null, 1, 1, Constants.TEXTUREFORMAT_RGBA, false, false, Constants.TEXTURE_BILINEAR_SAMPLINGMODE);\r\n        }\r\n        else {\r\n            texture = engine.createRawTexture3D(null, 1, 1, 1, Constants.TEXTUREFORMAT_RGBA, false, false, Constants.TEXTURE_BILINEAR_SAMPLINGMODE);\r\n        }\r\n\r\n        this._texture = texture;\r\n\r\n        var callback = (text: string | ArrayBuffer) => {\r\n\r\n            if (typeof text !== \"string\") {\r\n                return;\r\n            }\r\n\r\n            var data: Nullable<Uint8Array> = null;\r\n            var tempData: Nullable<Float32Array> = null;\r\n\r\n            var line: string;\r\n            var lines = text.split('\\n');\r\n            var size = 0, pixelIndexW = 0, pixelIndexH = 0, pixelIndexSlice = 0;\r\n            var maxColor = 0;\r\n\r\n            for (let i = 0; i < lines.length; i++) {\r\n                line = lines[i];\r\n\r\n                if (!ColorGradingTexture._noneEmptyLineRegex.test(line)) {\r\n                    continue;\r\n                }\r\n\r\n                if (line.indexOf('#') === 0) {\r\n                    continue;\r\n                }\r\n\r\n                var words = line.split(\" \");\r\n                if (size === 0) {\r\n                    // Number of space + one\r\n                    size = words.length;\r\n                    data = new Uint8Array(size * size * size * 4); // volume texture of side size and rgb 8\r\n                    tempData = new Float32Array(size * size * size * 4);\r\n                    continue;\r\n                }\r\n\r\n                if (size != 0) {\r\n                    var r = Math.max(parseInt(words[0]), 0);\r\n                    var g = Math.max(parseInt(words[1]), 0);\r\n                    var b = Math.max(parseInt(words[2]), 0);\r\n\r\n                    maxColor = Math.max(r, maxColor);\r\n                    maxColor = Math.max(g, maxColor);\r\n                    maxColor = Math.max(b, maxColor);\r\n\r\n                    var pixelStorageIndex = (pixelIndexW + pixelIndexSlice * size + pixelIndexH * size * size) * 4;\r\n\r\n                    if (tempData) {\r\n                        tempData[pixelStorageIndex + 0] = r;\r\n                        tempData[pixelStorageIndex + 1] = g;\r\n                        tempData[pixelStorageIndex + 2] = b;\r\n                    }\r\n\r\n                    // Keep for reference in case of back compat problems.\r\n                    // pixelIndexSlice++;\r\n                    // if (pixelIndexSlice % size == 0) {\r\n                    //     pixelIndexH++;\r\n                    //     pixelIndexSlice = 0;\r\n                    //     if (pixelIndexH % size == 0) {\r\n                    //         pixelIndexW++;\r\n                    //         pixelIndexH = 0;\r\n                    //     }\r\n                    // }\r\n\r\n                    pixelIndexH++;\r\n                    if (pixelIndexH % size == 0) {\r\n                        pixelIndexSlice++;\r\n                        pixelIndexH = 0;\r\n                        if (pixelIndexSlice % size == 0) {\r\n                            pixelIndexW++;\r\n                            pixelIndexSlice = 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (tempData && data) {\r\n                for (let i = 0; i < tempData.length; i++) {\r\n                    if (i > 0 && (i + 1) % 4 === 0) {\r\n                        data[i] = 255;\r\n                    }\r\n                    else {\r\n                        var value = tempData[i];\r\n                        data[i] = (value / maxColor * 255);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (texture.is3D) {\r\n                texture.updateSize(size, size, size);\r\n                engine.updateRawTexture3D(texture, data, Constants.TEXTUREFORMAT_RGBA, false);\r\n            }\r\n            else {\r\n                texture.updateSize(size * size, size);\r\n                engine.updateRawTexture(texture, data, Constants.TEXTUREFORMAT_RGBA, false);\r\n            }\r\n        };\r\n\r\n        let scene = this.getScene();\r\n        if (scene) {\r\n            scene._loadFile(this.url, callback);\r\n        }\r\n        else {\r\n            this._engine._loadFile(this.url, callback);\r\n        }\r\n\r\n        return this._texture;\r\n    }\r\n\r\n    /**\r\n     * Starts the loading process of the texture.\r\n     */\r\n    private loadTexture() {\r\n        if (this.url && this.url.toLocaleLowerCase().indexOf(\".3dl\") == (this.url.length - 4)) {\r\n            this.load3dlTexture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the color gradind texture.\r\n     */\r\n    public clone(): ColorGradingTexture {\r\n        var newTexture = new ColorGradingTexture(this.url, <Scene>this.getScene());\r\n\r\n        // Base texture\r\n        newTexture.level = this.level;\r\n\r\n        return newTexture;\r\n    }\r\n\r\n    /**\r\n     * Called during delayed load for textures.\r\n     */\r\n    public delayLoad(): void {\r\n        if (this.delayLoadState !== Constants.DELAYLOADSTATE_NOTLOADED) {\r\n            return;\r\n        }\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n        this._texture = this._getFromCache(this.url, true);\r\n\r\n        if (!this._texture) {\r\n            this.loadTexture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses a color grading texture serialized by Babylon.\r\n     * @param parsedTexture The texture information being parsedTexture\r\n     * @param scene The scene to load the texture in\r\n     * @param rootUrl The root url of the data assets to load\r\n     * @return A color gradind texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene): Nullable<ColorGradingTexture> {\r\n        var texture = null;\r\n        if (parsedTexture.name && !parsedTexture.isRenderTarget) {\r\n            texture = new ColorGradingTexture(parsedTexture.name, scene);\r\n            texture.name = parsedTexture.name;\r\n            texture.level = parsedTexture.level;\r\n        }\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * Serializes the LUT texture to json format.\r\n     */\r\n    public serialize(): any {\r\n        if (!this.name) {\r\n            return null;\r\n        }\r\n\r\n        var serializationObject: any = {};\r\n        serializationObject.name = this.name;\r\n        serializationObject.level = this.level;\r\n        serializationObject.customType = \"BABYLON.ColorGradingTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ColorGradingTexture\"] = ColorGradingTexture;\r\n"]}