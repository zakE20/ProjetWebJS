import { Observable } from "../../Misc/observable";
import { Nullable, int } from "../../types";
import { SphericalPolynomial } from "../../Maths/sphericalPolynomial";
declare type Engine = import("../../Engines/engine").Engine;
declare type BaseTexture = import("../../Materials/Textures/baseTexture").BaseTexture;
/**
 * Class used to store data associated with WebGL texture data for the engine
 * This class should not be used directly
 */
export declare class InternalTexture {
    /** hidden */
    static _UpdateRGBDAsync: (internalTexture: InternalTexture, data: ArrayBufferView[][], sphericalPolynomial: SphericalPolynomial | null, lodScale: number, lodOffset: number) => Promise<void>;
    /**
     * The source of the texture data is unknown
     */
    static DATASOURCE_UNKNOWN: number;
    /**
     * Texture data comes from an URL
     */
    static DATASOURCE_URL: number;
    /**
     * Texture data is only used for temporary storage
     */
    static DATASOURCE_TEMP: number;
    /**
     * Texture data comes from raw data (ArrayBuffer)
     */
    static DATASOURCE_RAW: number;
    /**
     * Texture content is dynamic (video or dynamic texture)
     */
    static DATASOURCE_DYNAMIC: number;
    /**
     * Texture content is generated by rendering to it
     */
    static DATASOURCE_RENDERTARGET: number;
    /**
     * Texture content is part of a multi render target process
     */
    static DATASOURCE_MULTIRENDERTARGET: number;
    /**
     * Texture data comes from a cube data file
     */
    static DATASOURCE_CUBE: number;
    /**
     * Texture data comes from a raw cube data
     */
    static DATASOURCE_CUBERAW: number;
    /**
     * Texture data come from a prefiltered cube data file
     */
    static DATASOURCE_CUBEPREFILTERED: number;
    /**
     * Texture content is raw 3D data
     */
    static DATASOURCE_RAW3D: number;
    /**
     * Texture content is a depth texture
     */
    static DATASOURCE_DEPTHTEXTURE: number;
    /**
     * Texture data comes from a raw cube data encoded with RGBD
     */
    static DATASOURCE_CUBERAW_RGBD: number;
    /**
     * Defines if the texture is ready
     */
    isReady: boolean;
    /**
     * Defines if the texture is a cube texture
     */
    isCube: boolean;
    /**
     * Defines if the texture contains 3D data
     */
    is3D: boolean;
    /**
     * Defines if the texture contains multiview data
     */
    isMultiview: boolean;
    /**
     * Gets the URL used to load this texture
     */
    url: string;
    /**
     * Gets the sampling mode of the texture
     */
    samplingMode: number;
    /**
     * Gets a boolean indicating if the texture needs mipmaps generation
     */
    generateMipMaps: boolean;
    /**
     * Gets the number of samples used by the texture (WebGL2+ only)
     */
    samples: number;
    /**
     * Gets the type of the texture (int, float...)
     */
    type: number;
    /**
     * Gets the format of the texture (RGB, RGBA...)
     */
    format: number;
    /**
     * Observable called when the texture is loaded
     */
    onLoadedObservable: Observable<InternalTexture>;
    /**
     * Gets the width of the texture
     */
    width: number;
    /**
     * Gets the height of the texture
     */
    height: number;
    /**
     * Gets the depth of the texture
     */
    depth: number;
    /**
     * Gets the initial width of the texture (It could be rescaled if the current system does not support non power of two textures)
     */
    baseWidth: number;
    /**
     * Gets the initial height of the texture (It could be rescaled if the current system does not support non power of two textures)
     */
    baseHeight: number;
    /**
     * Gets the initial depth of the texture (It could be rescaled if the current system does not support non power of two textures)
     */
    baseDepth: number;
    /**
     * Gets a boolean indicating if the texture is inverted on Y axis
     */
    invertY: boolean;
    /** @hidden */
    _invertVScale: boolean;
    /** @hidden */
    _associatedChannel: number;
    /** @hidden */
    _dataSource: number;
    /** @hidden */
    _buffer: Nullable<string | ArrayBuffer | HTMLImageElement | Blob>;
    /** @hidden */
    _bufferView: Nullable<ArrayBufferView>;
    /** @hidden */
    _bufferViewArray: Nullable<ArrayBufferView[]>;
    /** @hidden */
    _bufferViewArrayArray: Nullable<ArrayBufferView[][]>;
    /** @hidden */
    _size: number;
    /** @hidden */
    _extension: string;
    /** @hidden */
    _files: Nullable<string[]>;
    /** @hidden */
    _workingCanvas: Nullable<HTMLCanvasElement>;
    /** @hidden */
    _workingContext: Nullable<CanvasRenderingContext2D>;
    /** @hidden */
    _framebuffer: Nullable<WebGLFramebuffer>;
    /** @hidden */
    _depthStencilBuffer: Nullable<WebGLRenderbuffer>;
    /** @hidden */
    _MSAAFramebuffer: Nullable<WebGLFramebuffer>;
    /** @hidden */
    _MSAARenderBuffer: Nullable<WebGLRenderbuffer>;
    /** @hidden */
    _attachments: Nullable<number[]>;
    /** @hidden */
    _cachedCoordinatesMode: Nullable<number>;
    /** @hidden */
    _cachedWrapU: Nullable<number>;
    /** @hidden */
    _cachedWrapV: Nullable<number>;
    /** @hidden */
    _cachedWrapR: Nullable<number>;
    /** @hidden */
    _cachedAnisotropicFilteringLevel: Nullable<number>;
    /** @hidden */
    _isDisabled: boolean;
    /** @hidden */
    _compression: Nullable<string>;
    /** @hidden */
    _generateStencilBuffer: boolean;
    /** @hidden */
    _generateDepthBuffer: boolean;
    /** @hidden */
    _comparisonFunction: number;
    /** @hidden */
    _sphericalPolynomial: Nullable<SphericalPolynomial>;
    /** @hidden */
    _lodGenerationScale: number;
    /** @hidden */
    _lodGenerationOffset: number;
    /** @hidden */
    _colorTextureArray: Nullable<WebGLTexture>;
    /** @hidden */
    _depthStencilTextureArray: Nullable<WebGLTexture>;
    /** @hidden */
    _lodTextureHigh: Nullable<BaseTexture>;
    /** @hidden */
    _lodTextureMid: Nullable<BaseTexture>;
    /** @hidden */
    _lodTextureLow: Nullable<BaseTexture>;
    /** @hidden */
    _isRGBD: boolean;
    /** @hidden */
    _webGLTexture: Nullable<WebGLTexture>;
    /** @hidden */
    _references: number;
    private _engine;
    /**
     * Gets the Engine the texture belongs to.
     * @returns The babylon engine
     */
    getEngine(): Engine;
    /**
     * Gets the data source type of the texture (can be one of the InternalTexture.DATASOURCE_XXXX)
     */
    readonly dataSource: number;
    /**
     * Creates a new InternalTexture
     * @param engine defines the engine to use
     * @param dataSource defines the type of data that will be used
     * @param delayAllocation if the texture allocation should be delayed (default: false)
     */
    constructor(engine: Engine, dataSource: number, delayAllocation?: boolean);
    /**
     * Increments the number of references (ie. the number of Texture that point to it)
     */
    incrementReferences(): void;
    /**
     * Change the size of the texture (not the size of the content)
     * @param width defines the new width
     * @param height defines the new height
     * @param depth defines the new depth (1 by default)
     */
    updateSize(width: int, height: int, depth?: int): void;
    /** @hidden */
    _rebuild(): void;
    /** @hidden */
    _swapAndDie(target: InternalTexture): void;
    /**
     * Dispose the current allocated resources
     */
    dispose(): void;
}
export {};
