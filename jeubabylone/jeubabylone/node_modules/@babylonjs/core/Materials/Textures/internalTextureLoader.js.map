{"version":3,"file":"internalTextureLoader.js","sourceRoot":"","sources":["../../../../sourceES6/core/Materials/Textures/internalTextureLoader.ts"],"names":[],"mappings":"","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport { _TimeToken } from \"../../Instrumentation/timeToken\";\r\nimport { _DepthCullingState, _StencilState, _AlphaState } from \"../../States/index\";\r\n/**\r\n * This represents the required contract to create a new type of texture loader.\r\n */\r\nexport interface IInternalTextureLoader {\r\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\r\n    supportCascades: boolean;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @param fallback defines the fallback internal texture if any\r\n     * @param isBase64 defines whether the texture is encoded as a base64\r\n     * @param isBuffer defines whether the texture data are stored as a buffer\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    canLoad(extension: string, textureFormatInUse: Nullable<string>, fallback: Nullable<InternalTexture>, isBase64: boolean, isBuffer: boolean): boolean;\r\n\r\n    /**\r\n     * Transform the url before loading if required.\r\n     * @param rootUrl the url of the texture\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @returns the transformed texture\r\n     */\r\n    transformUrl(rootUrl: string, textureFormatInUse: Nullable<string>): string;\r\n\r\n    /**\r\n     * Gets the fallback url in case the load fail. This can return null to allow the default fallback mecanism to work\r\n     * @param rootUrl the url of the texture\r\n     * @param textureFormatInUse defines the current compressed format in use iun the engine\r\n     * @returns the fallback texture\r\n     */\r\n    getFallbackTextureUrl(rootUrl: string, textureFormatInUse: Nullable<string>): Nullable<string>;\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGl Texture. It has alreday been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    loadCubeData(data: string | ArrayBuffer | (string | ArrayBuffer)[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>, onError: Nullable<(message?: string, exception?: any) => void>): void;\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGl Texture. It has alreday been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    loadData(data: ArrayBuffer, texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void, loadFailed?: boolean) => void): void;\r\n}\r\n"]}