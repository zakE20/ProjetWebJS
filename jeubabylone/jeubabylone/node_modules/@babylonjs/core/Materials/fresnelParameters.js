import { DeepCopier } from "../Misc/deepCopier";
import { Color3 } from "../Maths/math";
import { Engine } from "../Engines/engine";
import { SerializationHelper } from "../Misc/decorators";
import { Constants } from "../Engines/constants";
/**
 * This represents all the required information to add a fresnel effect on a material:
 * @see http://doc.babylonjs.com/how_to/how_to_use_fresnelparameters
 */
var FresnelParameters = /** @class */ (function () {
    function FresnelParameters() {
        this._isEnabled = true;
        /**
         * Define the color used on edges (grazing angle)
         */
        this.leftColor = Color3.White();
        /**
         * Define the color used on center
         */
        this.rightColor = Color3.Black();
        /**
         * Define bias applied to computed fresnel term
         */
        this.bias = 0;
        /**
         * Defined the power exponent applied to fresnel term
         */
        this.power = 1;
    }
    Object.defineProperty(FresnelParameters.prototype, "isEnabled", {
        /**
         * Define if the fresnel effect is enable or not.
         */
        get: function () {
            return this._isEnabled;
        },
        set: function (value) {
            if (this._isEnabled === value) {
                return;
            }
            this._isEnabled = value;
            Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_FresnelDirtyFlag | Constants.MATERIAL_MiscDirtyFlag);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Clones the current fresnel and its valuues
     * @returns a clone fresnel configuration
     */
    FresnelParameters.prototype.clone = function () {
        var newFresnelParameters = new FresnelParameters();
        DeepCopier.DeepCopy(this, newFresnelParameters);
        return newFresnelParameters;
    };
    /**
     * Serializes the current fresnel parameters to a JSON representation.
     * @return the JSON serialization
     */
    FresnelParameters.prototype.serialize = function () {
        var serializationObject = {};
        serializationObject.isEnabled = this.isEnabled;
        serializationObject.leftColor = this.leftColor.asArray();
        serializationObject.rightColor = this.rightColor.asArray();
        serializationObject.bias = this.bias;
        serializationObject.power = this.power;
        return serializationObject;
    };
    /**
     * Parse a JSON object and deserialize it to a new Fresnel parameter object.
     * @param parsedFresnelParameters Define the JSON representation
     * @returns the parsed parameters
     */
    FresnelParameters.Parse = function (parsedFresnelParameters) {
        var fresnelParameters = new FresnelParameters();
        fresnelParameters.isEnabled = parsedFresnelParameters.isEnabled;
        fresnelParameters.leftColor = Color3.FromArray(parsedFresnelParameters.leftColor);
        fresnelParameters.rightColor = Color3.FromArray(parsedFresnelParameters.rightColor);
        fresnelParameters.bias = parsedFresnelParameters.bias;
        fresnelParameters.power = parsedFresnelParameters.power || 1.0;
        return fresnelParameters;
    };
    return FresnelParameters;
}());
export { FresnelParameters };
// References the dependencies.
SerializationHelper._FresnelParametersParser = FresnelParameters.Parse;
//# sourceMappingURL=fresnelParameters.js.map