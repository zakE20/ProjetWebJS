{"version":3,"file":"fresnelParameters.js","sourceRoot":"","sources":["../../../sourceES6/core/Materials/fresnelParameters.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAC3C,OAAO,EAAE,mBAAmB,EAAE,MAAM,oBAAoB,CAAC;AACzD,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAEjD;;;GAGG;AACH;IAAA;QACY,eAAU,GAAG,IAAI,CAAC;QAgB1B;;WAEG;QACI,cAAS,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;QAElC;;WAEG;QACI,eAAU,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;QAEnC;;WAEG;QACI,SAAI,GAAG,CAAC,CAAC;QAEhB;;WAEG;QACI,UAAK,GAAG,CAAC,CAAC;IA8CrB,CAAC;IA5EG,sBAAW,wCAAS;QAHpB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;aACD,UAAqB,KAAc;YAC/B,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,EAAE;gBAC3B,OAAO;aACV;YAED,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,MAAM,CAAC,uBAAuB,CAAC,SAAS,CAAC,yBAAyB,GAAG,SAAS,CAAC,sBAAsB,CAAC,CAAC;QAC3G,CAAC;;;OARA;IA8BD;;;OAGG;IACI,iCAAK,GAAZ;QACI,IAAI,oBAAoB,GAAG,IAAI,iBAAiB,EAAE,CAAC;QAEnD,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;QAEhD,OAAO,oBAAoB,CAAC;IAChC,CAAC;IAED;;;OAGG;IACI,qCAAS,GAAhB;QACI,IAAI,mBAAmB,GAAQ,EAAE,CAAC;QAElC,mBAAmB,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC/C,mBAAmB,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QACzD,mBAAmB,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QAC3D,mBAAmB,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrC,mBAAmB,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAEvC,OAAO,mBAAmB,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACW,uBAAK,GAAnB,UAAoB,uBAA4B;QAC5C,IAAI,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC;QAEhD,iBAAiB,CAAC,SAAS,GAAG,uBAAuB,CAAC,SAAS,CAAC;QAChE,iBAAiB,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;QAClF,iBAAiB,CAAC,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;QACpF,iBAAiB,CAAC,IAAI,GAAG,uBAAuB,CAAC,IAAI,CAAC;QACtD,iBAAiB,CAAC,KAAK,GAAG,uBAAuB,CAAC,KAAK,IAAI,GAAG,CAAC;QAE/D,OAAO,iBAAiB,CAAC;IAC7B,CAAC;IACL,wBAAC;AAAD,CAAC,AAjFD,IAiFC;;AAED,+BAA+B;AAC/B,mBAAmB,CAAC,wBAAwB,GAAG,iBAAiB,CAAC,KAAK,CAAC","sourcesContent":["import { DeepCopier } from \"../Misc/deepCopier\";\r\nimport { Color3 } from \"../Maths/math\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * This represents all the required information to add a fresnel effect on a material:\r\n * @see http://doc.babylonjs.com/how_to/how_to_use_fresnelparameters\r\n */\r\nexport class FresnelParameters {\r\n    private _isEnabled = true;\r\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_FresnelDirtyFlag | Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Define the color used on edges (grazing angle)\r\n     */\r\n    public leftColor = Color3.White();\r\n\r\n    /**\r\n     * Define the color used on center\r\n     */\r\n    public rightColor = Color3.Black();\r\n\r\n    /**\r\n     * Define bias applied to computed fresnel term\r\n     */\r\n    public bias = 0;\r\n\r\n    /**\r\n     * Defined the power exponent applied to fresnel term\r\n     */\r\n    public power = 1;\r\n\r\n    /**\r\n     * Clones the current fresnel and its valuues\r\n     * @returns a clone fresnel configuration\r\n     */\r\n    public clone(): FresnelParameters {\r\n        var newFresnelParameters = new FresnelParameters();\r\n\r\n        DeepCopier.DeepCopy(this, newFresnelParameters);\r\n\r\n        return newFresnelParameters;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current fresnel parameters to a JSON representation.\r\n     * @return the JSON serialization\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject: any = {};\r\n\r\n        serializationObject.isEnabled = this.isEnabled;\r\n        serializationObject.leftColor = this.leftColor.asArray();\r\n        serializationObject.rightColor = this.rightColor.asArray();\r\n        serializationObject.bias = this.bias;\r\n        serializationObject.power = this.power;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse a JSON object and deserialize it to a new Fresnel parameter object.\r\n     * @param parsedFresnelParameters Define the JSON representation\r\n     * @returns the parsed parameters\r\n     */\r\n    public static Parse(parsedFresnelParameters: any): FresnelParameters {\r\n        var fresnelParameters = new FresnelParameters();\r\n\r\n        fresnelParameters.isEnabled = parsedFresnelParameters.isEnabled;\r\n        fresnelParameters.leftColor = Color3.FromArray(parsedFresnelParameters.leftColor);\r\n        fresnelParameters.rightColor = Color3.FromArray(parsedFresnelParameters.rightColor);\r\n        fresnelParameters.bias = parsedFresnelParameters.bias;\r\n        fresnelParameters.power = parsedFresnelParameters.power || 1.0;\r\n\r\n        return fresnelParameters;\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._FresnelParametersParser = FresnelParameters.Parse;"]}