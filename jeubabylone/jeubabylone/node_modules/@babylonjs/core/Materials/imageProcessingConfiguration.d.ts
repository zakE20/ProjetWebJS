import { Observable } from "../Misc/observable";
import { Nullable } from "../types";
import { Color4 } from "../Maths/math";
import { MaterialDefines } from "../Materials/materialDefines";
import { Effect } from "../Materials/effect";
import { BaseTexture } from "../Materials/Textures/baseTexture";
import { ColorCurves } from "../Materials/colorCurves";
/**
 * Interface to follow in your material defines to integrate easily the
 * Image proccessing functions.
 * @hidden
 */
export interface IImageProcessingConfigurationDefines {
    IMAGEPROCESSING: boolean;
    VIGNETTE: boolean;
    VIGNETTEBLENDMODEMULTIPLY: boolean;
    VIGNETTEBLENDMODEOPAQUE: boolean;
    TONEMAPPING: boolean;
    TONEMAPPING_ACES: boolean;
    CONTRAST: boolean;
    EXPOSURE: boolean;
    COLORCURVES: boolean;
    COLORGRADING: boolean;
    COLORGRADING3D: boolean;
    SAMPLER3DGREENDEPTH: boolean;
    SAMPLER3DBGRMAP: boolean;
    IMAGEPROCESSINGPOSTPROCESS: boolean;
}
/**
 * @hidden
 */
export declare class ImageProcessingConfigurationDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {
    IMAGEPROCESSING: boolean;
    VIGNETTE: boolean;
    VIGNETTEBLENDMODEMULTIPLY: boolean;
    VIGNETTEBLENDMODEOPAQUE: boolean;
    TONEMAPPING: boolean;
    TONEMAPPING_ACES: boolean;
    CONTRAST: boolean;
    COLORCURVES: boolean;
    COLORGRADING: boolean;
    COLORGRADING3D: boolean;
    SAMPLER3DGREENDEPTH: boolean;
    SAMPLER3DBGRMAP: boolean;
    IMAGEPROCESSINGPOSTPROCESS: boolean;
    EXPOSURE: boolean;
    constructor();
}
/**
 * This groups together the common properties used for image processing either in direct forward pass
 * or through post processing effect depending on the use of the image processing pipeline in your scene
 * or not.
 */
export declare class ImageProcessingConfiguration {
    /**
     * Default tone mapping applied in BabylonJS.
     */
    static readonly TONEMAPPING_STANDARD = 0;
    /**
     * ACES Tone mapping (used by default in unreal and unity). This can help getting closer
     * to other engines rendering to increase portability.
     */
    static readonly TONEMAPPING_ACES = 1;
    /**
     * Color curves setup used in the effect if colorCurvesEnabled is set to true
     */
    colorCurves: Nullable<ColorCurves>;
    private _colorCurvesEnabled;
    /**
     * Gets wether the color curves effect is enabled.
     */
    /**
    * Sets wether the color curves effect is enabled.
    */
    colorCurvesEnabled: boolean;
    private _colorGradingTexture;
    /**
     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true
     */
    /**
    * Color grading LUT texture used in the effect if colorGradingEnabled is set to true
    */
    colorGradingTexture: Nullable<BaseTexture>;
    private _colorGradingEnabled;
    /**
     * Gets wether the color grading effect is enabled.
     */
    /**
    * Sets wether the color grading effect is enabled.
    */
    colorGradingEnabled: boolean;
    private _colorGradingWithGreenDepth;
    /**
     * Gets wether the color grading effect is using a green depth for the 3d Texture.
     */
    /**
    * Sets wether the color grading effect is using a green depth for the 3d Texture.
    */
    colorGradingWithGreenDepth: boolean;
    private _colorGradingBGR;
    /**
     * Gets wether the color grading texture contains BGR values.
     */
    /**
    * Sets wether the color grading texture contains BGR values.
    */
    colorGradingBGR: boolean;
    /** @hidden */
    _exposure: number;
    /**
     * Gets the Exposure used in the effect.
     */
    /**
    * Sets the Exposure used in the effect.
    */
    exposure: number;
    private _toneMappingEnabled;
    /**
     * Gets wether the tone mapping effect is enabled.
     */
    /**
    * Sets wether the tone mapping effect is enabled.
    */
    toneMappingEnabled: boolean;
    private _toneMappingType;
    /**
     * Gets the type of tone mapping effect.
     */
    /**
    * Sets the type of tone mapping effect used in BabylonJS.
    */
    toneMappingType: number;
    protected _contrast: number;
    /**
     * Gets the contrast used in the effect.
     */
    /**
    * Sets the contrast used in the effect.
    */
    contrast: number;
    /**
     * Vignette stretch size.
     */
    vignetteStretch: number;
    /**
     * Vignette centre X Offset.
     */
    vignetteCentreX: number;
    /**
     * Vignette centre Y Offset.
     */
    vignetteCentreY: number;
    /**
     * Vignette weight or intensity of the vignette effect.
     */
    vignetteWeight: number;
    /**
     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)
     * if vignetteEnabled is set to true.
     */
    vignetteColor: Color4;
    /**
     * Camera field of view used by the Vignette effect.
     */
    vignetteCameraFov: number;
    private _vignetteBlendMode;
    /**
     * Gets the vignette blend mode allowing different kind of effect.
     */
    /**
    * Sets the vignette blend mode allowing different kind of effect.
    */
    vignetteBlendMode: number;
    private _vignetteEnabled;
    /**
     * Gets wether the vignette effect is enabled.
     */
    /**
    * Sets wether the vignette effect is enabled.
    */
    vignetteEnabled: boolean;
    private _applyByPostProcess;
    /**
     * Gets wether the image processing is applied through a post process or not.
     */
    /**
    * Sets wether the image processing is applied through a post process or not.
    */
    applyByPostProcess: boolean;
    private _isEnabled;
    /**
     * Gets wether the image processing is enabled or not.
     */
    /**
    * Sets wether the image processing is enabled or not.
    */
    isEnabled: boolean;
    /**
    * An event triggered when the configuration changes and requires Shader to Update some parameters.
    */
    onUpdateParameters: Observable<ImageProcessingConfiguration>;
    /**
     * Method called each time the image processing information changes requires to recompile the effect.
     */
    protected _updateParameters(): void;
    /**
     * Gets the current class name.
     * @return "ImageProcessingConfiguration"
     */
    getClassName(): string;
    /**
     * Prepare the list of uniforms associated with the Image Processing effects.
     * @param uniforms The list of uniforms used in the effect
     * @param defines the list of defines currently in use
     */
    static PrepareUniforms(uniforms: string[], defines: IImageProcessingConfigurationDefines): void;
    /**
     * Prepare the list of samplers associated with the Image Processing effects.
     * @param samplersList The list of uniforms used in the effect
     * @param defines the list of defines currently in use
     */
    static PrepareSamplers(samplersList: string[], defines: IImageProcessingConfigurationDefines): void;
    /**
     * Prepare the list of defines associated to the shader.
     * @param defines the list of defines to complete
     * @param forPostProcess Define if we are currently in post process mode or not
     */
    prepareDefines(defines: IImageProcessingConfigurationDefines, forPostProcess?: boolean): void;
    /**
     * Returns true if all the image processing information are ready.
     * @returns True if ready, otherwise, false
     */
    isReady(): boolean;
    /**
     * Binds the image processing to the shader.
     * @param effect The effect to bind to
     * @param aspectRatio Define the current aspect ratio of the effect
     */
    bind(effect: Effect, aspectRatio?: number): void;
    /**
     * Clones the current image processing instance.
     * @return The cloned image processing
     */
    clone(): ImageProcessingConfiguration;
    /**
     * Serializes the current image processing instance to a json representation.
     * @return a JSON representation
     */
    serialize(): any;
    /**
     * Parses the image processing from a json representation.
     * @param source the JSON source to parse
     * @return The parsed image processing
     */
    static Parse(source: any): ImageProcessingConfiguration;
    private static _VIGNETTEMODE_MULTIPLY;
    private static _VIGNETTEMODE_OPAQUE;
    /**
     * Used to apply the vignette as a mix with the pixel color.
     */
    static readonly VIGNETTEMODE_MULTIPLY: number;
    /**
     * Used to apply the vignette as a replacement of the pixel color.
     */
    static readonly VIGNETTEMODE_OPAQUE: number;
}
