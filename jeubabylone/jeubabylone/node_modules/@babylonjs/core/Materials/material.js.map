{"version":3,"file":"material.js","sourceRoot":"","sources":["../../../sourceES6/core/Materials/material.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize, SerializationHelper } from \"../Misc/decorators\";\r\nimport { Tools, IAnimatable } from \"../Misc/tools\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport { Observer, Observable } from \"../Misc/observable\";\r\nimport { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Plane, Matrix } from \"../Maths/math\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { BaseSubMesh, SubMesh } from \"../Meshes/subMesh\";\r\nimport { Geometry } from \"../Meshes/geometry\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { UniformBuffer } from \"./uniformBuffer\";\r\nimport { Effect } from \"./effect\";\r\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { MaterialDefines } from \"./materialDefines\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { IInspectable } from '../Misc/iInspectable';\r\n\r\ndeclare type Animation = import(\"../Animations/animation\").Animation;\r\ndeclare type InstancedMesh = import('../Meshes/instancedMesh').InstancedMesh;\r\n\r\ndeclare var BABYLON: any;\r\n\r\n/**\r\n * Base class for the main features of a material in Babylon.js\r\n */\r\nexport class Material implements IAnimatable {\r\n    /**\r\n     * Returns the triangle fill mode\r\n     */\r\n    public static readonly TriangleFillMode = Constants.MATERIAL_TriangleFillMode;\r\n    /**\r\n     * Returns the wireframe mode\r\n     */\r\n    public static readonly WireFrameFillMode = Constants.MATERIAL_WireFrameFillMode;\r\n    /**\r\n     * Returns the point fill mode\r\n     */\r\n    public static readonly PointFillMode = Constants.MATERIAL_PointFillMode;\r\n    /**\r\n     * Returns the point list draw mode\r\n     */\r\n    public static readonly PointListDrawMode = Constants.MATERIAL_PointListDrawMode;\r\n    /**\r\n     * Returns the line list draw mode\r\n     */\r\n    public static readonly LineListDrawMode = Constants.MATERIAL_LineListDrawMode;\r\n    /**\r\n     * Returns the line loop draw mode\r\n     */\r\n    public static readonly LineLoopDrawMode = Constants.MATERIAL_LineLoopDrawMode;\r\n    /**\r\n     * Returns the line strip draw mode\r\n     */\r\n    public static readonly LineStripDrawMode = Constants.MATERIAL_LineStripDrawMode;\r\n    /**\r\n     * Returns the triangle strip draw mode\r\n     */\r\n    public static readonly TriangleStripDrawMode = Constants.MATERIAL_TriangleStripDrawMode;\r\n    /**\r\n     * Returns the triangle fan draw mode\r\n     */\r\n    public static readonly TriangleFanDrawMode = Constants.MATERIAL_TriangleFanDrawMode;\r\n\r\n    /**\r\n     * Stores the clock-wise side orientation\r\n     */\r\n    public static readonly ClockWiseSideOrientation = Constants.MATERIAL_ClockWiseSideOrientation;\r\n\r\n    /**\r\n     * Stores the counter clock-wise side orientation\r\n     */\r\n    public static readonly CounterClockWiseSideOrientation = Constants.MATERIAL_CounterClockWiseSideOrientation;\r\n\r\n    /**\r\n     * The dirty texture flag value\r\n     */\r\n    public static readonly TextureDirtyFlag = Constants.MATERIAL_TextureDirtyFlag;\r\n\r\n    /**\r\n     * The dirty light flag value\r\n     */\r\n    public static readonly LightDirtyFlag = Constants.MATERIAL_LightDirtyFlag;\r\n\r\n    /**\r\n     * The dirty fresnel flag value\r\n     */\r\n    public static readonly FresnelDirtyFlag = Constants.MATERIAL_FresnelDirtyFlag;\r\n\r\n    /**\r\n     * The dirty attribute flag value\r\n     */\r\n    public static readonly AttributesDirtyFlag = Constants.MATERIAL_AttributesDirtyFlag;\r\n\r\n    /**\r\n     * The dirty misc flag value\r\n     */\r\n    public static readonly MiscDirtyFlag = Constants.MATERIAL_MiscDirtyFlag;\r\n\r\n    /**\r\n     * The all dirty flag value\r\n     */\r\n    public static readonly AllDirtyFlag = Constants.MATERIAL_AllDirtyFlag;\r\n\r\n    /**\r\n     * The ID of the material\r\n     */\r\n    @serialize()\r\n    public id: string;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the material\r\n     */\r\n    @serialize()\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * The name of the material\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Gets or sets user defined metadata\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /**\r\n     * For internal use only. Please do not use.\r\n     */\r\n    public reservedDataStore: any = null;\r\n\r\n    /**\r\n     * Specifies if the ready state should be checked on each call\r\n     */\r\n    @serialize()\r\n    public checkReadyOnEveryCall = false;\r\n\r\n    /**\r\n     * Specifies if the ready state should be checked once\r\n     */\r\n    @serialize()\r\n    public checkReadyOnlyOnce = false;\r\n\r\n    /**\r\n     * The state of the material\r\n     */\r\n    @serialize()\r\n    public state = \"\";\r\n\r\n    /**\r\n     * The alpha value of the material\r\n     */\r\n    @serialize(\"alpha\")\r\n    protected _alpha = 1.0;\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/how_to/debug_layer#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    /**\r\n     * Sets the alpha value of the material\r\n     */\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alpha = value;\r\n        this.markAsDirty(Material.MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the alpha value of the material\r\n     */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    /**\r\n     * Specifies if back face culling is enabled\r\n     */\r\n    @serialize(\"backFaceCulling\")\r\n    protected _backFaceCulling = true;\r\n\r\n    /**\r\n     * Sets the back-face culling state\r\n     */\r\n    public set backFaceCulling(value: boolean) {\r\n        if (this._backFaceCulling === value) {\r\n            return;\r\n        }\r\n        this._backFaceCulling = value;\r\n        this.markAsDirty(Material.TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the back-face culling state\r\n     */\r\n    public get backFaceCulling(): boolean {\r\n        return this._backFaceCulling;\r\n    }\r\n\r\n    /**\r\n     * Stores the value for side orientation\r\n     */\r\n    @serialize()\r\n    public sideOrientation: number;\r\n\r\n    /**\r\n     * Callback triggered when the material is compiled\r\n     */\r\n    public onCompiled: Nullable<(effect: Effect) => void> = null;\r\n\r\n    /**\r\n     * Callback triggered when an error occurs\r\n     */\r\n    public onError: Nullable<(effect: Effect, errors: string) => void> = null;\r\n\r\n    /**\r\n     * Callback triggered to get the render target textures\r\n     */\r\n    public getRenderTargetTextures: Nullable<() => SmartArray<RenderTargetTexture>> = null;\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material should be serialized\r\n     */\r\n    public doNotSerialize = false;\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _storeEffectOnSubMeshes = false;\r\n\r\n    /**\r\n     * Stores the animations for the material\r\n     */\r\n    public animations: Nullable<Array<Animation>> = null;\r\n\r\n    /**\r\n    * An event triggered when the material is disposed\r\n    */\r\n    public onDisposeObservable = new Observable<Material>();\r\n\r\n    /**\r\n     * An observer which watches for dispose events\r\n     */\r\n    private _onDisposeObserver: Nullable<Observer<Material>> = null;\r\n    private _onUnBindObservable: Nullable<Observable<Material>> = null;\r\n\r\n    /**\r\n     * Called during a dispose event\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    private _onBindObservable: Nullable<Observable<AbstractMesh>>;\r\n\r\n    /**\r\n    * An event triggered when the material is bound\r\n    */\r\n    public get onBindObservable(): Observable<AbstractMesh> {\r\n        if (!this._onBindObservable) {\r\n            this._onBindObservable = new Observable<AbstractMesh>();\r\n        }\r\n\r\n        return this._onBindObservable;\r\n    }\r\n\r\n    /**\r\n     * An observer which watches for bind events\r\n     */\r\n    private _onBindObserver: Nullable<Observer<AbstractMesh>> = null;\r\n\r\n    /**\r\n     * Called during a bind event\r\n     */\r\n    public set onBind(callback: (Mesh: AbstractMesh) => void) {\r\n        if (this._onBindObserver) {\r\n            this.onBindObservable.remove(this._onBindObserver);\r\n        }\r\n        this._onBindObserver = this.onBindObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the material is unbound\r\n    */\r\n    public get onUnBindObservable(): Observable<Material> {\r\n        if (!this._onUnBindObservable) {\r\n            this._onUnBindObservable = new Observable<Material>();\r\n        }\r\n\r\n        return this._onUnBindObservable;\r\n    }\r\n\r\n    /**\r\n     * Stores the value of the alpha mode\r\n     */\r\n    @serialize(\"alphaMode\")\r\n    private _alphaMode: number = Constants.ALPHA_COMBINE;\r\n\r\n    /**\r\n     * Sets the value of the alpha mode.\r\n     *\r\n     * | Value | Type | Description |\r\n     * | --- | --- | --- |\r\n     * | 0 | ALPHA_DISABLE |   |\r\n     * | 1 | ALPHA_ADD |   |\r\n     * | 2 | ALPHA_COMBINE |   |\r\n     * | 3 | ALPHA_SUBTRACT |   |\r\n     * | 4 | ALPHA_MULTIPLY |   |\r\n     * | 5 | ALPHA_MAXIMIZED |   |\r\n     * | 6 | ALPHA_ONEONE |   |\r\n     * | 7 | ALPHA_PREMULTIPLIED |   |\r\n     * | 8 | ALPHA_PREMULTIPLIED_PORTERDUFF |   |\r\n     * | 9 | ALPHA_INTERPOLATE |   |\r\n     * | 10 | ALPHA_SCREENMODE |   |\r\n     *\r\n     */\r\n    public set alphaMode(value: number) {\r\n        if (this._alphaMode === value) {\r\n            return;\r\n        }\r\n        this._alphaMode = value;\r\n        this.markAsDirty(Material.TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the alpha mode\r\n     */\r\n    public get alphaMode(): number {\r\n        return this._alphaMode;\r\n    }\r\n\r\n    /**\r\n     * Stores the state of the need depth pre-pass value\r\n     */\r\n    @serialize()\r\n    private _needDepthPrePass = false;\r\n\r\n    /**\r\n     * Sets the need depth pre-pass value\r\n     */\r\n    public set needDepthPrePass(value: boolean) {\r\n        if (this._needDepthPrePass === value) {\r\n            return;\r\n        }\r\n        this._needDepthPrePass = value;\r\n        if (this._needDepthPrePass) {\r\n            this.checkReadyOnEveryCall = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the depth pre-pass value\r\n     */\r\n    public get needDepthPrePass(): boolean {\r\n        return this._needDepthPrePass;\r\n    }\r\n\r\n    /**\r\n     * Specifies if depth writing should be disabled\r\n     */\r\n    @serialize()\r\n    public disableDepthWrite = false;\r\n\r\n    /**\r\n     * Specifies if depth writing should be forced\r\n     */\r\n    @serialize()\r\n    public forceDepthWrite = false;\r\n\r\n    /**\r\n     * Specifies if there should be a separate pass for culling\r\n     */\r\n    @serialize()\r\n    public separateCullingPass = false;\r\n\r\n    /**\r\n     * Stores the state specifing if fog should be enabled\r\n     */\r\n    @serialize(\"fogEnabled\")\r\n    private _fogEnabled = true;\r\n\r\n    /**\r\n     * Sets the state for enabling fog\r\n     */\r\n    public set fogEnabled(value: boolean) {\r\n        if (this._fogEnabled === value) {\r\n            return;\r\n        }\r\n        this._fogEnabled = value;\r\n        this.markAsDirty(Material.MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the fog enabled state\r\n     */\r\n    public get fogEnabled(): boolean {\r\n        return this._fogEnabled;\r\n    }\r\n\r\n    /**\r\n     * Stores the size of points\r\n     */\r\n    @serialize()\r\n    public pointSize = 1.0;\r\n\r\n    /**\r\n     * Stores the z offset value\r\n     */\r\n    @serialize()\r\n    public zOffset = 0;\r\n\r\n    /**\r\n     * Gets a value specifying if wireframe mode is enabled\r\n     */\r\n    @serialize()\r\n    public get wireframe(): boolean {\r\n        switch (this._fillMode) {\r\n            case Material.WireFrameFillMode:\r\n            case Material.LineListDrawMode:\r\n            case Material.LineLoopDrawMode:\r\n            case Material.LineStripDrawMode:\r\n                return true;\r\n        }\r\n\r\n        return this._scene.forceWireframe;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of wireframe mode\r\n     */\r\n    public set wireframe(value: boolean) {\r\n        this.fillMode = (value ? Material.WireFrameFillMode : Material.TriangleFillMode);\r\n    }\r\n\r\n    /**\r\n     * Gets the value specifying if point clouds are enabled\r\n     */\r\n    @serialize()\r\n    public get pointsCloud(): boolean {\r\n        switch (this._fillMode) {\r\n            case Material.PointFillMode:\r\n            case Material.PointListDrawMode:\r\n                return true;\r\n        }\r\n\r\n        return this._scene.forcePointsCloud;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of point cloud mode\r\n     */\r\n    public set pointsCloud(value: boolean) {\r\n        this.fillMode = (value ? Material.PointFillMode : Material.TriangleFillMode);\r\n    }\r\n\r\n    /**\r\n     * Gets the material fill mode\r\n     */\r\n    @serialize()\r\n    public get fillMode(): number {\r\n        return this._fillMode;\r\n    }\r\n\r\n    /**\r\n     * Sets the material fill mode\r\n     */\r\n    public set fillMode(value: number) {\r\n        if (this._fillMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._fillMode = value;\r\n        this.markAsDirty(Material.MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Stores the effects for the material\r\n     */\r\n    public _effect: Nullable<Effect> = null;\r\n\r\n    /**\r\n     * @hidden\r\n     * Specifies if the material was previously ready\r\n     */\r\n    public _wasPreviouslyReady = false;\r\n\r\n    /**\r\n     * Specifies if uniform buffers should be used\r\n     */\r\n    private _useUBO: boolean = false;\r\n\r\n    /**\r\n     * Stores a reference to the scene\r\n     */\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Stores the fill mode state\r\n     */\r\n    private _fillMode = Material.TriangleFillMode;\r\n\r\n    /**\r\n     * Specifies if the depth write state should be cached\r\n     */\r\n    private _cachedDepthWriteState: boolean = false;\r\n\r\n    /**\r\n     * Stores the uniform buffer\r\n     */\r\n    protected _uniformBuffer: UniformBuffer;\r\n\r\n    /** @hidden */\r\n    public _indexInSceneMaterialArray = -1;\r\n\r\n    /** @hidden */\r\n    public meshMap: Nullable<{ [id: string]: AbstractMesh | undefined }> = null;\r\n\r\n    /**\r\n     * Creates a material instance\r\n     * @param name defines the name of the material\r\n     * @param scene defines the scene to reference\r\n     * @param doNotAdd specifies if the material should be added to the scene\r\n     */\r\n    constructor(name: string, scene: Scene, doNotAdd?: boolean) {\r\n        this.name = name;\r\n        this.id = name || Tools.RandomId();\r\n\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n        this.uniqueId = this._scene.getUniqueId();\r\n\r\n        if (this._scene.useRightHandedSystem) {\r\n            this.sideOrientation = Material.ClockWiseSideOrientation;\r\n        } else {\r\n            this.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n        }\r\n\r\n        this._uniformBuffer = new UniformBuffer(this._scene.getEngine());\r\n        this._useUBO = this.getScene().getEngine().supportsUniformBuffers;\r\n\r\n        if (!doNotAdd) {\r\n            this._scene.addMaterial(this);\r\n        }\r\n\r\n        if (this._scene.useMaterialMeshMap) {\r\n            this.meshMap = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the current material\r\n     * @param fullDetails defines a boolean indicating which levels of logging is desired\r\n     * @returns a string with material information\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        var ret = \"Name: \" + this.name;\r\n        if (fullDetails) {\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the material\r\n     * @returns a string with the class name of the material\r\n     */\r\n    public getClassName(): string {\r\n        return \"Material\";\r\n    }\r\n\r\n    /**\r\n     * Specifies if updates for the material been locked\r\n     */\r\n    public get isFrozen(): boolean {\r\n        return this.checkReadyOnlyOnce;\r\n    }\r\n\r\n    /**\r\n     * Locks updates for the material\r\n     */\r\n    public freeze(): void {\r\n        this.checkReadyOnlyOnce = true;\r\n    }\r\n\r\n    /**\r\n     * Unlocks updates for the material\r\n     */\r\n    public unfreeze(): void {\r\n        this.checkReadyOnlyOnce = false;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param useInstances specifies if instances should be used\r\n     * @returns a boolean indicating if the material is ready to be used\r\n     */\r\n    public isReady(mesh?: AbstractMesh, useInstances?: boolean): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: BaseSubMesh, useInstances?: boolean): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the material effect\r\n     * @returns the effect associated with the material\r\n     */\r\n    public getEffect(): Nullable<Effect> {\r\n        return this._effect;\r\n    }\r\n\r\n    /**\r\n     * Returns the current scene\r\n     * @returns a Scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    /**\r\n     * Specifies if the mesh will require alpha blending\r\n     * @param mesh defines the mesh to check\r\n     * @returns a boolean specifying if alpha blending is needed for the mesh\r\n     */\r\n    public needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\r\n        return this.needAlphaBlending() || (mesh.visibility < 1.0) || mesh.hasVertexAlpha;\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the texture used for the alpha test\r\n     * @returns the texture to use for alpha testing\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it needs to be re-calculated\r\n     */\r\n    public markDirty(): void {\r\n        this._wasPreviouslyReady = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _preBind(effect?: Effect, overrideOrientation: Nullable<number> = null): boolean {\r\n        var engine = this._scene.getEngine();\r\n\r\n        var orientation = (overrideOrientation == null) ? this.sideOrientation : overrideOrientation;\r\n        var reverse = orientation === Material.ClockWiseSideOrientation;\r\n\r\n        engine.enableEffect(effect ? effect : this._effect);\r\n        engine.setState(this.backFaceCulling, this.zOffset, false, reverse);\r\n\r\n        return reverse;\r\n    }\r\n\r\n    /**\r\n     * Binds the material to the mesh\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh to bind the material to\r\n     */\r\n    public bind(world: Matrix, mesh?: Mesh): void {\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to the material\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n    }\r\n\r\n    /**\r\n     * Binds the world matrix to the material\r\n     * @param world defines the world transformation matrix\r\n     */\r\n    public bindOnlyWorldMatrix(world: Matrix): void {\r\n    }\r\n\r\n    /**\r\n     * Binds the scene's uniform buffer to the effect.\r\n     * @param effect defines the effect to bind to the scene uniform buffer\r\n     * @param sceneUbo defines the uniform buffer storing scene data\r\n     */\r\n    public bindSceneUniformBuffer(effect: Effect, sceneUbo: UniformBuffer): void {\r\n        sceneUbo.bindToEffect(effect, \"Scene\");\r\n    }\r\n\r\n    /**\r\n     * Binds the view matrix to the effect\r\n     * @param effect defines the effect to bind the view matrix to\r\n     */\r\n    public bindView(effect: Effect): void {\r\n        if (!this._useUBO) {\r\n            effect.setMatrix(\"view\", this.getScene().getViewMatrix());\r\n        } else {\r\n            this.bindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the view projection matrix to the effect\r\n     * @param effect defines the effect to bind the view projection matrix to\r\n     */\r\n    public bindViewProjection(effect: Effect): void {\r\n        if (!this._useUBO) {\r\n            effect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        } else {\r\n            this.bindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if material alpha testing should be turned on for the mesh\r\n     * @param mesh defines the mesh to check\r\n     */\r\n    protected _shouldTurnAlphaTestOn(mesh: AbstractMesh): boolean {\r\n        return (!this.needAlphaBlendingForMesh(mesh) && this.needAlphaTesting());\r\n    }\r\n\r\n    /**\r\n     * Processes to execute after binding the material to a mesh\r\n     * @param mesh defines the rendered mesh\r\n     */\r\n    protected _afterBind(mesh?: Mesh): void {\r\n        this._scene._cachedMaterial = this;\r\n        if (mesh) {\r\n            this._scene._cachedVisibility = mesh.visibility;\r\n        } else {\r\n            this._scene._cachedVisibility = 1;\r\n        }\r\n\r\n        if (this._onBindObservable && mesh) {\r\n            this._onBindObservable.notifyObservers(mesh);\r\n        }\r\n\r\n        if (this.disableDepthWrite) {\r\n            var engine = this._scene.getEngine();\r\n            this._cachedDepthWriteState = engine.getDepthWrite();\r\n            engine.setDepthWrite(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unbinds the material from the mesh\r\n     */\r\n    public unbind(): void {\r\n        if (this._onUnBindObservable) {\r\n            this._onUnBindObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.disableDepthWrite) {\r\n            var engine = this._scene.getEngine();\r\n            engine.setDepthWrite(this._cachedDepthWriteState);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    public clone(name: string): Nullable<Material> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the meshes bound to the material\r\n     * @returns an array of meshes bound to the material\r\n     */\r\n    public getBindedMeshes(): AbstractMesh[] {\r\n        if (this.meshMap) {\r\n            var result = new Array<AbstractMesh>();\r\n            for (let meshId in this.meshMap) {\r\n                const mesh = this.meshMap[meshId];\r\n                if (mesh) {\r\n                    result.push(mesh);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            const meshes = this._scene.meshes;\r\n            return meshes.filter((mesh) => mesh.material === this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh defines the mesh associated with this material\r\n     * @param onCompiled defines a function to execute once the material is compiled\r\n     * @param options defines the options to configure the compilation\r\n     */\r\n    public forceCompilation(mesh: AbstractMesh, onCompiled?: (material: Material) => void, options?: Partial<{ clipPlane: boolean }>): void {\r\n        let localOptions = {\r\n            clipPlane: false,\r\n            ...options\r\n        };\r\n\r\n        var subMesh = new BaseSubMesh();\r\n        var scene = this.getScene();\r\n\r\n        var checkReady = () => {\r\n            if (!this._scene || !this._scene.getEngine()) {\r\n                return;\r\n            }\r\n\r\n            if (subMesh._materialDefines) {\r\n                subMesh._materialDefines._renderId = -1;\r\n            }\r\n\r\n            var clipPlaneState = scene.clipPlane;\r\n\r\n            if (localOptions.clipPlane) {\r\n                scene.clipPlane = new Plane(0, 0, 0, 1);\r\n            }\r\n\r\n            if (this._storeEffectOnSubMeshes) {\r\n                if (this.isReadyForSubMesh(mesh, subMesh)) {\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                }\r\n                else {\r\n                    setTimeout(checkReady, 16);\r\n                }\r\n            } else {\r\n                if (this.isReady()) {\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                }\r\n                else {\r\n                    setTimeout(checkReady, 16);\r\n                }\r\n            }\r\n\r\n            if (localOptions.clipPlane) {\r\n                scene.clipPlane = clipPlaneState;\r\n            }\r\n        };\r\n\r\n        checkReady();\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh defines the mesh that will use this material\r\n     * @param options defines additional options for compiling the shaders\r\n     * @returns a promise that resolves when the compilation completes\r\n     */\r\n    public forceCompilationAsync(mesh: AbstractMesh, options?: Partial<{ clipPlane: boolean }>): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this.forceCompilation(mesh, () => {\r\n                resolve();\r\n            }, options);\r\n        });\r\n    }\r\n\r\n    private static readonly _ImageProcessingDirtyCallBack = (defines: MaterialDefines) => defines.markAsImageProcessingDirty();\r\n    private static readonly _TextureDirtyCallBack = (defines: MaterialDefines) => defines.markAsTexturesDirty();\r\n    private static readonly _FresnelDirtyCallBack = (defines: MaterialDefines) => defines.markAsFresnelDirty();\r\n    private static readonly _MiscDirtyCallBack = (defines: MaterialDefines) => defines.markAsMiscDirty();\r\n    private static readonly _LightsDirtyCallBack = (defines: MaterialDefines) => defines.markAsLightDirty();\r\n    private static readonly _AttributeDirtyCallBack = (defines: MaterialDefines) => defines.markAsAttributesDirty();\r\n\r\n    private static _FresnelAndMiscDirtyCallBack = (defines: MaterialDefines) => {\r\n        Material._FresnelDirtyCallBack(defines);\r\n        Material._MiscDirtyCallBack(defines);\r\n    }\r\n\r\n    private static _TextureAndMiscDirtyCallBack = (defines: MaterialDefines) => {\r\n        Material._TextureDirtyCallBack(defines);\r\n        Material._MiscDirtyCallBack(defines);\r\n    }\r\n\r\n    private static readonly _DirtyCallbackArray: Array<(defines: MaterialDefines) => void> = [];\r\n    private static readonly _RunDirtyCallBacks = (defines: MaterialDefines) => {\r\n        for (const cb of Material._DirtyCallbackArray) {\r\n            cb(defines);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks a define in the material to indicate that it needs to be re-computed\r\n     * @param flag defines a flag used to determine which parts of the material have to be marked as dirty\r\n     */\r\n    public markAsDirty(flag: number): void {\r\n        if (this.getScene().blockMaterialDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        Material._DirtyCallbackArray.length = 0;\r\n\r\n        if (flag & Material.TextureDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._TextureDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.LightDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._LightsDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.FresnelDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._FresnelDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.AttributesDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._AttributeDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.MiscDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._MiscDirtyCallBack);\r\n        }\r\n\r\n        if (Material._DirtyCallbackArray.length) {\r\n            this._markAllSubMeshesAsDirty(Material._RunDirtyCallBacks);\r\n        }\r\n\r\n        this.getScene().resetCachedMaterial();\r\n    }\r\n\r\n    /**\r\n     * Marks all submeshes of a material to indicate that their material defines need to be re-calculated\r\n     * @param func defines a function which checks material defines against the submeshes\r\n     */\r\n    protected _markAllSubMeshesAsDirty(func: (defines: MaterialDefines) => void) {\r\n        if (this.getScene().blockMaterialDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        const meshes = this.getScene().meshes;\r\n        for (var mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n            for (var subMesh of mesh.subMeshes) {\r\n                if (subMesh.getMaterial() !== this) {\r\n                    continue;\r\n                }\r\n\r\n                if (!subMesh._materialDefines) {\r\n                    continue;\r\n                }\r\n\r\n                func(subMesh._materialDefines);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates that image processing needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsImageProcessingDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._ImageProcessingDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that textures need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsTexturesDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._TextureDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that fresnel needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsFresnelDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._FresnelDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that fresnel and misc need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsFresnelAndMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._FresnelAndMiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that lights need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsLightsDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._LightsDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that attributes need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsAttributesDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._AttributeDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that misc needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that textures and misc need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsTexturesAndMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._TextureAndMiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean): void {\r\n        const scene = this.getScene();\r\n        // Animations\r\n        scene.stopAnimation(this);\r\n        scene.freeProcessedMaterials();\r\n\r\n        // Remove from scene\r\n        scene.removeMaterial(this);\r\n\r\n        if (notBoundToMesh !== true) {\r\n            // Remove from meshes\r\n            if (this.meshMap) {\r\n                for (let meshId in this.meshMap) {\r\n                    const mesh = this.meshMap[meshId];\r\n                    if (mesh) {\r\n                        mesh.material = null; // will set the entry in the map to undefined\r\n                        this.releaseVertexArrayObject(mesh, forceDisposeEffect);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const meshes = scene.meshes;\r\n                for (let mesh of meshes) {\r\n                    if (mesh.material === this && !(mesh as InstancedMesh).sourceMesh) {\r\n                        mesh.material = null;\r\n                        this.releaseVertexArrayObject(mesh, forceDisposeEffect);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._uniformBuffer.dispose();\r\n\r\n        // Shader are kept in cache for further use but we can get rid of this by using forceDisposeEffect\r\n        if (forceDisposeEffect && this._effect) {\r\n            if (!this._storeEffectOnSubMeshes) {\r\n                this._effect.dispose();\r\n            }\r\n\r\n            this._effect = null;\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n\r\n        this.onDisposeObservable.clear();\r\n        if (this._onBindObservable) {\r\n            this._onBindObservable.clear();\r\n        }\r\n\r\n        if (this._onUnBindObservable) {\r\n            this._onUnBindObservable.clear();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    private releaseVertexArrayObject(mesh: AbstractMesh, forceDisposeEffect?: boolean) {\r\n        if ((<Mesh>mesh).geometry) {\r\n            var geometry = <Geometry>((<Mesh>mesh).geometry);\r\n            if (this._storeEffectOnSubMeshes) {\r\n                for (var subMesh of mesh.subMeshes) {\r\n                    geometry._releaseVertexArrayObject(subMesh._materialEffect);\r\n                    if (forceDisposeEffect && subMesh._materialEffect) {\r\n                        subMesh._materialEffect.dispose();\r\n                    }\r\n                }\r\n            } else {\r\n                geometry._releaseVertexArrayObject(this._effect);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes this material\r\n     * @returns the serialized material object\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Creates a material from parsed material data\r\n     * @param parsedMaterial defines parsed material data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures\r\n     * @returns a new material\r\n     */\r\n    public static Parse(parsedMaterial: any, scene: Scene, rootUrl: string): Nullable<Material> {\r\n        if (!parsedMaterial.customType) {\r\n            parsedMaterial.customType = \"BABYLON.StandardMaterial\";\r\n        }\r\n        else if (parsedMaterial.customType === \"BABYLON.PBRMaterial\" && parsedMaterial.overloadedAlbedo) {\r\n            parsedMaterial.customType = \"BABYLON.LegacyPBRMaterial\";\r\n            if (!BABYLON.LegacyPBRMaterial) {\r\n                Logger.Error(\"Your scene is trying to load a legacy version of the PBRMaterial, please, include it from the materials library.\");\r\n                return null;\r\n            }\r\n        }\r\n\r\n        var materialType = Tools.Instantiate(parsedMaterial.customType);\r\n        return materialType.Parse(parsedMaterial, scene, rootUrl);\r\n    }\r\n}"]}