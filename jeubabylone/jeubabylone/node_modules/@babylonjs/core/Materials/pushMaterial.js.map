{"version":3,"file":"pushMaterial.js","sourceRoot":"","sources":["../../../sourceES6/core/Materials/pushMaterial.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAGvC,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AAEjD;;;GAGG;AACH;IAAkC,wCAAQ;IAatC,sBAAY,IAAY,EAAE,KAAY;QAAtC,YACI,kBAAM,IAAI,EAAE,KAAK,CAAC,SAErB;QAZS,mBAAa,GAAW,IAAI,MAAM,EAAE,CAAC;QAE/C;;;;WAIG;QACI,4BAAsB,GAAG,IAAI,CAAC;QAIjC,KAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;;IACxC,CAAC;IAEM,gCAAS,GAAhB;QACI,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAEM,8BAAO,GAAd,UAAe,IAAmB,EAAE,YAAsB;QACtD,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAChD,OAAO,IAAI,CAAC;SACf;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;IACzE,CAAC;IAED;;;;MAIE;IACK,0CAAmB,GAA1B,UAA2B,KAAa;QACpC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACI,2CAAoB,GAA3B,UAA4B,YAAoB;QAC5C,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IAC/D,CAAC;IAEM,2BAAI,GAAX,UAAY,KAAa,EAAE,IAAW;QAClC,IAAI,CAAC,IAAI,EAAE;YACP,OAAO;SACV;QAED,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IAES,iCAAU,GAApB,UAAqB,IAAU,EAAE,MAA+B;QAA/B,uBAAA,EAAA,aAA+B;QAC5D,iBAAM,UAAU,YAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,GAAG,MAAM,CAAC;IAC3C,CAAC;IAES,kCAAW,GAArB,UAAsB,KAAY,EAAE,MAAc,EAAE,UAAsB;QAAtB,2BAAA,EAAA,cAAsB;QACtE,OAAO,KAAK,CAAC,uBAAuB,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;IACnE,CAAC;IACL,mBAAC;AAAD,CAAC,AApED,CAAkC,QAAQ,GAoEzC","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Matrix } from \"../Maths/math\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { Effect } from \"../Materials/effect\";\r\n/**\r\n * Base class of materials working in push mode in babylon JS\r\n * @hidden\r\n */\r\nexport class PushMaterial extends Material {\r\n\r\n    protected _activeEffect: Effect;\r\n\r\n    protected _normalMatrix: Matrix = new Matrix();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the material is allowed to do shader hot swapping.\r\n     * This means that the material can keep using a previous shader while a new one is being compiled.\r\n     * This is mostly used when shader parallel compilation is supported (true by default)\r\n     */\r\n    public allowShaderHotSwapping = true;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this._storeEffectOnSubMeshes = true;\r\n    }\r\n\r\n    public getEffect(): Effect {\r\n        return this._activeEffect;\r\n    }\r\n\r\n    public isReady(mesh?: AbstractMesh, useInstances?: boolean): boolean {\r\n        if (!mesh) {\r\n            return false;\r\n        }\r\n\r\n        if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        return this.isReadyForSubMesh(mesh, mesh.subMeshes[0], useInstances);\r\n    }\r\n\r\n    /**\r\n    * Binds the given world matrix to the active effect\r\n    *\r\n    * @param world the matrix to bind\r\n    */\r\n    public bindOnlyWorldMatrix(world: Matrix): void {\r\n        this._activeEffect.setMatrix(\"world\", world);\r\n    }\r\n\r\n    /**\r\n     * Binds the given normal matrix to the active effect\r\n     *\r\n     * @param normalMatrix the matrix to bind\r\n     */\r\n    public bindOnlyNormalMatrix(normalMatrix: Matrix): void {\r\n        this._activeEffect.setMatrix(\"normalMatrix\", normalMatrix);\r\n    }\r\n\r\n    public bind(world: Matrix, mesh?: Mesh): void {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.bindForSubMesh(world, mesh, mesh.subMeshes[0]);\r\n    }\r\n\r\n    protected _afterBind(mesh: Mesh, effect: Nullable<Effect> = null): void {\r\n        super._afterBind(mesh);\r\n        this.getScene()._cachedEffect = effect;\r\n    }\r\n\r\n    protected _mustRebind(scene: Scene, effect: Effect, visibility: number = 1) {\r\n        return scene.isCachedMaterialInvalid(this, effect, visibility);\r\n    }\r\n}\r\n"]}