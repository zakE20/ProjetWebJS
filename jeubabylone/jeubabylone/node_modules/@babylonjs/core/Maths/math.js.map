{"version":3,"file":"math.js","sourceRoot":"","sources":["../../../sourceES6/core/Maths/math.ts"],"names":[],"mappings":"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C,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAEX,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAEX,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACnC,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC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","sourcesContent":["import { DeepImmutable, Nullable, FloatArray, float } from \"../types\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport { Scalar } from \"./math.scalar\";\r\n/**\r\n * Constant used to convert a value to gamma space\r\n * @ignorenaming\r\n */\r\nexport const ToGammaSpace = 1 / 2.2;\r\n/**\r\n * Constant used to convert a value to linear space\r\n * @ignorenaming\r\n */\r\nexport const ToLinearSpace = 2.2;\r\n/**\r\n * Constant used to define the minimal number value in Babylon.js\r\n * @ignorenaming\r\n */\r\nlet Epsilon = 0.001;\r\nexport { Epsilon };\r\n\r\n/**\r\n * Class used to hold a RBG color\r\n */\r\nexport class Color3 {\r\n\r\n    /**\r\n     * Creates a new Color3 object from red, green, blue values, all between 0 and 1\r\n     * @param r defines the red component (between 0 and 1, default is 0)\r\n     * @param g defines the green component (between 0 and 1, default is 0)\r\n     * @param b defines the blue component (between 0 and 1, default is 0)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the red component (between 0 and 1, default is 0)\r\n         */\r\n        public r: number = 0,\r\n        /**\r\n         * Defines the green component (between 0 and 1, default is 0)\r\n         */\r\n        public g: number = 0,\r\n        /**\r\n         * Defines the blue component (between 0 and 1, default is 0)\r\n         */\r\n        public b: number = 0) {\r\n    }\r\n\r\n    /**\r\n     * Creates a string with the Color3 current values\r\n     * @returns the string representation of the Color3 object\r\n     */\r\n    public toString(): string {\r\n        return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"Color3\"\r\n     * @returns \"Color3\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Color3\";\r\n    }\r\n\r\n    /**\r\n     * Compute the Color3 hash code\r\n     * @returns an unique number that can be used to hash Color3 objects\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.r || 0;\r\n        hash = (hash * 397) ^ (this.g || 0);\r\n        hash = (hash * 397) ^ (this.b || 0);\r\n        return hash;\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Stores in the given array from the given starting index the red, green, blue values as successive elements\r\n     * @param array defines the array where to store the r,g,b components\r\n     * @param index defines an optional index in the target array to define where to start storing values\r\n     * @returns the current Color3 object\r\n     */\r\n    public toArray(array: FloatArray, index: number = 0): Color3 {\r\n        array[index] = this.r;\r\n        array[index + 1] = this.g;\r\n        array[index + 2] = this.b;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color4 object from the current Color3 and the given alpha\r\n     * @param alpha defines the alpha component on the new Color4 object (default is 1)\r\n     * @returns a new Color4 object\r\n     */\r\n    public toColor4(alpha: number = 1): Color4 {\r\n        return new Color4(this.r, this.g, this.b, alpha);\r\n    }\r\n\r\n    /**\r\n     * Returns a new array populated with 3 numeric elements : red, green and blue values\r\n     * @returns the new array\r\n     */\r\n    public asArray(): number[] {\r\n        var result = new Array<number>();\r\n        this.toArray(result, 0);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the luminance value\r\n     * @returns a float value\r\n     */\r\n    public toLuminance(): number {\r\n        return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\r\n    }\r\n\r\n    /**\r\n     * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3 object\r\n     */\r\n    public multiply(otherColor: DeepImmutable<Color3>): Color3 {\r\n        return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines the Color3 object where to store the result\r\n     * @returns the current Color3\r\n     */\r\n    public multiplyToRef(otherColor: DeepImmutable<Color3>, result: Color3): Color3 {\r\n        result.r = this.r * otherColor.r;\r\n        result.g = this.g * otherColor.g;\r\n        result.b = this.b * otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between Color3 objects\r\n     * @param otherColor defines the second operand\r\n     * @returns true if the rgb values are equal to the given ones\r\n     */\r\n    public equals(otherColor: DeepImmutable<Color3>): boolean {\r\n        return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between the current Color3 object and a set of r,b,g values\r\n     * @param r defines the red component to check\r\n     * @param g defines the green component to check\r\n     * @param b defines the blue component to check\r\n     * @returns true if the rgb values are equal to the given ones\r\n     */\r\n    public equalsFloats(r: number, g: number, b: number): boolean {\r\n        return this.r === r && this.g === g && this.b === b;\r\n    }\r\n\r\n    /**\r\n     * Multiplies in place each rgb value by scale\r\n     * @param scale defines the scaling factor\r\n     * @returns the updated Color3\r\n     */\r\n    public scale(scale: number): Color3 {\r\n        return new Color3(this.r * scale, this.g * scale, this.b * scale);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the rgb values by scale and stores the result into \"result\"\r\n     * @param scale defines the scaling factor\r\n     * @param result defines the Color3 object where to store the result\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public scaleToRef(scale: number, result: Color3): Color3 {\r\n        result.r = this.r * scale;\r\n        result.g = this.g * scale;\r\n        result.b = this.b * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current Color3 values by a factor and add the result to a given Color3\r\n     * @param scale defines the scale factor\r\n     * @param result defines color to store the result into\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public scaleAndAddToRef(scale: number, result: Color3): Color3 {\r\n        result.r += this.r * scale;\r\n        result.g += this.g * scale;\r\n        result.b += this.b * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n     * @param min defines minimum clamping value (default is 0)\r\n     * @param max defines maximum clamping value (default is 1)\r\n     * @param result defines color to store the result into\r\n     * @returns the original Color3\r\n     */\r\n    public clampToRef(min: number = 0, max: number = 1, result: Color3): Color3 {\r\n        result.r = Scalar.Clamp(this.r, min, max);\r\n        result.g = Scalar.Clamp(this.g, min, max);\r\n        result.b = Scalar.Clamp(this.b, min, max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 set with the added values of the current Color3 and of the given one\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3\r\n     */\r\n    public add(otherColor: DeepImmutable<Color3>): Color3 {\r\n        return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines Color3 object to store the result into\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public addToRef(otherColor: DeepImmutable<Color3>, result: Color3): Color3 {\r\n        result.r = this.r + otherColor.r;\r\n        result.g = this.g + otherColor.g;\r\n        result.b = this.b + otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 set with the subtracted values of the given one from the current Color3\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3\r\n     */\r\n    public subtract(otherColor: DeepImmutable<Color3>): Color3 {\r\n        return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines Color3 object to store the result into\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public subtractToRef(otherColor: DeepImmutable<Color3>, result: Color3): Color3 {\r\n        result.r = this.r - otherColor.r;\r\n        result.g = this.g - otherColor.g;\r\n        result.b = this.b - otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copy the current object\r\n     * @returns a new Color3 copied the current one\r\n     */\r\n    public clone(): Color3 {\r\n        return new Color3(this.r, this.g, this.b);\r\n    }\r\n\r\n    /**\r\n     * Copies the rgb values from the source in the current Color3\r\n     * @param source defines the source Color3 object\r\n     * @returns the updated Color3 object\r\n     */\r\n    public copyFrom(source: DeepImmutable<Color3>): Color3 {\r\n        this.r = source.r;\r\n        this.g = source.g;\r\n        this.b = source.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the Color3 rgb values from the given floats\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @returns the current Color3 object\r\n     */\r\n    public copyFromFloats(r: number, g: number, b: number): Color3 {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the Color3 rgb values from the given floats\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @returns the current Color3 object\r\n     */\r\n    public set(r: number, g: number, b: number): Color3 {\r\n        return this.copyFromFloats(r, g, b);\r\n    }\r\n\r\n    /**\r\n     * Compute the Color3 hexadecimal code as a string\r\n     * @returns a string containing the hexadecimal representation of the Color3 object\r\n     */\r\n    public toHexString(): string {\r\n        var intR = (this.r * 255) | 0;\r\n        var intG = (this.g * 255) | 0;\r\n        var intB = (this.b * 255) | 0;\r\n        return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB);\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color3 converted from the current one to linear space\r\n     * @returns a new Color3 object\r\n     */\r\n    public toLinearSpace(): Color3 {\r\n        var convertedColor = new Color3();\r\n        this.toLinearSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color3 object where to store the linear space version\r\n     * @returns the unmodified Color3\r\n     */\r\n    public toLinearSpaceToRef(convertedColor: Color3): Color3 {\r\n        convertedColor.r = Math.pow(this.r, ToLinearSpace);\r\n        convertedColor.g = Math.pow(this.g, ToLinearSpace);\r\n        convertedColor.b = Math.pow(this.b, ToLinearSpace);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color3 converted from the current one to gamma space\r\n     * @returns a new Color3 object\r\n     */\r\n    public toGammaSpace(): Color3 {\r\n        var convertedColor = new Color3();\r\n        this.toGammaSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color3 object where to store the gamma space version\r\n     * @returns the unmodified Color3\r\n     */\r\n    public toGammaSpaceToRef(convertedColor: Color3): Color3 {\r\n        convertedColor.r = Math.pow(this.r, ToGammaSpace);\r\n        convertedColor.g = Math.pow(this.g, ToGammaSpace);\r\n        convertedColor.b = Math.pow(this.b, ToGammaSpace);\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n\r\n    private static _BlackReadOnly = Color3.Black() as DeepImmutable<Color3>;\r\n\r\n    /**\r\n     * Creates a new Color3 from the string containing valid hexadecimal values\r\n     * @param hex defines a string containing valid hexadecimal values\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromHexString(hex: string): Color3 {\r\n        if (hex.substring(0, 1) !== \"#\" || hex.length !== 7) {\r\n            return new Color3(0, 0, 0);\r\n        }\r\n\r\n        var r = parseInt(hex.substring(1, 3), 16);\r\n        var g = parseInt(hex.substring(3, 5), 16);\r\n        var b = parseInt(hex.substring(5, 7), 16);\r\n\r\n        return Color3.FromInts(r, g, b);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from the starting index of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color3 {\r\n        return new Color3(array[offset], array[offset + 1], array[offset + 2]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from integer values (< 256)\r\n     * @param r defines the red component to read from (value between 0 and 255)\r\n     * @param g defines the green component to read from (value between 0 and 255)\r\n     * @param b defines the blue component to read from (value between 0 and 255)\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromInts(r: number, g: number, b: number): Color3 {\r\n        return new Color3(r / 255.0, g / 255.0, b / 255.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n     * @param start defines the start Color3 value\r\n     * @param end defines the end Color3 value\r\n     * @param amount defines the gradient value between start and end\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Lerp(start: DeepImmutable<Color3>, end: DeepImmutable<Color3>, amount: number): Color3 {\r\n        var result = new Color3(0.0, 0.0, 0.0);\r\n        Color3.LerpToRef(start, end, amount, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @param result defines the Color3 object where to store the result\r\n     */\r\n    public static LerpToRef(left: DeepImmutable<Color3>, right: DeepImmutable<Color3>, amount: number, result: Color3): void {\r\n        result.r = left.r + ((right.r - left.r) * amount);\r\n        result.g = left.g + ((right.g - left.g) * amount);\r\n        result.b = left.b + ((right.b - left.b) * amount);\r\n    }\r\n\r\n    /**\r\n     * Returns a Color3 value containing a red color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Red(): Color3 { return new Color3(1, 0, 0); }\r\n    /**\r\n     * Returns a Color3 value containing a green color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Green(): Color3 { return new Color3(0, 1, 0); }\r\n    /**\r\n     * Returns a Color3 value containing a blue color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Blue(): Color3 { return new Color3(0, 0, 1); }\r\n    /**\r\n     * Returns a Color3 value containing a black color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Black(): Color3 { return new Color3(0, 0, 0); }\r\n\r\n    /**\r\n      * Gets a Color3 value containing a black color that must not be updated\r\n      */\r\n    public static get BlackReadOnly(): DeepImmutable<Color3> {\r\n        return Color3._BlackReadOnly;\r\n    }\r\n\r\n    /**\r\n     * Returns a Color3 value containing a white color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static White(): Color3 { return new Color3(1, 1, 1); }\r\n    /**\r\n     * Returns a Color3 value containing a purple color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Purple(): Color3 { return new Color3(0.5, 0, 0.5); }\r\n    /**\r\n     * Returns a Color3 value containing a magenta color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Magenta(): Color3 { return new Color3(1, 0, 1); }\r\n    /**\r\n     * Returns a Color3 value containing a yellow color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Yellow(): Color3 { return new Color3(1, 1, 0); }\r\n    /**\r\n     * Returns a Color3 value containing a gray color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Gray(): Color3 { return new Color3(0.5, 0.5, 0.5); }\r\n    /**\r\n     * Returns a Color3 value containing a teal color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Teal(): Color3 { return new Color3(0, 1.0, 1.0); }\r\n    /**\r\n     * Returns a Color3 value containing a random color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Random(): Color3 { return new Color3(Math.random(), Math.random(), Math.random()); }\r\n}\r\n\r\n/**\r\n * Class used to hold a RBGA color\r\n */\r\nexport class Color4 {\r\n    /**\r\n     * Creates a new Color4 object from red, green, blue values, all between 0 and 1\r\n     * @param r defines the red component (between 0 and 1, default is 0)\r\n     * @param g defines the green component (between 0 and 1, default is 0)\r\n     * @param b defines the blue component (between 0 and 1, default is 0)\r\n     * @param a defines the alpha component (between 0 and 1, default is 1)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the red component (between 0 and 1, default is 0)\r\n         */\r\n        public r: number = 0,\r\n        /**\r\n         * Defines the green component (between 0 and 1, default is 0)\r\n         */\r\n        public g: number = 0,\r\n        /**\r\n         * Defines the blue component (between 0 and 1, default is 0)\r\n         */\r\n        public b: number = 0,\r\n        /**\r\n         * Defines the alpha component (between 0 and 1, default is 1)\r\n         */\r\n        public a: number = 1) {\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Adds in place the given Color4 values to the current Color4 object\r\n     * @param right defines the second operand\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public addInPlace(right: DeepImmutable<Color4>): Color4 {\r\n        this.r += right.r;\r\n        this.g += right.g;\r\n        this.b += right.b;\r\n        this.a += right.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\r\n     * @returns the new array\r\n     */\r\n    public asArray(): number[] {\r\n        var result = new Array<number>();\r\n        this.toArray(result, 0);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Stores from the starting index in the given array the Color4 successive values\r\n     * @param array defines the array where to store the r,g,b components\r\n     * @param index defines an optional index in the target array to define where to start storing values\r\n     * @returns the current Color4 object\r\n     */\r\n    public toArray(array: number[], index: number = 0): Color4 {\r\n        array[index] = this.r;\r\n        array[index + 1] = this.g;\r\n        array[index + 2] = this.b;\r\n        array[index + 3] = this.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between Color4 objects\r\n     * @param otherColor defines the second operand\r\n     * @returns true if the rgba values are equal to the given ones\r\n     */\r\n    public equals(otherColor: DeepImmutable<Color4>): boolean {\r\n        return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b && this.a === otherColor.a;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 set with the added values of the current Color4 and of the given one\r\n     * @param right defines the second operand\r\n     * @returns a new Color4 object\r\n     */\r\n    public add(right: DeepImmutable<Color4>): Color4 {\r\n        return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 set with the subtracted values of the given one from the current Color4\r\n     * @param right defines the second operand\r\n     * @returns a new Color4 object\r\n     */\r\n    public subtract(right: DeepImmutable<Color4>): Color4 {\r\n        return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\r\n     * @param right defines the second operand\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the current Color4 object\r\n     */\r\n    public subtractToRef(right: DeepImmutable<Color4>, result: Color4): Color4 {\r\n        result.r = this.r - right.r;\r\n        result.g = this.g - right.g;\r\n        result.b = this.b - right.b;\r\n        result.a = this.a - right.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 with the current Color4 values multiplied by scale\r\n     * @param scale defines the scaling factor to apply\r\n     * @returns a new Color4 object\r\n     */\r\n    public scale(scale: number): Color4 {\r\n        return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current Color4 values by scale and stores the result in \"result\"\r\n     * @param scale defines the scaling factor to apply\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the current unmodified Color4\r\n     */\r\n    public scaleToRef(scale: number, result: Color4): Color4 {\r\n        result.r = this.r * scale;\r\n        result.g = this.g * scale;\r\n        result.b = this.b * scale;\r\n        result.a = this.a * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current Color4 values by a factor and add the result to a given Color4\r\n     * @param scale defines the scale factor\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the unmodified current Color4\r\n     */\r\n    public scaleAndAddToRef(scale: number, result: Color4): Color4 {\r\n        result.r += this.r * scale;\r\n        result.g += this.g * scale;\r\n        result.b += this.b * scale;\r\n        result.a += this.a * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n     * @param min defines minimum clamping value (default is 0)\r\n     * @param max defines maximum clamping value (default is 1)\r\n     * @param result defines color to store the result into.\r\n     * @returns the cuurent Color4\r\n     */\r\n    public clampToRef(min: number = 0, max: number = 1, result: Color4): Color4 {\r\n        result.r = Scalar.Clamp(this.r, min, max);\r\n        result.g = Scalar.Clamp(this.g, min, max);\r\n        result.b = Scalar.Clamp(this.b, min, max);\r\n        result.a = Scalar.Clamp(this.a, min, max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n      * Multipy an Color4 value by another and return a new Color4 object\r\n      * @param color defines the Color4 value to multiply by\r\n      * @returns a new Color4 object\r\n      */\r\n    public multiply(color: Color4): Color4 {\r\n        return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\r\n    }\r\n\r\n    /**\r\n     * Multipy a Color4 value by another and push the result in a reference value\r\n     * @param color defines the Color4 value to multiply by\r\n     * @param result defines the Color4 to fill the result in\r\n     * @returns the result Color4\r\n     */\r\n    public multiplyToRef(color: Color4, result: Color4): Color4 {\r\n        result.r = this.r * color.r;\r\n        result.g = this.g * color.g;\r\n        result.b = this.b * color.b;\r\n        result.a = this.a * color.a;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a string with the Color4 current values\r\n     * @returns the string representation of the Color4 object\r\n     */\r\n    public toString(): string {\r\n        return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \" A:\" + this.a + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"Color4\"\r\n     * @returns \"Color4\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Color4\";\r\n    }\r\n\r\n    /**\r\n     * Compute the Color4 hash code\r\n     * @returns an unique number that can be used to hash Color4 objects\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.r || 0;\r\n        hash = (hash * 397) ^ (this.g || 0);\r\n        hash = (hash * 397) ^ (this.b || 0);\r\n        hash = (hash * 397) ^ (this.a || 0);\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 copied from the current one\r\n     * @returns a new Color4 object\r\n     */\r\n    public clone(): Color4 {\r\n        return new Color4(this.r, this.g, this.b, this.a);\r\n    }\r\n\r\n    /**\r\n     * Copies the given Color4 values into the current one\r\n     * @param source defines the source Color4 object\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public copyFrom(source: Color4): Color4 {\r\n        this.r = source.r;\r\n        this.g = source.g;\r\n        this.b = source.b;\r\n        this.a = source.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given float values into the current one\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @param a defines the alpha component to read from\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public copyFromFloats(r: number, g: number, b: number, a: number): Color4 {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given float values into the current one\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @param a defines the alpha component to read from\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public set(r: number, g: number, b: number, a: number): Color4 {\r\n        return this.copyFromFloats(r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * Compute the Color4 hexadecimal code as a string\r\n     * @returns a string containing the hexadecimal representation of the Color4 object\r\n     */\r\n    public toHexString(): string {\r\n        var intR = (this.r * 255) | 0;\r\n        var intG = (this.g * 255) | 0;\r\n        var intB = (this.b * 255) | 0;\r\n        var intA = (this.a * 255) | 0;\r\n        return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB) + Scalar.ToHex(intA);\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color4 converted from the current one to linear space\r\n     * @returns a new Color4 object\r\n     */\r\n    public toLinearSpace(): Color4 {\r\n        var convertedColor = new Color4();\r\n        this.toLinearSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color4 object where to store the linear space version\r\n     * @returns the unmodified Color4\r\n     */\r\n    public toLinearSpaceToRef(convertedColor: Color4): Color4 {\r\n        convertedColor.r = Math.pow(this.r, ToLinearSpace);\r\n        convertedColor.g = Math.pow(this.g, ToLinearSpace);\r\n        convertedColor.b = Math.pow(this.b, ToLinearSpace);\r\n        convertedColor.a = this.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color4 converted from the current one to gamma space\r\n     * @returns a new Color4 object\r\n     */\r\n    public toGammaSpace(): Color4 {\r\n        var convertedColor = new Color4();\r\n        this.toGammaSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color4 object where to store the gamma space version\r\n     * @returns the unmodified Color4\r\n     */\r\n    public toGammaSpaceToRef(convertedColor: Color4): Color4 {\r\n        convertedColor.r = Math.pow(this.r, ToGammaSpace);\r\n        convertedColor.g = Math.pow(this.g, ToGammaSpace);\r\n        convertedColor.b = Math.pow(this.b, ToGammaSpace);\r\n        convertedColor.a = this.a;\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new Color4 from the string containing valid hexadecimal values\r\n     * @param hex defines a string containing valid hexadecimal values\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromHexString(hex: string): Color4 {\r\n        if (hex.substring(0, 1) !== \"#\" || hex.length !== 9) {\r\n            return new Color4(0.0, 0.0, 0.0, 0.0);\r\n        }\r\n\r\n        var r = parseInt(hex.substring(1, 3), 16);\r\n        var g = parseInt(hex.substring(3, 5), 16);\r\n        var b = parseInt(hex.substring(5, 7), 16);\r\n        var a = parseInt(hex.substring(7, 9), 16);\r\n\r\n        return Color4.FromInts(r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @returns a new Color4 object\r\n     */\r\n    public static Lerp(left: DeepImmutable<Color4>, right: DeepImmutable<Color4>, amount: number): Color4 {\r\n        var result = new Color4(0.0, 0.0, 0.0, 0.0);\r\n        Color4.LerpToRef(left, right, amount, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @param result defines the Color4 object where to store data\r\n     */\r\n    public static LerpToRef(left: DeepImmutable<Color4>, right: DeepImmutable<Color4>, amount: number, result: Color4): void {\r\n        result.r = left.r + (right.r - left.r) * amount;\r\n        result.g = left.g + (right.g - left.g) * amount;\r\n        result.b = left.b + (right.b - left.b) * amount;\r\n        result.a = left.a + (right.a - left.a) * amount;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 from a Color3 and an alpha value\r\n     * @param color3 defines the source Color3 to read from\r\n     * @param alpha defines the alpha component (1.0 by default)\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromColor3(color3: DeepImmutable<Color3>, alpha: number = 1.0): Color4 {\r\n        return new Color4(color3.r, color3.g, color3.b, alpha);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 from the starting index element of the given array\r\n     * @param array defines the source array to read from\r\n     * @param offset defines the offset in the source array\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color4 {\r\n        return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from integer values (< 256)\r\n     * @param r defines the red component to read from (value between 0 and 255)\r\n     * @param g defines the green component to read from (value between 0 and 255)\r\n     * @param b defines the blue component to read from (value between 0 and 255)\r\n     * @param a defines the alpha component to read from (value between 0 and 255)\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromInts(r: number, g: number, b: number, a: number): Color4 {\r\n        return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\r\n    }\r\n\r\n    /**\r\n     * Check the content of a given array and convert it to an array containing RGBA data\r\n     * If the original array was already containing count * 4 values then it is returned directly\r\n     * @param colors defines the array to check\r\n     * @param count defines the number of RGBA data to expect\r\n     * @returns an array containing count * 4 values (RGBA)\r\n     */\r\n    public static CheckColors4(colors: number[], count: number): number[] {\r\n        // Check if color3 was used\r\n        if (colors.length === count * 3) {\r\n            var colors4 = [];\r\n            for (var index = 0; index < colors.length; index += 3) {\r\n                var newIndex = (index / 3) * 4;\r\n                colors4[newIndex] = colors[index];\r\n                colors4[newIndex + 1] = colors[index + 1];\r\n                colors4[newIndex + 2] = colors[index + 2];\r\n                colors4[newIndex + 3] = 1.0;\r\n            }\r\n\r\n            return colors4;\r\n        }\r\n\r\n        return colors;\r\n    }\r\n}\r\n\r\n/**\r\n * Class representing a vector containing 2 coordinates\r\n */\r\nexport class Vector2 {\r\n    /**\r\n     * Creates a new Vector2 from the given x and y coordinates\r\n     * @param x defines the first coordinate\r\n     * @param y defines the second coordinate\r\n     */\r\n    constructor(\r\n        /** defines the first coordinate */\r\n        public x: number = 0,\r\n        /** defines the second coordinate */\r\n        public y: number = 0) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string with the Vector2 coordinates\r\n     * @returns a string with the Vector2 coordinates\r\n     */\r\n    public toString(): string {\r\n        return \"{X: \" + this.x + \" Y:\" + this.y + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Gets class name\r\n     * @returns the string \"Vector2\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Vector2\";\r\n    }\r\n\r\n    /**\r\n     * Gets current vector hash code\r\n     * @returns the Vector2 hash code as a number\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.x || 0;\r\n        hash = (hash * 397) ^ (this.y || 0);\r\n        return hash;\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Sets the Vector2 coordinates in the given array or Float32Array from the given index.\r\n     * @param array defines the source array\r\n     * @param index defines the offset in source array\r\n     * @returns the current Vector2\r\n     */\r\n    public toArray(array: FloatArray, index: number = 0): Vector2 {\r\n        array[index] = this.x;\r\n        array[index + 1] = this.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copy the current vector to an array\r\n     * @returns a new array with 2 elements: the Vector2 coordinates.\r\n     */\r\n    public asArray(): number[] {\r\n        var result = new Array<number>();\r\n        this.toArray(result, 0);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vector2 coordinates with the given Vector2 coordinates\r\n     * @param source defines the source Vector2\r\n     * @returns the current updated Vector2\r\n     */\r\n    public copyFrom(source: DeepImmutable<Vector2>): Vector2 {\r\n        this.x = source.x;\r\n        this.y = source.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vector2 coordinates with the given floats\r\n     * @param x defines the first coordinate\r\n     * @param y defines the second coordinate\r\n     * @returns the current updated Vector2\r\n     */\r\n    public copyFromFloats(x: number, y: number): Vector2 {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vector2 coordinates with the given floats\r\n     * @param x defines the first coordinate\r\n     * @param y defines the second coordinate\r\n     * @returns the current updated Vector2\r\n     */\r\n    public set(x: number, y: number): Vector2 {\r\n        return this.copyFromFloats(x, y);\r\n    }\r\n    /**\r\n     * Add another vector with the current one\r\n     * @param otherVector defines the other vector\r\n     * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\r\n     */\r\n    public add(otherVector: DeepImmutable<Vector2>): Vector2 {\r\n        return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\r\n    }\r\n\r\n    /**\r\n     * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\r\n     * @param otherVector defines the other vector\r\n     * @param result defines the target vector\r\n     * @returns the unmodified current Vector2\r\n     */\r\n    public addToRef(otherVector: DeepImmutable<Vector2>, result: Vector2): Vector2 {\r\n        result.x = this.x + otherVector.x;\r\n        result.y = this.y + otherVector.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the Vector2 coordinates by adding the given Vector2 coordinates\r\n     * @param otherVector defines the other vector\r\n     * @returns the current updated Vector2\r\n     */\r\n    public addInPlace(otherVector: DeepImmutable<Vector2>): Vector2 {\r\n        this.x += otherVector.x;\r\n        this.y += otherVector.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\r\n     * @param otherVector defines the other vector\r\n     * @returns a new Vector2\r\n     */\r\n    public addVector3(otherVector: Vector3): Vector2 {\r\n        return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\r\n     * @param otherVector defines the other vector\r\n     * @returns a new Vector2\r\n     */\r\n    public subtract(otherVector: Vector2): Vector2 {\r\n        return new Vector2(this.x - otherVector.x, this.y - otherVector.y);\r\n    }\r\n\r\n    /**\r\n     * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\r\n     * @param otherVector defines the other vector\r\n     * @param result defines the target vector\r\n     * @returns the unmodified current Vector2\r\n     */\r\n    public subtractToRef(otherVector: DeepImmutable<Vector2>, result: Vector2): Vector2 {\r\n        result.x = this.x - otherVector.x;\r\n        result.y = this.y - otherVector.y;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\r\n     * @param otherVector defines the other vector\r\n     * @returns the current updated Vector2\r\n     */\r\n    public subtractInPlace(otherVector: DeepImmutable<Vector2>): Vector2 {\r\n        this.x -= otherVector.x;\r\n        this.y -= otherVector.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies in place the current Vector2 coordinates by the given ones\r\n     * @param otherVector defines the other vector\r\n     * @returns the current updated Vector2\r\n     */\r\n    public multiplyInPlace(otherVector: DeepImmutable<Vector2>): Vector2 {\r\n        this.x *= otherVector.x;\r\n        this.y *= otherVector.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\r\n     * @param otherVector defines the other vector\r\n     * @returns a new Vector2\r\n     */\r\n    public multiply(otherVector: DeepImmutable<Vector2>): Vector2 {\r\n        return new Vector2(this.x * otherVector.x, this.y * otherVector.y);\r\n    }\r\n\r\n    /**\r\n     * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\r\n     * @param otherVector defines the other vector\r\n     * @param result defines the target vector\r\n     * @returns the unmodified current Vector2\r\n     */\r\n    public multiplyToRef(otherVector: DeepImmutable<Vector2>, result: Vector2): Vector2 {\r\n        result.x = this.x * otherVector.x;\r\n        result.y = this.y * otherVector.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\r\n     * @param x defines the first coordinate\r\n     * @param y defines the second coordinate\r\n     * @returns a new Vector2\r\n     */\r\n    public multiplyByFloats(x: number, y: number): Vector2 {\r\n        return new Vector2(this.x * x, this.y * y);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\r\n     * @param otherVector defines the other vector\r\n     * @returns a new Vector2\r\n     */\r\n    public divide(otherVector: Vector2): Vector2 {\r\n        return new Vector2(this.x / otherVector.x, this.y / otherVector.y);\r\n    }\r\n\r\n    /**\r\n     * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\r\n     * @param otherVector defines the other vector\r\n     * @param result defines the target vector\r\n     * @returns the unmodified current Vector2\r\n     */\r\n    public divideToRef(otherVector: DeepImmutable<Vector2>, result: Vector2): Vector2 {\r\n        result.x = this.x / otherVector.x;\r\n        result.y = this.y / otherVector.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Vector2 coordinates by the given ones\r\n     * @param otherVector defines the other vector\r\n     * @returns the current updated Vector2\r\n     */\r\n    public divideInPlace(otherVector: DeepImmutable<Vector2>): Vector2 {\r\n        return this.divideToRef(otherVector, this);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 with current Vector2 negated coordinates\r\n     * @returns a new Vector2\r\n     */\r\n    public negate(): Vector2 {\r\n        return new Vector2(-this.x, -this.y);\r\n    }\r\n\r\n    /**\r\n     * Multiply the Vector2 coordinates by scale\r\n     * @param scale defines the scaling factor\r\n     * @returns the current updated Vector2\r\n     */\r\n    public scaleInPlace(scale: number): Vector2 {\r\n        this.x *= scale;\r\n        this.y *= scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector2 scaled by \"scale\" from the current Vector2\r\n     * @param scale defines the scaling factor\r\n     * @returns a new Vector2\r\n     */\r\n    public scale(scale: number): Vector2 {\r\n        let result = new Vector2(0, 0);\r\n        this.scaleToRef(scale, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Scale the current Vector2 values by a factor to a given Vector2\r\n     * @param scale defines the scale factor\r\n     * @param result defines the Vector2 object where to store the result\r\n     * @returns the unmodified current Vector2\r\n     */\r\n    public scaleToRef(scale: number, result: Vector2): Vector2 {\r\n        result.x = this.x * scale;\r\n        result.y = this.y * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current Vector2 values by a factor and add the result to a given Vector2\r\n     * @param scale defines the scale factor\r\n     * @param result defines the Vector2 object where to store the result\r\n     * @returns the unmodified current Vector2\r\n     */\r\n    public scaleAndAddToRef(scale: number, result: Vector2): Vector2 {\r\n        result.x += this.x * scale;\r\n        result.y += this.y * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean if two vectors are equals\r\n     * @param otherVector defines the other vector\r\n     * @returns true if the given vector coordinates strictly equal the current Vector2 ones\r\n     */\r\n    public equals(otherVector: DeepImmutable<Vector2>): boolean {\r\n        return otherVector && this.x === otherVector.x && this.y === otherVector.y;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean if two vectors are equals (using an epsilon value)\r\n     * @param otherVector defines the other vector\r\n     * @param epsilon defines the minimal distance to consider equality\r\n     * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\r\n     */\r\n    public equalsWithEpsilon(otherVector: DeepImmutable<Vector2>, epsilon: number = Epsilon): boolean {\r\n        return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 from current Vector2 floored values\r\n     * @returns a new Vector2\r\n     */\r\n    public floor(): Vector2 {\r\n        return new Vector2(Math.floor(this.x), Math.floor(this.y));\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 from current Vector2 floored values\r\n     * @returns a new Vector2\r\n     */\r\n    public fract(): Vector2 {\r\n        return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\r\n    }\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the length of the vector\r\n     * @returns the vector length (float)\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    /**\r\n     * Gets the vector squared length\r\n     * @returns the vector squared length (float)\r\n     */\r\n    public lengthSquared(): number {\r\n        return (this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Normalize the vector\r\n     * @returns the current updated Vector2\r\n     */\r\n    public normalize(): Vector2 {\r\n        var len = this.length();\r\n\r\n        if (len === 0) {\r\n            return this;\r\n        }\r\n\r\n        var num = 1.0 / len;\r\n\r\n        this.x *= num;\r\n        this.y *= num;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 copied from the Vector2\r\n     * @returns a new Vector2\r\n     */\r\n    public clone(): Vector2 {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Gets a new Vector2(0, 0)\r\n     * @returns a new Vector2\r\n     */\r\n    public static Zero(): Vector2 {\r\n        return new Vector2(0, 0);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2(1, 1)\r\n     * @returns a new Vector2\r\n     */\r\n    public static One(): Vector2 {\r\n        return new Vector2(1, 1);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 set from the given index element of the given array\r\n     * @param array defines the data source\r\n     * @param offset defines the offset in the data source\r\n     * @returns a new Vector2\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Vector2 {\r\n        return new Vector2(array[offset], array[offset + 1]);\r\n    }\r\n\r\n    /**\r\n     * Sets \"result\" from the given index element of the given array\r\n     * @param array defines the data source\r\n     * @param offset defines the offset in the data source\r\n     * @param result defines the target vector\r\n     */\r\n    public static FromArrayToRef(array: DeepImmutable<ArrayLike<number>>, offset: number, result: Vector2): void {\r\n        result.x = array[offset];\r\n        result.y = array[offset + 1];\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\r\n     * @param value1 defines 1st point of control\r\n     * @param value2 defines 2nd point of control\r\n     * @param value3 defines 3rd point of control\r\n     * @param value4 defines 4th point of control\r\n     * @param amount defines the interpolation factor\r\n     * @returns a new Vector2\r\n     */\r\n    public static CatmullRom(value1: DeepImmutable<Vector2>, value2: DeepImmutable<Vector2>, value3: DeepImmutable<Vector2>, value4: DeepImmutable<Vector2>, amount: number): Vector2 {\r\n        var squared = amount * amount;\r\n        var cubed = amount * squared;\r\n\r\n        var x = 0.5 * ((((2.0 * value2.x) + ((-value1.x + value3.x) * amount)) +\r\n            (((((2.0 * value1.x) - (5.0 * value2.x)) + (4.0 * value3.x)) - value4.x) * squared)) +\r\n            ((((-value1.x + (3.0 * value2.x)) - (3.0 * value3.x)) + value4.x) * cubed));\r\n\r\n        var y = 0.5 * ((((2.0 * value2.y) + ((-value1.y + value3.y) * amount)) +\r\n            (((((2.0 * value1.y) - (5.0 * value2.y)) + (4.0 * value3.y)) - value4.y) * squared)) +\r\n            ((((-value1.y + (3.0 * value2.y)) - (3.0 * value3.y)) + value4.y) * cubed));\r\n\r\n        return new Vector2(x, y);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\".\r\n     * If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate.\r\n     * If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\r\n     * @param value defines the value to clamp\r\n     * @param min defines the lower limit\r\n     * @param max defines the upper limit\r\n     * @returns a new Vector2\r\n     */\r\n    public static Clamp(value: DeepImmutable<Vector2>, min: DeepImmutable<Vector2>, max: DeepImmutable<Vector2>): Vector2 {\r\n        var x = value.x;\r\n        x = (x > max.x) ? max.x : x;\r\n        x = (x < min.x) ? min.x : x;\r\n\r\n        var y = value.y;\r\n        y = (y > max.y) ? max.y : y;\r\n        y = (y < min.y) ? min.y : y;\r\n\r\n        return new Vector2(x, y);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\"\r\n     * @param value1 defines the 1st control point\r\n     * @param tangent1 defines the outgoing tangent\r\n     * @param value2 defines the 2nd control point\r\n     * @param tangent2 defines the incoming tangent\r\n     * @param amount defines the interpolation factor\r\n     * @returns a new Vector2\r\n     */\r\n    public static Hermite(value1: DeepImmutable<Vector2>, tangent1: DeepImmutable<Vector2>, value2: DeepImmutable<Vector2>, tangent2: DeepImmutable<Vector2>, amount: number): Vector2 {\r\n        var squared = amount * amount;\r\n        var cubed = amount * squared;\r\n        var part1 = ((2.0 * cubed) - (3.0 * squared)) + 1.0;\r\n        var part2 = (-2.0 * cubed) + (3.0 * squared);\r\n        var part3 = (cubed - (2.0 * squared)) + amount;\r\n        var part4 = cubed - squared;\r\n\r\n        var x = (((value1.x * part1) + (value2.x * part2)) + (tangent1.x * part3)) + (tangent2.x * part4);\r\n        var y = (((value1.y * part1) + (value2.y * part2)) + (tangent1.y * part3)) + (tangent2.y * part4);\r\n\r\n        return new Vector2(x, y);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\r\n     * @param start defines the start vector\r\n     * @param end defines the end vector\r\n     * @param amount defines the interpolation factor\r\n     * @returns a new Vector2\r\n     */\r\n    public static Lerp(start: DeepImmutable<Vector2>, end: DeepImmutable<Vector2>, amount: number): Vector2 {\r\n        var x = start.x + ((end.x - start.x) * amount);\r\n        var y = start.y + ((end.y - start.y) * amount);\r\n        return new Vector2(x, y);\r\n    }\r\n\r\n    /**\r\n     * Gets the dot product of the vector \"left\" and the vector \"right\"\r\n     * @param left defines first vector\r\n     * @param right defines second vector\r\n     * @returns the dot product (float)\r\n     */\r\n    public static Dot(left: DeepImmutable<Vector2>, right: DeepImmutable<Vector2>): number {\r\n        return left.x * right.x + left.y * right.y;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector2 equal to the normalized given vector\r\n     * @param vector defines the vector to normalize\r\n     * @returns a new Vector2\r\n     */\r\n    public static Normalize(vector: DeepImmutable<Vector2>): Vector2 {\r\n        var newVector = vector.clone();\r\n        newVector.normalize();\r\n        return newVector;\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\r\n     * @param left defines 1st vector\r\n     * @param right defines 2nd vector\r\n     * @returns a new Vector2\r\n     */\r\n    public static Minimize(left: DeepImmutable<Vector2>, right: DeepImmutable<Vector2>): Vector2 {\r\n        var x = (left.x < right.x) ? left.x : right.x;\r\n        var y = (left.y < right.y) ? left.y : right.y;\r\n        return new Vector2(x, y);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\r\n     * @param left defines 1st vector\r\n     * @param right defines 2nd vector\r\n     * @returns a new Vector2\r\n     */\r\n    public static Maximize(left: DeepImmutable<Vector2>, right: DeepImmutable<Vector2>): Vector2 {\r\n        var x = (left.x > right.x) ? left.x : right.x;\r\n        var y = (left.y > right.y) ? left.y : right.y;\r\n        return new Vector2(x, y);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\r\n     * @param vector defines the vector to transform\r\n     * @param transformation defines the matrix to apply\r\n     * @returns a new Vector2\r\n     */\r\n    public static Transform(vector: DeepImmutable<Vector2>, transformation: DeepImmutable<Matrix>): Vector2 {\r\n        let r = Vector2.Zero();\r\n        Vector2.TransformToRef(vector, transformation, r);\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\r\n     * @param vector defines the vector to transform\r\n     * @param transformation defines the matrix to apply\r\n     * @param result defines the target vector\r\n     */\r\n    public static TransformToRef(vector: DeepImmutable<Vector2>, transformation: DeepImmutable<Matrix>, result: Vector2) {\r\n        const m = transformation.m;\r\n        var x = (vector.x * m[0]) + (vector.y * m[4]) + m[12];\r\n        var y = (vector.x * m[1]) + (vector.y * m[5]) + m[13];\r\n        result.x = x;\r\n        result.y = y;\r\n    }\r\n\r\n    /**\r\n     * Determines if a given vector is included in a triangle\r\n     * @param p defines the vector to test\r\n     * @param p0 defines 1st triangle point\r\n     * @param p1 defines 2nd triangle point\r\n     * @param p2 defines 3rd triangle point\r\n     * @returns true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\"\r\n     */\r\n    public static PointInTriangle(p: DeepImmutable<Vector2>, p0: DeepImmutable<Vector2>, p1: DeepImmutable<Vector2>, p2: DeepImmutable<Vector2>) {\r\n        let a = 1 / 2 * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);\r\n        let sign = a < 0 ? -1 : 1;\r\n        let s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;\r\n        let t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;\r\n\r\n        return s > 0 && t > 0 && (s + t) < 2 * a * sign;\r\n    }\r\n\r\n    /**\r\n     * Gets the distance between the vectors \"value1\" and \"value2\"\r\n     * @param value1 defines first vector\r\n     * @param value2 defines second vector\r\n     * @returns the distance between vectors\r\n     */\r\n    public static Distance(value1: DeepImmutable<Vector2>, value2: DeepImmutable<Vector2>): number {\r\n        return Math.sqrt(Vector2.DistanceSquared(value1, value2));\r\n    }\r\n\r\n    /**\r\n     * Returns the squared distance between the vectors \"value1\" and \"value2\"\r\n     * @param value1 defines first vector\r\n     * @param value2 defines second vector\r\n     * @returns the squared distance between vectors\r\n     */\r\n    public static DistanceSquared(value1: DeepImmutable<Vector2>, value2: DeepImmutable<Vector2>): number {\r\n        var x = value1.x - value2.x;\r\n        var y = value1.y - value2.y;\r\n        return (x * x) + (y * y);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\r\n     * @param value1 defines first vector\r\n     * @param value2 defines second vector\r\n     * @returns a new Vector2\r\n     */\r\n    public static Center(value1: DeepImmutable<Vector2>, value2: DeepImmutable<Vector2>): Vector2 {\r\n        var center = value1.add(value2);\r\n        center.scaleInPlace(0.5);\r\n        return center;\r\n    }\r\n\r\n    /**\r\n     * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\r\n     * @param p defines the middle point\r\n     * @param segA defines one point of the segment\r\n     * @param segB defines the other point of the segment\r\n     * @returns the shortest distance\r\n     */\r\n    public static DistanceOfPointFromSegment(p: DeepImmutable<Vector2>, segA: DeepImmutable<Vector2>, segB: DeepImmutable<Vector2>): number {\r\n        let l2 = Vector2.DistanceSquared(segA, segB);\r\n        if (l2 === 0.0) {\r\n            return Vector2.Distance(p, segA);\r\n        }\r\n        let v = segB.subtract(segA);\r\n        let t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\r\n        let proj = segA.add(v.multiplyByFloats(t, t));\r\n        return Vector2.Distance(p, proj);\r\n    }\r\n}\r\n\r\n/**\r\n * Classed used to store (x,y,z) vector representation\r\n * A Vector3 is the main object used in 3D geometry\r\n * It can represent etiher the coordinates of a point the space, either a direction\r\n * Reminder: js uses a left handed forward facing system\r\n */\r\nexport class Vector3 {\r\n    private static _UpReadOnly = Vector3.Up() as DeepImmutable<Vector3>;\r\n\r\n    /**\r\n     * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\r\n     * @param x defines the first coordinates (on X axis)\r\n     * @param y defines the second coordinates (on Y axis)\r\n     * @param z defines the third coordinates (on Z axis)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the first coordinates (on X axis)\r\n         */\r\n        public x: number = 0,\r\n        /**\r\n         * Defines the second coordinates (on Y axis)\r\n         */\r\n        public y: number = 0,\r\n        /**\r\n         * Defines the third coordinates (on Z axis)\r\n         */\r\n        public z: number = 0\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * Creates a string representation of the Vector3\r\n     * @returns a string with the Vector3 coordinates.\r\n     */\r\n    public toString(): string {\r\n        return \"{X: \" + this.x + \" Y:\" + this.y + \" Z:\" + this.z + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"Vector3\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Vector3\";\r\n    }\r\n\r\n    /**\r\n     * Creates the Vector3 hash code\r\n     * @returns a number which tends to be unique between Vector3 instances\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.x || 0;\r\n        hash = (hash * 397) ^ (this.y || 0);\r\n        hash = (hash * 397) ^ (this.z || 0);\r\n        return hash;\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Creates an array containing three elements : the coordinates of the Vector3\r\n     * @returns a new array of numbers\r\n     */\r\n    public asArray(): number[] {\r\n        var result: number[] = [];\r\n        this.toArray(result, 0);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Populates the given array or Float32Array from the given index with the successive coordinates of the Vector3\r\n     * @param array defines the destination array\r\n     * @param index defines the offset in the destination array\r\n     * @returns the current Vector3\r\n     */\r\n    public toArray(array: FloatArray, index: number = 0): Vector3 {\r\n        array[index] = this.x;\r\n        array[index + 1] = this.y;\r\n        array[index + 2] = this.z;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\r\n     * @returns a new Quaternion object, computed from the Vector3 coordinates\r\n     */\r\n    public toQuaternion(): Quaternion {\r\n        return Quaternion.RotationYawPitchRoll(this.y, this.x, this.z);\r\n    }\r\n\r\n    /**\r\n     * Adds the given vector to the current Vector3\r\n     * @param otherVector defines the second operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public addInPlace(otherVector: DeepImmutable<Vector3>): Vector3 {\r\n        return this.addInPlaceFromFloats(otherVector.x, otherVector.y, otherVector.z);\r\n    }\r\n\r\n    /**\r\n     * Adds the given coordinates to the current Vector3\r\n     * @param x defines the x coordinate of the operand\r\n     * @param y defines the y coordinate of the operand\r\n     * @param z defines the z coordinate of the operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public addInPlaceFromFloats(x: number, y: number, z: number): Vector3 {\r\n        this.x += x;\r\n        this.y += y;\r\n        this.z += z;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector3, result of the addition the current Vector3 and the given vector\r\n     * @param otherVector defines the second operand\r\n     * @returns the resulting Vector3\r\n     */\r\n    public add(otherVector: DeepImmutable<Vector3>): Vector3 {\r\n        return new Vector3(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\r\n    }\r\n\r\n    /**\r\n     * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\r\n     * @param otherVector defines the second operand\r\n     * @param result defines the Vector3 object where to store the result\r\n     * @returns the current Vector3\r\n     */\r\n    public addToRef(otherVector: DeepImmutable<Vector3>, result: Vector3): Vector3 {\r\n        return result.copyFromFloats(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\r\n    }\r\n\r\n    /**\r\n     * Subtract the given vector from the current Vector3\r\n     * @param otherVector defines the second operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public subtractInPlace(otherVector: DeepImmutable<Vector3>): Vector3 {\r\n        this.x -= otherVector.x;\r\n        this.y -= otherVector.y;\r\n        this.z -= otherVector.z;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\r\n     * @param otherVector defines the second operand\r\n     * @returns the resulting Vector3\r\n     */\r\n    public subtract(otherVector: DeepImmutable<Vector3>): Vector3 {\r\n        return new Vector3(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z);\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\r\n     * @param otherVector defines the second operand\r\n     * @param result defines the Vector3 object where to store the result\r\n     * @returns the current Vector3\r\n     */\r\n    public subtractToRef(otherVector: DeepImmutable<Vector3>, result: Vector3): Vector3 {\r\n        return this.subtractFromFloatsToRef(otherVector.x, otherVector.y, otherVector.z, result);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\r\n     * @param x defines the x coordinate of the operand\r\n     * @param y defines the y coordinate of the operand\r\n     * @param z defines the z coordinate of the operand\r\n     * @returns the resulting Vector3\r\n     */\r\n    public subtractFromFloats(x: number, y: number, z: number): Vector3 {\r\n        return new Vector3(this.x - x, this.y - y, this.z - z);\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\r\n     * @param x defines the x coordinate of the operand\r\n     * @param y defines the y coordinate of the operand\r\n     * @param z defines the z coordinate of the operand\r\n     * @param result defines the Vector3 object where to store the result\r\n     * @returns the current Vector3\r\n     */\r\n    public subtractFromFloatsToRef(x: number, y: number, z: number, result: Vector3): Vector3 {\r\n        return result.copyFromFloats(this.x - x, this.y - y, this.z - z);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector3 set with the current Vector3 negated coordinates\r\n     * @returns a new Vector3\r\n     */\r\n    public negate(): Vector3 {\r\n        return new Vector3(-this.x, -this.y, -this.z);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the Vector3 coordinates by the float \"scale\"\r\n     * @param scale defines the multiplier factor\r\n     * @returns the current updated Vector3\r\n     */\r\n    public scaleInPlace(scale: number): Vector3 {\r\n        this.x *= scale;\r\n        this.y *= scale;\r\n        this.z *= scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\r\n     * @param scale defines the multiplier factor\r\n     * @returns a new Vector3\r\n     */\r\n    public scale(scale: number): Vector3 {\r\n        return new Vector3(this.x * scale, this.y * scale, this.z * scale);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\r\n     * @param scale defines the multiplier factor\r\n     * @param result defines the Vector3 object where to store the result\r\n     * @returns the current Vector3\r\n     */\r\n    public scaleToRef(scale: number, result: Vector3): Vector3 {\r\n        return result.copyFromFloats(this.x * scale, this.y * scale, this.z * scale);\r\n    }\r\n\r\n    /**\r\n     * Scale the current Vector3 values by a factor and add the result to a given Vector3\r\n     * @param scale defines the scale factor\r\n     * @param result defines the Vector3 object where to store the result\r\n     * @returns the unmodified current Vector3\r\n     */\r\n    public scaleAndAddToRef(scale: number, result: Vector3): Vector3 {\r\n        return result.addInPlaceFromFloats(this.x * scale, this.y * scale, this.z * scale);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the current Vector3 and the given vector coordinates are strictly equal\r\n     * @param otherVector defines the second operand\r\n     * @returns true if both vectors are equals\r\n     */\r\n    public equals(otherVector: DeepImmutable<Vector3>): boolean {\r\n        return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\r\n     * @param otherVector defines the second operand\r\n     * @param epsilon defines the minimal distance to define values as equals\r\n     * @returns true if both vectors are distant less than epsilon\r\n     */\r\n    public equalsWithEpsilon(otherVector: DeepImmutable<Vector3>, epsilon: number = Epsilon): boolean {\r\n        return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) && Scalar.WithinEpsilon(this.z, otherVector.z, epsilon);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the current Vector3 coordinates equals the given floats\r\n     * @param x defines the x coordinate of the operand\r\n     * @param y defines the y coordinate of the operand\r\n     * @param z defines the z coordinate of the operand\r\n     * @returns true if both vectors are equals\r\n     */\r\n    public equalsToFloats(x: number, y: number, z: number): boolean {\r\n        return this.x === x && this.y === y && this.z === z;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current Vector3 coordinates by the given ones\r\n     * @param otherVector defines the second operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public multiplyInPlace(otherVector: DeepImmutable<Vector3>): Vector3 {\r\n        this.x *= otherVector.x;\r\n        this.y *= otherVector.y;\r\n        this.z *= otherVector.z;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\r\n     * @param otherVector defines the second operand\r\n     * @returns the new Vector3\r\n     */\r\n    public multiply(otherVector: DeepImmutable<Vector3>): Vector3 {\r\n        return this.multiplyByFloats(otherVector.x, otherVector.y, otherVector.z);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\r\n     * @param otherVector defines the second operand\r\n     * @param result defines the Vector3 object where to store the result\r\n     * @returns the current Vector3\r\n     */\r\n    public multiplyToRef(otherVector: DeepImmutable<Vector3>, result: Vector3): Vector3 {\r\n        return result.copyFromFloats(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\r\n     * @param x defines the x coordinate of the operand\r\n     * @param y defines the y coordinate of the operand\r\n     * @param z defines the z coordinate of the operand\r\n     * @returns the new Vector3\r\n     */\r\n    public multiplyByFloats(x: number, y: number, z: number): Vector3 {\r\n        return new Vector3(this.x * x, this.y * y, this.z * z);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\r\n     * @param otherVector defines the second operand\r\n     * @returns the new Vector3\r\n     */\r\n    public divide(otherVector: DeepImmutable<Vector3>): Vector3 {\r\n        return new Vector3(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\r\n    }\r\n\r\n    /**\r\n     * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\r\n     * @param otherVector defines the second operand\r\n     * @param result defines the Vector3 object where to store the result\r\n     * @returns the current Vector3\r\n     */\r\n    public divideToRef(otherVector: DeepImmutable<Vector3>, result: Vector3): Vector3 {\r\n        return result.copyFromFloats(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\r\n    }\r\n\r\n    /**\r\n     * Divides the current Vector3 coordinates by the given ones.\r\n     * @param otherVector defines the second operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public divideInPlace(otherVector: Vector3): Vector3 {\r\n        return this.divideToRef(otherVector, this);\r\n    }\r\n\r\n    /**\r\n     * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\r\n     * @param other defines the second operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public minimizeInPlace(other: DeepImmutable<Vector3>): Vector3 {\r\n        return this.minimizeInPlaceFromFloats(other.x, other.y, other.z);\r\n    }\r\n\r\n    /**\r\n     * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\r\n     * @param other defines the second operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public maximizeInPlace(other: DeepImmutable<Vector3>): Vector3 {\r\n        return this.maximizeInPlaceFromFloats(other.x, other.y, other.z);\r\n    }\r\n\r\n    /**\r\n     * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\r\n     * @param x defines the x coordinate of the operand\r\n     * @param y defines the y coordinate of the operand\r\n     * @param z defines the z coordinate of the operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public minimizeInPlaceFromFloats(x: number, y: number, z: number): Vector3 {\r\n        if (x < this.x) { this.x = x; }\r\n        if (y < this.y) { this.y = y; }\r\n        if (z < this.z) { this.z = z; }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\r\n     * @param x defines the x coordinate of the operand\r\n     * @param y defines the y coordinate of the operand\r\n     * @param z defines the z coordinate of the operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public maximizeInPlaceFromFloats(x: number, y: number, z: number): Vector3 {\r\n        if (x > this.x) { this.x = x; }\r\n        if (y > this.y) { this.y = y; }\r\n        if (z > this.z) { this.z = z; }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Due to float precision, scale of a mesh could be uniform but float values are off by a small fraction\r\n     * Check if is non uniform within a certain amount of decimal places to account for this\r\n     * @param epsilon the amount the values can differ\r\n     * @returns if the the vector is non uniform to a certain number of decimal places\r\n     */\r\n    public isNonUniformWithinEpsilon(epsilon: number) {\r\n        let absX = Math.abs(this.x);\r\n        let absY = Math.abs(this.y);\r\n        if (!Scalar.WithinEpsilon(absX, absY, epsilon)) {\r\n            return true;\r\n        }\r\n\r\n        let absZ = Math.abs(this.z);\r\n        if (!Scalar.WithinEpsilon(absX, absZ, epsilon)) {\r\n            return true;\r\n        }\r\n\r\n        if (!Scalar.WithinEpsilon(absY, absZ, epsilon)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\r\n     */\r\n    public get isNonUniform(): boolean {\r\n        let absX = Math.abs(this.x);\r\n        let absY = Math.abs(this.y);\r\n        if (absX !== absY) {\r\n            return true;\r\n        }\r\n\r\n        let absZ = Math.abs(this.z);\r\n        if (absX !== absZ) {\r\n            return true;\r\n        }\r\n\r\n        if (absY !== absZ) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector3 from current Vector3 floored values\r\n     * @returns a new Vector3\r\n     */\r\n    public floor(): Vector3 {\r\n        return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector3 from current Vector3 floored values\r\n     * @returns a new Vector3\r\n     */\r\n    public fract(): Vector3 {\r\n        return new Vector3(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z));\r\n    }\r\n\r\n    // Properties\r\n    /**\r\n     * Gets the length of the Vector3\r\n     * @returns the length of the Vecto3\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    }\r\n\r\n    /**\r\n     * Gets the squared length of the Vector3\r\n     * @returns squared length of the Vector3\r\n     */\r\n    public lengthSquared(): number {\r\n        return (this.x * this.x + this.y * this.y + this.z * this.z);\r\n    }\r\n\r\n    /**\r\n     * Normalize the current Vector3.\r\n     * Please note that this is an in place operation.\r\n     * @returns the current updated Vector3\r\n     */\r\n    public normalize(): Vector3 {\r\n        return this.normalizeFromLength(this.length());\r\n    }\r\n\r\n    /**\r\n     * Reorders the x y z properties of the vector in place\r\n     * @param order new ordering of the properties (eg. for vector 1,2,3 with \"ZYX\" will produce 3,2,1)\r\n     * @returns the current updated vector\r\n     */\r\n    public reorderInPlace(order: string) {\r\n        order = order.toLowerCase();\r\n        if (order === \"xyz\") {\r\n            return this;\r\n        }\r\n        MathTmp.Vector3[0].copyFrom(this);\r\n        [\"x\", \"y\", \"z\"].forEach((val, i) => {\r\n            (<any>this)[val] = (<any>MathTmp.Vector3[0])[order[i]];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates the vector around 0,0,0 by a quaternion\r\n     * @param quaternion the rotation quaternion\r\n     * @param result vector to store the result\r\n     * @returns the resulting vector\r\n     */\r\n    public rotateByQuaternionToRef(quaternion: Quaternion, result: Vector3) {\r\n        quaternion.toRotationMatrix(MathTmp.Matrix[0]);\r\n        Vector3.TransformCoordinatesToRef(this, MathTmp.Matrix[0], result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Rotates a vector around a given point\r\n     * @param quaternion the rotation quaternion\r\n     * @param point the point to rotate around\r\n     * @param result vector to store the result\r\n     * @returns the resulting vector\r\n     */\r\n    public rotateByQuaternionAroundPointToRef(quaternion: Quaternion, point: Vector3, result: Vector3) {\r\n        this.subtractToRef(point, MathTmp.Vector3[0]);\r\n        MathTmp.Vector3[0].rotateByQuaternionToRef(quaternion, MathTmp.Vector3[0]);\r\n        point.addToRef(MathTmp.Vector3[0], result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Normalize the current Vector3 with the given input length.\r\n     * Please note that this is an in place operation.\r\n     * @param len the length of the vector\r\n     * @returns the current updated Vector3\r\n     */\r\n    public normalizeFromLength(len: number): Vector3 {\r\n        if (len === 0 || len === 1.0) {\r\n            return this;\r\n        }\r\n\r\n        return this.scaleInPlace(1.0 / len);\r\n    }\r\n\r\n    /**\r\n     * Normalize the current Vector3 to a new vector\r\n     * @returns the new Vector3\r\n     */\r\n    public normalizeToNew(): Vector3 {\r\n        const normalized = new Vector3(0, 0, 0);\r\n        this.normalizeToRef(normalized);\r\n        return normalized;\r\n    }\r\n\r\n    /**\r\n     * Normalize the current Vector3 to the reference\r\n     * @param reference define the Vector3 to update\r\n     * @returns the updated Vector3\r\n     */\r\n    public normalizeToRef(reference: DeepImmutable<Vector3>): Vector3 {\r\n        var len = this.length();\r\n        if (len === 0 || len === 1.0) {\r\n            return reference.copyFromFloats(this.x, this.y, this.z);\r\n        }\r\n\r\n        return this.scaleToRef(1.0 / len, reference);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Vector3 copied from the current Vector3\r\n     * @returns the new Vector3\r\n     */\r\n    public clone(): Vector3 {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    }\r\n\r\n    /**\r\n     * Copies the given vector coordinates to the current Vector3 ones\r\n     * @param source defines the source Vector3\r\n     * @returns the current updated Vector3\r\n     */\r\n    public copyFrom(source: DeepImmutable<Vector3>): Vector3 {\r\n        return this.copyFromFloats(source.x, source.y, source.z);\r\n    }\r\n\r\n    /**\r\n     * Copies the given floats to the current Vector3 coordinates\r\n     * @param x defines the x coordinate of the operand\r\n     * @param y defines the y coordinate of the operand\r\n     * @param z defines the z coordinate of the operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public copyFromFloats(x: number, y: number, z: number): Vector3 {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given floats to the current Vector3 coordinates\r\n     * @param x defines the x coordinate of the operand\r\n     * @param y defines the y coordinate of the operand\r\n     * @param z defines the z coordinate of the operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public set(x: number, y: number, z: number): Vector3 {\r\n        return this.copyFromFloats(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * Copies the given float to the current Vector3 coordinates\r\n     * @param v defines the x, y and z coordinates of the operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public setAll(v: number): Vector3 {\r\n        this.x = this.y = this.z = v;\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Get the clip factor between two vectors\r\n     * @param vector0 defines the first operand\r\n     * @param vector1 defines the second operand\r\n     * @param axis defines the axis to use\r\n     * @param size defines the size along the axis\r\n     * @returns the clip factor\r\n     */\r\n    public static GetClipFactor(vector0: DeepImmutable<Vector3>, vector1: DeepImmutable<Vector3>, axis: DeepImmutable<Vector3>, size: number) {\r\n        var d0 = Vector3.Dot(vector0, axis) - size;\r\n        var d1 = Vector3.Dot(vector1, axis) - size;\r\n\r\n        var s = d0 / (d0 - d1);\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Get angle between two vectors\r\n     * @param vector0 angle between vector0 and vector1\r\n     * @param vector1 angle between vector0 and vector1\r\n     * @param normal direction of the normal\r\n     * @return the angle between vector0 and vector1\r\n     */\r\n    public static GetAngleBetweenVectors(vector0: DeepImmutable<Vector3>, vector1: DeepImmutable<Vector3>, normal: DeepImmutable<Vector3>): number {\r\n        const v0: Vector3 = vector0.normalizeToRef(MathTmp.Vector3[1]);\r\n        const v1: Vector3 = vector1.normalizeToRef(MathTmp.Vector3[2]);\r\n        const dot: number = Vector3.Dot(v0, v1);\r\n        const n = MathTmp.Vector3[3];\r\n        Vector3.CrossToRef(v0, v1, n);\r\n        if (Vector3.Dot(n, normal) > 0) {\r\n            return Math.acos(dot);\r\n        }\r\n        return -Math.acos(dot);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set from the index \"offset\" of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines the offset in the source array\r\n     * @returns the new Vector3\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Vector3 {\r\n        return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set from the index \"offset\" of the given Float32Array\r\n     * This function is deprecated. Use FromArray instead\r\n     * @param array defines the source array\r\n     * @param offset defines the offset in the source array\r\n     * @returns the new Vector3\r\n     */\r\n    public static FromFloatArray(array: DeepImmutable<Float32Array>, offset?: number): Vector3 {\r\n        return Vector3.FromArray(array, offset);\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines the offset in the source array\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static FromArrayToRef(array: DeepImmutable<ArrayLike<number>>, offset: number, result: Vector3): void {\r\n        result.x = array[offset];\r\n        result.y = array[offset + 1];\r\n        result.z = array[offset + 2];\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the element values from the index \"offset\" of the given Float32Array\r\n     * This function is deprecated.  Use FromArrayToRef instead.\r\n     * @param array defines the source array\r\n     * @param offset defines the offset in the source array\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static FromFloatArrayToRef(array: DeepImmutable<Float32Array>, offset: number, result: Vector3): void {\r\n        return Vector3.FromArrayToRef(array, offset, result);\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the given floats.\r\n     * @param x defines the x coordinate of the source\r\n     * @param y defines the y coordinate of the source\r\n     * @param z defines the z coordinate of the source\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static FromFloatsToRef(x: number, y: number, z: number, result: Vector3): void {\r\n        result.copyFromFloats(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set to (0.0, 0.0, 0.0)\r\n     * @returns a new empty Vector3\r\n     */\r\n    public static Zero(): Vector3 {\r\n        return new Vector3(0.0, 0.0, 0.0);\r\n    }\r\n    /**\r\n     * Returns a new Vector3 set to (1.0, 1.0, 1.0)\r\n     * @returns a new unit Vector3\r\n     */\r\n    public static One(): Vector3 {\r\n        return new Vector3(1.0, 1.0, 1.0);\r\n    }\r\n    /**\r\n     * Returns a new Vector3 set to (0.0, 1.0, 0.0)\r\n     * @returns a new up Vector3\r\n     */\r\n    public static Up(): Vector3 {\r\n        return new Vector3(0.0, 1.0, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Gets a up Vector3 that must not be updated\r\n     */\r\n    public static get UpReadOnly(): DeepImmutable<Vector3> {\r\n        return Vector3._UpReadOnly;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set to (0.0, -1.0, 0.0)\r\n     * @returns a new down Vector3\r\n     */\r\n    public static Down(): Vector3 {\r\n        return new Vector3(0.0, -1.0, 0.0);\r\n    }\r\n    /**\r\n     * Returns a new Vector3 set to (0.0, 0.0, 1.0)\r\n     * @returns a new forward Vector3\r\n     */\r\n    public static Forward(): Vector3 {\r\n        return new Vector3(0.0, 0.0, 1.0);\r\n    }\r\n    /**\r\n     * Returns a new Vector3 set to (0.0, 0.0, -1.0)\r\n     * @returns a new forward Vector3\r\n     */\r\n    public static Backward(): Vector3 {\r\n        return new Vector3(0.0, 0.0, -1.0);\r\n    }\r\n    /**\r\n     * Returns a new Vector3 set to (1.0, 0.0, 0.0)\r\n     * @returns a new right Vector3\r\n     */\r\n    public static Right(): Vector3 {\r\n        return new Vector3(1.0, 0.0, 0.0);\r\n    }\r\n    /**\r\n     * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\r\n     * @returns a new left Vector3\r\n     */\r\n    public static Left(): Vector3 {\r\n        return new Vector3(-1.0, 0.0, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\r\n     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\r\n     * @param vector defines the Vector3 to transform\r\n     * @param transformation defines the transformation matrix\r\n     * @returns the transformed Vector3\r\n     */\r\n    public static TransformCoordinates(vector: DeepImmutable<Vector3>, transformation: DeepImmutable<Matrix>): Vector3 {\r\n        var result = Vector3.Zero();\r\n        Vector3.TransformCoordinatesToRef(vector, transformation, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\r\n     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\r\n     * @param vector defines the Vector3 to transform\r\n     * @param transformation defines the transformation matrix\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static TransformCoordinatesToRef(vector: DeepImmutable<Vector3>, transformation: DeepImmutable<Matrix>, result: Vector3): void {\r\n        Vector3.TransformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\r\n     * This method computes tranformed coordinates only, not transformed direction vectors\r\n     * @param x define the x coordinate of the source vector\r\n     * @param y define the y coordinate of the source vector\r\n     * @param z define the z coordinate of the source vector\r\n     * @param transformation defines the transformation matrix\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static TransformCoordinatesFromFloatsToRef(x: number, y: number, z: number, transformation: DeepImmutable<Matrix>, result: Vector3): void {\r\n        const m = transformation.m;\r\n        var rx = x * m[0] + y * m[4] + z * m[8] + m[12];\r\n        var ry = x * m[1] + y * m[5] + z * m[9] + m[13];\r\n        var rz = x * m[2] + y * m[6] + z * m[10] + m[14];\r\n        var rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\r\n\r\n        result.x = rx * rw;\r\n        result.y = ry * rw;\r\n        result.z = rz * rw;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\r\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n     * @param vector defines the Vector3 to transform\r\n     * @param transformation defines the transformation matrix\r\n     * @returns the new Vector3\r\n     */\r\n    public static TransformNormal(vector: DeepImmutable<Vector3>, transformation: DeepImmutable<Matrix>): Vector3 {\r\n        var result = Vector3.Zero();\r\n        Vector3.TransformNormalToRef(vector, transformation, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\r\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n     * @param vector defines the Vector3 to transform\r\n     * @param transformation defines the transformation matrix\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static TransformNormalToRef(vector: DeepImmutable<Vector3>, transformation: DeepImmutable<Matrix>, result: Vector3): void {\r\n        this.TransformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\r\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n     * @param x define the x coordinate of the source vector\r\n     * @param y define the y coordinate of the source vector\r\n     * @param z define the z coordinate of the source vector\r\n     * @param transformation defines the transformation matrix\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static TransformNormalFromFloatsToRef(x: number, y: number, z: number, transformation: DeepImmutable<Matrix>, result: Vector3): void {\r\n        const m = transformation.m;\r\n        result.x = x * m[0] + y * m[4] + z * m[8];\r\n        result.y = x * m[1] + y * m[5] + z * m[9];\r\n        result.z = x * m[2] + y * m[6] + z * m[10];\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\r\n     * @param value1 defines the first control point\r\n     * @param value2 defines the second control point\r\n     * @param value3 defines the third control point\r\n     * @param value4 defines the fourth control point\r\n     * @param amount defines the amount on the spline to use\r\n     * @returns the new Vector3\r\n     */\r\n    public static CatmullRom(value1: DeepImmutable<Vector3>, value2: DeepImmutable<Vector3>, value3: DeepImmutable<Vector3>, value4: DeepImmutable<Vector3>, amount: number): Vector3 {\r\n        var squared = amount * amount;\r\n        var cubed = amount * squared;\r\n\r\n        var x = 0.5 * ((((2.0 * value2.x) + ((-value1.x + value3.x) * amount)) +\r\n            (((((2.0 * value1.x) - (5.0 * value2.x)) + (4.0 * value3.x)) - value4.x) * squared)) +\r\n            ((((-value1.x + (3.0 * value2.x)) - (3.0 * value3.x)) + value4.x) * cubed));\r\n\r\n        var y = 0.5 * ((((2.0 * value2.y) + ((-value1.y + value3.y) * amount)) +\r\n            (((((2.0 * value1.y) - (5.0 * value2.y)) + (4.0 * value3.y)) - value4.y) * squared)) +\r\n            ((((-value1.y + (3.0 * value2.y)) - (3.0 * value3.y)) + value4.y) * cubed));\r\n\r\n        var z = 0.5 * ((((2.0 * value2.z) + ((-value1.z + value3.z) * amount)) +\r\n            (((((2.0 * value1.z) - (5.0 * value2.z)) + (4.0 * value3.z)) - value4.z) * squared)) +\r\n            ((((-value1.z + (3.0 * value2.z)) - (3.0 * value3.z)) + value4.z) * cubed));\r\n\r\n        return new Vector3(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\r\n     * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\r\n     * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\r\n     * @param value defines the current value\r\n     * @param min defines the lower range value\r\n     * @param max defines the upper range value\r\n     * @returns the new Vector3\r\n     */\r\n    public static Clamp(value: DeepImmutable<Vector3>, min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>): Vector3 {\r\n        const v = new Vector3();\r\n        Vector3.ClampToRef(value, min, max, v);\r\n        return v;\r\n    }\r\n    /**\r\n     * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\r\n     * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\r\n     * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\r\n     * @param value defines the current value\r\n     * @param min defines the lower range value\r\n     * @param max defines the upper range value\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static ClampToRef(value: DeepImmutable<Vector3>, min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, result: Vector3): void {\r\n        var x = value.x;\r\n        x = (x > max.x) ? max.x : x;\r\n        x = (x < min.x) ? min.x : x;\r\n\r\n        var y = value.y;\r\n        y = (y > max.y) ? max.y : y;\r\n        y = (y < min.y) ? min.y : y;\r\n\r\n        var z = value.z;\r\n        z = (z > max.z) ? max.z : z;\r\n        z = (z < min.z) ? min.z : z;\r\n\r\n        result.copyFromFloats(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent vector\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent vector\r\n     * @param amount defines the amount on the interpolation spline (between 0 and 1)\r\n     * @returns the new Vector3\r\n     */\r\n    public static Hermite(value1: DeepImmutable<Vector3>, tangent1: DeepImmutable<Vector3>, value2: DeepImmutable<Vector3>, tangent2: DeepImmutable<Vector3>, amount: number): Vector3 {\r\n        var squared = amount * amount;\r\n        var cubed = amount * squared;\r\n        var part1 = ((2.0 * cubed) - (3.0 * squared)) + 1.0;\r\n        var part2 = (-2.0 * cubed) + (3.0 * squared);\r\n        var part3 = (cubed - (2.0 * squared)) + amount;\r\n        var part4 = cubed - squared;\r\n\r\n        var x = (((value1.x * part1) + (value2.x * part2)) + (tangent1.x * part3)) + (tangent2.x * part4);\r\n        var y = (((value1.y * part1) + (value2.y * part2)) + (tangent1.y * part3)) + (tangent2.y * part4);\r\n        var z = (((value1.z * part1) + (value2.z * part2)) + (tangent1.z * part3)) + (tangent2.z * part4);\r\n        return new Vector3(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\r\n     * @param start defines the start value\r\n     * @param end defines the end value\r\n     * @param amount max defines amount between both (between 0 and 1)\r\n     * @returns the new Vector3\r\n     */\r\n    public static Lerp(start: DeepImmutable<Vector3>, end: DeepImmutable<Vector3>, amount: number): Vector3 {\r\n        var result = new Vector3(0, 0, 0);\r\n        Vector3.LerpToRef(start, end, amount, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\r\n     * @param start defines the start value\r\n     * @param end defines the end value\r\n     * @param amount max defines amount between both (between 0 and 1)\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static LerpToRef(start: DeepImmutable<Vector3>, end: DeepImmutable<Vector3>, amount: number, result: Vector3): void {\r\n        result.x = start.x + ((end.x - start.x) * amount);\r\n        result.y = start.y + ((end.y - start.y) * amount);\r\n        result.z = start.z + ((end.z - start.z) * amount);\r\n    }\r\n\r\n    /**\r\n     * Returns the dot product (float) between the vectors \"left\" and \"right\"\r\n     * @param left defines the left operand\r\n     * @param right defines the right operand\r\n     * @returns the dot product\r\n     */\r\n    public static Dot(left: DeepImmutable<Vector3>, right: DeepImmutable<Vector3>): number {\r\n        return (left.x * right.x + left.y * right.y + left.z * right.z);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\r\n     * The cross product is then orthogonal to both \"left\" and \"right\"\r\n     * @param left defines the left operand\r\n     * @param right defines the right operand\r\n     * @returns the cross product\r\n     */\r\n    public static Cross(left: DeepImmutable<Vector3>, right: DeepImmutable<Vector3>): Vector3 {\r\n        var result = Vector3.Zero();\r\n        Vector3.CrossToRef(left, right, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\r\n     * The cross product is then orthogonal to both \"left\" and \"right\"\r\n     * @param left defines the left operand\r\n     * @param right defines the right operand\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static CrossToRef(left: Vector3, right: Vector3, result: Vector3): void {\r\n        const x = left.y * right.z - left.z * right.y;\r\n        const y = left.z * right.x - left.x * right.z;\r\n        const z = left.x * right.y - left.y * right.x;\r\n        result.copyFromFloats(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 as the normalization of the given vector\r\n     * @param vector defines the Vector3 to normalize\r\n     * @returns the new Vector3\r\n     */\r\n    public static Normalize(vector: DeepImmutable<Vector3>): Vector3 {\r\n        var result = Vector3.Zero();\r\n        Vector3.NormalizeToRef(vector, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the normalization of the given first vector\r\n     * @param vector defines the Vector3 to normalize\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static NormalizeToRef(vector: DeepImmutable<Vector3>, result: Vector3): void {\r\n        vector.normalizeToRef(result);\r\n    }\r\n\r\n    /**\r\n     * Project a Vector3 onto screen space\r\n     * @param vector defines the Vector3 to project\r\n     * @param world defines the world matrix to use\r\n     * @param transform defines the transform (view x projection) matrix to use\r\n     * @param viewport defines the screen viewport to use\r\n     * @returns the new Vector3\r\n     */\r\n    public static Project(vector: DeepImmutable<Vector3>, world: DeepImmutable<Matrix>, transform: DeepImmutable<Matrix>, viewport: DeepImmutable<Viewport>): Vector3 {\r\n        var cw = viewport.width;\r\n        var ch = viewport.height;\r\n        var cx = viewport.x;\r\n        var cy = viewport.y;\r\n\r\n        var viewportMatrix = MathTmp.Matrix[1];\r\n\r\n        Matrix.FromValuesToRef(\r\n            cw / 2.0, 0, 0, 0,\r\n            0, -ch / 2.0, 0, 0,\r\n            0, 0, 0.5, 0,\r\n            cx + cw / 2.0, ch / 2.0 + cy, 0.5, 1, viewportMatrix);\r\n\r\n        var matrix = MathTmp.Matrix[0];\r\n        world.multiplyToRef(transform, matrix);\r\n        matrix.multiplyToRef(viewportMatrix, matrix);\r\n\r\n        return Vector3.TransformCoordinates(vector, matrix);\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _UnprojectFromInvertedMatrixToRef(source: DeepImmutable<Vector3>, matrix: DeepImmutable<Matrix>, result: Vector3) {\r\n        Vector3.TransformCoordinatesToRef(source, matrix, result);\r\n        const m = matrix.m;\r\n        var num = source.x * m[3] + source.y * m[7] + source.z * m[11] + m[15];\r\n        if (Scalar.WithinEpsilon(num, 1.0)) {\r\n            result.scaleInPlace(1.0 / num);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unproject from screen space to object space\r\n     * @param source defines the screen space Vector3 to use\r\n     * @param viewportWidth defines the current width of the viewport\r\n     * @param viewportHeight defines the current height of the viewport\r\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n     * @param transform defines the transform (view x projection) matrix to use\r\n     * @returns the new Vector3\r\n     */\r\n    public static UnprojectFromTransform(source: Vector3, viewportWidth: number, viewportHeight: number, world: DeepImmutable<Matrix>, transform: DeepImmutable<Matrix>): Vector3 {\r\n        var matrix = MathTmp.Matrix[0];\r\n        world.multiplyToRef(transform, matrix);\r\n        matrix.invert();\r\n        source.x = source.x / viewportWidth * 2 - 1;\r\n        source.y = -(source.y / viewportHeight * 2 - 1);\r\n        const vector = new Vector3();\r\n        Vector3._UnprojectFromInvertedMatrixToRef(source, matrix, vector);\r\n        return vector;\r\n    }\r\n\r\n    /**\r\n     * Unproject from screen space to object space\r\n     * @param source defines the screen space Vector3 to use\r\n     * @param viewportWidth defines the current width of the viewport\r\n     * @param viewportHeight defines the current height of the viewport\r\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n     * @param view defines the view matrix to use\r\n     * @param projection defines the projection matrix to use\r\n     * @returns the new Vector3\r\n     */\r\n    public static Unproject(source: DeepImmutable<Vector3>, viewportWidth: number, viewportHeight: number, world: DeepImmutable<Matrix>, view: DeepImmutable<Matrix>, projection: DeepImmutable<Matrix>): Vector3 {\r\n        let result = Vector3.Zero();\r\n\r\n        Vector3.UnprojectToRef(source, viewportWidth, viewportHeight, world, view, projection, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Unproject from screen space to object space\r\n     * @param source defines the screen space Vector3 to use\r\n     * @param viewportWidth defines the current width of the viewport\r\n     * @param viewportHeight defines the current height of the viewport\r\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n     * @param view defines the view matrix to use\r\n     * @param projection defines the projection matrix to use\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static UnprojectToRef(source: DeepImmutable<Vector3>, viewportWidth: number, viewportHeight: number, world: DeepImmutable<Matrix>, view: DeepImmutable<Matrix>, projection: DeepImmutable<Matrix>, result: Vector3): void {\r\n        Vector3.UnprojectFloatsToRef(source.x, source.y, source.z, viewportWidth, viewportHeight, world, view, projection, result);\r\n    }\r\n\r\n    /**\r\n     * Unproject from screen space to object space\r\n     * @param sourceX defines the screen space x coordinate to use\r\n     * @param sourceY defines the screen space y coordinate to use\r\n     * @param sourceZ defines the screen space z coordinate to use\r\n     * @param viewportWidth defines the current width of the viewport\r\n     * @param viewportHeight defines the current height of the viewport\r\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n     * @param view defines the view matrix to use\r\n     * @param projection defines the projection matrix to use\r\n     * @param result defines the Vector3 where to store the result\r\n     */\r\n    public static UnprojectFloatsToRef(sourceX: float, sourceY: float, sourceZ: float, viewportWidth: number, viewportHeight: number, world: DeepImmutable<Matrix>, view: DeepImmutable<Matrix>, projection: DeepImmutable<Matrix>, result: Vector3): void {\r\n        var matrix = MathTmp.Matrix[0];\r\n        world.multiplyToRef(view, matrix);\r\n        matrix.multiplyToRef(projection, matrix);\r\n        matrix.invert();\r\n        var screenSource = MathTmp.Vector3[0];\r\n        screenSource.x = sourceX / viewportWidth * 2 - 1;\r\n        screenSource.y = -(sourceY / viewportHeight * 2 - 1);\r\n        screenSource.z = 2 * sourceZ - 1.0;\r\n        Vector3._UnprojectFromInvertedMatrixToRef(screenSource, matrix, result);\r\n    }\r\n\r\n    /**\r\n     * Gets the minimal coordinate values between two Vector3\r\n     * @param left defines the first operand\r\n     * @param right defines the second operand\r\n     * @returns the new Vector3\r\n     */\r\n    public static Minimize(left: DeepImmutable<Vector3>, right: DeepImmutable<Vector3>): Vector3 {\r\n        var min = left.clone();\r\n        min.minimizeInPlace(right);\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * Gets the maximal coordinate values between two Vector3\r\n     * @param left defines the first operand\r\n     * @param right defines the second operand\r\n     * @returns the new Vector3\r\n     */\r\n    public static Maximize(left: DeepImmutable<Vector3>, right: DeepImmutable<Vector3>): Vector3 {\r\n        var max = left.clone();\r\n        max.maximizeInPlace(right);\r\n        return max;\r\n    }\r\n\r\n    /**\r\n     * Returns the distance between the vectors \"value1\" and \"value2\"\r\n     * @param value1 defines the first operand\r\n     * @param value2 defines the second operand\r\n     * @returns the distance\r\n     */\r\n    public static Distance(value1: DeepImmutable<Vector3>, value2: DeepImmutable<Vector3>): number {\r\n        return Math.sqrt(Vector3.DistanceSquared(value1, value2));\r\n    }\r\n\r\n    /**\r\n     * Returns the squared distance between the vectors \"value1\" and \"value2\"\r\n     * @param value1 defines the first operand\r\n     * @param value2 defines the second operand\r\n     * @returns the squared distance\r\n     */\r\n    public static DistanceSquared(value1: DeepImmutable<Vector3>, value2: DeepImmutable<Vector3>): number {\r\n        var x = value1.x - value2.x;\r\n        var y = value1.y - value2.y;\r\n        var z = value1.z - value2.z;\r\n\r\n        return (x * x) + (y * y) + (z * z);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\r\n     * @param value1 defines the first operand\r\n     * @param value2 defines the second operand\r\n     * @returns the new Vector3\r\n     */\r\n    public static Center(value1: DeepImmutable<Vector3>, value2: DeepImmutable<Vector3>): Vector3 {\r\n        var center = value1.add(value2);\r\n        center.scaleInPlace(0.5);\r\n        return center;\r\n    }\r\n\r\n    /**\r\n     * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\r\n     * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\r\n     * to something in order to rotate it from its local system to the given target system\r\n     * Note: axis1, axis2 and axis3 are normalized during this operation\r\n     * @param axis1 defines the first axis\r\n     * @param axis2 defines the second axis\r\n     * @param axis3 defines the third axis\r\n     * @returns a new Vector3\r\n     */\r\n    public static RotationFromAxis(axis1: DeepImmutable<Vector3>, axis2: DeepImmutable<Vector3>, axis3: DeepImmutable<Vector3>): Vector3 {\r\n        var rotation = Vector3.Zero();\r\n        Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\r\n        return rotation;\r\n    }\r\n\r\n    /**\r\n     * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\r\n     * @param axis1 defines the first axis\r\n     * @param axis2 defines the second axis\r\n     * @param axis3 defines the third axis\r\n     * @param ref defines the Vector3 where to store the result\r\n     */\r\n    public static RotationFromAxisToRef(axis1: DeepImmutable<Vector3>, axis2: DeepImmutable<Vector3>, axis3: DeepImmutable<Vector3>, ref: Vector3): void {\r\n        var quat = MathTmp.Quaternion[0];\r\n        Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\r\n        quat.toEulerAnglesToRef(ref);\r\n    }\r\n}\r\n\r\n/**\r\n * Vector4 class created for EulerAngle class conversion to Quaternion\r\n */\r\nexport class Vector4 {\r\n    /**\r\n     * Creates a Vector4 object from the given floats.\r\n     * @param x x value of the vector\r\n     * @param y y value of the vector\r\n     * @param z z value of the vector\r\n     * @param w w value of the vector\r\n     */\r\n    constructor(\r\n        /** x value of the vector */\r\n        public x: number,\r\n        /** y value of the vector */\r\n        public y: number,\r\n        /** z value of the vector */\r\n        public z: number,\r\n        /** w value of the vector */\r\n        public w: number\r\n    ) { }\r\n\r\n    /**\r\n     * Returns the string with the Vector4 coordinates.\r\n     * @returns a string containing all the vector values\r\n     */\r\n    public toString(): string {\r\n        return \"{X: \" + this.x + \" Y:\" + this.y + \" Z:\" + this.z + \" W:\" + this.w + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"Vector4\".\r\n     * @returns \"Vector4\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Vector4\";\r\n    }\r\n\r\n    /**\r\n     * Returns the Vector4 hash code.\r\n     * @returns a unique hash code\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.x || 0;\r\n        hash = (hash * 397) ^ (this.y || 0);\r\n        hash = (hash * 397) ^ (this.z || 0);\r\n        hash = (hash * 397) ^ (this.w || 0);\r\n        return hash;\r\n    }\r\n\r\n    // Operators\r\n    /**\r\n     * Returns a new array populated with 4 elements : the Vector4 coordinates.\r\n     * @returns the resulting array\r\n     */\r\n    public asArray(): number[] {\r\n        var result = new Array<number>();\r\n\r\n        this.toArray(result, 0);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Populates the given array from the given index with the Vector4 coordinates.\r\n     * @param array array to populate\r\n     * @param index index of the array to start at (default: 0)\r\n     * @returns the Vector4.\r\n     */\r\n    public toArray(array: FloatArray, index?: number): Vector4 {\r\n        if (index === undefined) {\r\n            index = 0;\r\n        }\r\n        array[index] = this.x;\r\n        array[index + 1] = this.y;\r\n        array[index + 2] = this.z;\r\n        array[index + 3] = this.w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the given vector to the current Vector4.\r\n     * @param otherVector the vector to add\r\n     * @returns the updated Vector4.\r\n     */\r\n    public addInPlace(otherVector: DeepImmutable<Vector4>): Vector4 {\r\n        this.x += otherVector.x;\r\n        this.y += otherVector.y;\r\n        this.z += otherVector.z;\r\n        this.w += otherVector.w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\r\n     * @param otherVector the vector to add\r\n     * @returns the resulting vector\r\n     */\r\n    public add(otherVector: DeepImmutable<Vector4>): Vector4 {\r\n        return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\r\n    }\r\n\r\n    /**\r\n     * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\r\n     * @param otherVector the vector to add\r\n     * @param result the vector to store the result\r\n     * @returns the current Vector4.\r\n     */\r\n    public addToRef(otherVector: DeepImmutable<Vector4>, result: Vector4): Vector4 {\r\n        result.x = this.x + otherVector.x;\r\n        result.y = this.y + otherVector.y;\r\n        result.z = this.z + otherVector.z;\r\n        result.w = this.w + otherVector.w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtract in place the given vector from the current Vector4.\r\n     * @param otherVector the vector to subtract\r\n     * @returns the updated Vector4.\r\n     */\r\n    public subtractInPlace(otherVector: DeepImmutable<Vector4>): Vector4 {\r\n        this.x -= otherVector.x;\r\n        this.y -= otherVector.y;\r\n        this.z -= otherVector.z;\r\n        this.w -= otherVector.w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\r\n     * @param otherVector the vector to add\r\n     * @returns the new vector with the result\r\n     */\r\n    public subtract(otherVector: DeepImmutable<Vector4>): Vector4 {\r\n        return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\r\n     * @param otherVector the vector to subtract\r\n     * @param result the vector to store the result\r\n     * @returns the current Vector4.\r\n     */\r\n    public subtractToRef(otherVector: DeepImmutable<Vector4>, result: Vector4): Vector4 {\r\n        result.x = this.x - otherVector.x;\r\n        result.y = this.y - otherVector.y;\r\n        result.z = this.z - otherVector.z;\r\n        result.w = this.w - otherVector.w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n     */\r\n    /**\r\n     * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n     * @param x value to subtract\r\n     * @param y value to subtract\r\n     * @param z value to subtract\r\n     * @param w value to subtract\r\n     * @returns new vector containing the result\r\n     */\r\n    public subtractFromFloats(x: number, y: number, z: number, w: number): Vector4 {\r\n        return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n     * @param x value to subtract\r\n     * @param y value to subtract\r\n     * @param z value to subtract\r\n     * @param w value to subtract\r\n     * @param result the vector to store the result in\r\n     * @returns the current Vector4.\r\n     */\r\n    public subtractFromFloatsToRef(x: number, y: number, z: number, w: number, result: Vector4): Vector4 {\r\n        result.x = this.x - x;\r\n        result.y = this.y - y;\r\n        result.z = this.z - z;\r\n        result.w = this.w - w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector4 set with the current Vector4 negated coordinates.\r\n     * @returns a new vector with the negated values\r\n     */\r\n    public negate(): Vector4 {\r\n        return new Vector4(-this.x, -this.y, -this.z, -this.w);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current Vector4 coordinates by scale (float).\r\n     * @param scale the number to scale with\r\n     * @returns the updated Vector4.\r\n     */\r\n    public scaleInPlace(scale: number): Vector4 {\r\n        this.x *= scale;\r\n        this.y *= scale;\r\n        this.z *= scale;\r\n        this.w *= scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\r\n     * @param scale the number to scale with\r\n     * @returns a new vector with the result\r\n     */\r\n    public scale(scale: number): Vector4 {\r\n        return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\r\n     * @param scale the number to scale with\r\n     * @param result a vector to store the result in\r\n     * @returns the current Vector4.\r\n     */\r\n    public scaleToRef(scale: number, result: Vector4): Vector4 {\r\n        result.x = this.x * scale;\r\n        result.y = this.y * scale;\r\n        result.z = this.z * scale;\r\n        result.w = this.w * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current Vector4 values by a factor and add the result to a given Vector4\r\n     * @param scale defines the scale factor\r\n     * @param result defines the Vector4 object where to store the result\r\n     * @returns the unmodified current Vector4\r\n     */\r\n    public scaleAndAddToRef(scale: number, result: Vector4): Vector4 {\r\n        result.x += this.x * scale;\r\n        result.y += this.y * scale;\r\n        result.z += this.z * scale;\r\n        result.w += this.w * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\r\n     * @param otherVector the vector to compare against\r\n     * @returns true if they are equal\r\n     */\r\n    public equals(otherVector: DeepImmutable<Vector4>): boolean {\r\n        return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z && this.w === otherVector.w;\r\n    }\r\n\r\n    /**\r\n     * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\r\n     * @param otherVector vector to compare against\r\n     * @param epsilon (Default: very small number)\r\n     * @returns true if they are equal\r\n     */\r\n    public equalsWithEpsilon(otherVector: DeepImmutable<Vector4>, epsilon: number = Epsilon): boolean {\r\n        return otherVector\r\n            && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon)\r\n            && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon)\r\n            && Scalar.WithinEpsilon(this.z, otherVector.z, epsilon)\r\n            && Scalar.WithinEpsilon(this.w, otherVector.w, epsilon);\r\n    }\r\n\r\n    /**\r\n     * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\r\n     * @param x x value to compare against\r\n     * @param y y value to compare against\r\n     * @param z z value to compare against\r\n     * @param w w value to compare against\r\n     * @returns true if equal\r\n     */\r\n    public equalsToFloats(x: number, y: number, z: number, w: number): boolean {\r\n        return this.x === x && this.y === y && this.z === z && this.w === w;\r\n    }\r\n\r\n    /**\r\n     * Multiplies in place the current Vector4 by the given one.\r\n     * @param otherVector vector to multiple with\r\n     * @returns the updated Vector4.\r\n     */\r\n    public multiplyInPlace(otherVector: Vector4): Vector4 {\r\n        this.x *= otherVector.x;\r\n        this.y *= otherVector.y;\r\n        this.z *= otherVector.z;\r\n        this.w *= otherVector.w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\r\n     * @param otherVector vector to multiple with\r\n     * @returns resulting new vector\r\n     */\r\n    public multiply(otherVector: DeepImmutable<Vector4>): Vector4 {\r\n        return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\r\n    }\r\n    /**\r\n     * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\r\n     * @param otherVector vector to multiple with\r\n     * @param result vector to store the result\r\n     * @returns the current Vector4.\r\n     */\r\n    public multiplyToRef(otherVector: DeepImmutable<Vector4>, result: Vector4): Vector4 {\r\n        result.x = this.x * otherVector.x;\r\n        result.y = this.y * otherVector.y;\r\n        result.z = this.z * otherVector.z;\r\n        result.w = this.w * otherVector.w;\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\r\n     * @param x x value multiply with\r\n     * @param y y value multiply with\r\n     * @param z z value multiply with\r\n     * @param w w value multiply with\r\n     * @returns resulting new vector\r\n     */\r\n    public multiplyByFloats(x: number, y: number, z: number, w: number): Vector4 {\r\n        return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);\r\n    }\r\n    /**\r\n     * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\r\n     * @param otherVector vector to devide with\r\n     * @returns resulting new vector\r\n     */\r\n    public divide(otherVector: DeepImmutable<Vector4>): Vector4 {\r\n        return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\r\n    }\r\n    /**\r\n     * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\r\n     * @param otherVector vector to devide with\r\n     * @param result vector to store the result\r\n     * @returns the current Vector4.\r\n     */\r\n    public divideToRef(otherVector: DeepImmutable<Vector4>, result: Vector4): Vector4 {\r\n        result.x = this.x / otherVector.x;\r\n        result.y = this.y / otherVector.y;\r\n        result.z = this.z / otherVector.z;\r\n        result.w = this.w / otherVector.w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Vector3 coordinates by the given ones.\r\n     * @param otherVector vector to devide with\r\n     * @returns the updated Vector3.\r\n     */\r\n    public divideInPlace(otherVector: DeepImmutable<Vector4>): Vector4 {\r\n        return this.divideToRef(otherVector, this);\r\n    }\r\n\r\n    /**\r\n     * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\r\n     * @param other defines the second operand\r\n     * @returns the current updated Vector4\r\n     */\r\n    public minimizeInPlace(other: DeepImmutable<Vector4>): Vector4 {\r\n        if (other.x < this.x) { this.x = other.x; }\r\n        if (other.y < this.y) { this.y = other.y; }\r\n        if (other.z < this.z) { this.z = other.z; }\r\n        if (other.w < this.w) { this.w = other.w; }\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\r\n     * @param other defines the second operand\r\n     * @returns the current updated Vector4\r\n     */\r\n    public maximizeInPlace(other: DeepImmutable<Vector4>): Vector4 {\r\n        if (other.x > this.x) { this.x = other.x; }\r\n        if (other.y > this.y) { this.y = other.y; }\r\n        if (other.z > this.z) { this.z = other.z; }\r\n        if (other.w > this.w) { this.w = other.w; }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector4 from current Vector4 floored values\r\n     * @returns a new Vector4\r\n     */\r\n    public floor(): Vector4 {\r\n        return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\r\n    }\r\n\r\n    /**\r\n     * Gets a new Vector4 from current Vector3 floored values\r\n     * @returns a new Vector4\r\n     */\r\n    public fract(): Vector4 {\r\n        return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\r\n    }\r\n\r\n    // Properties\r\n    /**\r\n     * Returns the Vector4 length (float).\r\n     * @returns the length\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n    }\r\n    /**\r\n     * Returns the Vector4 squared length (float).\r\n     * @returns the length squared\r\n     */\r\n    public lengthSquared(): number {\r\n        return (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Normalizes in place the Vector4.\r\n     * @returns the updated Vector4.\r\n     */\r\n    public normalize(): Vector4 {\r\n        var len = this.length();\r\n\r\n        if (len === 0) {\r\n            return this;\r\n        }\r\n\r\n        return this.scaleInPlace(1.0 / len);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\r\n     * @returns this converted to a new vector3\r\n     */\r\n    public toVector3(): Vector3 {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    }\r\n    /**\r\n     * Returns a new Vector4 copied from the current one.\r\n     * @returns the new cloned vector\r\n     */\r\n    public clone(): Vector4 {\r\n        return new Vector4(this.x, this.y, this.z, this.w);\r\n    }\r\n    /**\r\n     * Updates the current Vector4 with the given one coordinates.\r\n     * @param source the source vector to copy from\r\n     * @returns the updated Vector4.\r\n     */\r\n    public copyFrom(source: DeepImmutable<Vector4>): Vector4 {\r\n        this.x = source.x;\r\n        this.y = source.y;\r\n        this.z = source.z;\r\n        this.w = source.w;\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates the current Vector4 coordinates with the given floats.\r\n     * @param x float to copy from\r\n     * @param y float to copy from\r\n     * @param z float to copy from\r\n     * @param w float to copy from\r\n     * @returns the updated Vector4.\r\n     */\r\n    public copyFromFloats(x: number, y: number, z: number, w: number): Vector4 {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates the current Vector4 coordinates with the given floats.\r\n     * @param x float to set from\r\n     * @param y float to set from\r\n     * @param z float to set from\r\n     * @param w float to set from\r\n     * @returns the updated Vector4.\r\n     */\r\n    public set(x: number, y: number, z: number, w: number): Vector4 {\r\n        return this.copyFromFloats(x, y, z, w);\r\n    }\r\n\r\n    /**\r\n     * Copies the given float to the current Vector3 coordinates\r\n     * @param v defines the x, y, z and w coordinates of the operand\r\n     * @returns the current updated Vector3\r\n     */\r\n    public setAll(v: number): Vector4 {\r\n        this.x = this.y = this.z = this.w = v;\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Returns a new Vector4 set from the starting index of the given array.\r\n     * @param array the array to pull values from\r\n     * @param offset the offset into the array to start at\r\n     * @returns the new vector\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset?: number): Vector4 {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\r\n    }\r\n    /**\r\n     * Updates the given vector \"result\" from the starting index of the given array.\r\n     * @param array the array to pull values from\r\n     * @param offset the offset into the array to start at\r\n     * @param result the vector to store the result in\r\n     */\r\n    public static FromArrayToRef(array: DeepImmutable<ArrayLike<number>>, offset: number, result: Vector4): void {\r\n        result.x = array[offset];\r\n        result.y = array[offset + 1];\r\n        result.z = array[offset + 2];\r\n        result.w = array[offset + 3];\r\n    }\r\n    /**\r\n     * Updates the given vector \"result\" from the starting index of the given Float32Array.\r\n     * @param array the array to pull values from\r\n     * @param offset the offset into the array to start at\r\n     * @param result the vector to store the result in\r\n     */\r\n    public static FromFloatArrayToRef(array: DeepImmutable<Float32Array>, offset: number, result: Vector4): void {\r\n        Vector4.FromArrayToRef(array, offset, result);\r\n    }\r\n    /**\r\n     * Updates the given vector \"result\" coordinates from the given floats.\r\n     * @param x float to set from\r\n     * @param y float to set from\r\n     * @param z float to set from\r\n     * @param w float to set from\r\n     * @param result the vector to the floats in\r\n     */\r\n    public static FromFloatsToRef(x: number, y: number, z: number, w: number, result: Vector4): void {\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n    }\r\n    /**\r\n     * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\r\n     * @returns the new vector\r\n     */\r\n    public static Zero(): Vector4 {\r\n        return new Vector4(0.0, 0.0, 0.0, 0.0);\r\n    }\r\n    /**\r\n     * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\r\n     * @returns the new vector\r\n     */\r\n    public static One(): Vector4 {\r\n        return new Vector4(1.0, 1.0, 1.0, 1.0);\r\n    }\r\n    /**\r\n     * Returns a new normalized Vector4 from the given one.\r\n     * @param vector the vector to normalize\r\n     * @returns the vector\r\n     */\r\n    public static Normalize(vector: DeepImmutable<Vector4>): Vector4 {\r\n        var result = Vector4.Zero();\r\n        Vector4.NormalizeToRef(vector, result);\r\n        return result;\r\n    }\r\n    /**\r\n     * Updates the given vector \"result\" from the normalization of the given one.\r\n     * @param vector the vector to normalize\r\n     * @param result the vector to store the result in\r\n     */\r\n    public static NormalizeToRef(vector: DeepImmutable<Vector4>, result: Vector4): void {\r\n        result.copyFrom(vector);\r\n        result.normalize();\r\n    }\r\n\r\n    /**\r\n     * Returns a vector with the minimum values from the left and right vectors\r\n     * @param left left vector to minimize\r\n     * @param right right vector to minimize\r\n     * @returns a new vector with the minimum of the left and right vector values\r\n     */\r\n    public static Minimize(left: DeepImmutable<Vector4>, right: DeepImmutable<Vector4>): Vector4 {\r\n        var min = left.clone();\r\n        min.minimizeInPlace(right);\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * Returns a vector with the maximum values from the left and right vectors\r\n     * @param left left vector to maximize\r\n     * @param right right vector to maximize\r\n     * @returns a new vector with the maximum of the left and right vector values\r\n     */\r\n    public static Maximize(left: DeepImmutable<Vector4>, right: DeepImmutable<Vector4>): Vector4 {\r\n        var max = left.clone();\r\n        max.maximizeInPlace(right);\r\n        return max;\r\n    }\r\n    /**\r\n     * Returns the distance (float) between the vectors \"value1\" and \"value2\".\r\n     * @param value1 value to calulate the distance between\r\n     * @param value2 value to calulate the distance between\r\n     * @return the distance between the two vectors\r\n     */\r\n    public static Distance(value1: DeepImmutable<Vector4>, value2: DeepImmutable<Vector4>): number {\r\n        return Math.sqrt(Vector4.DistanceSquared(value1, value2));\r\n    }\r\n    /**\r\n     * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\r\n     * @param value1 value to calulate the distance between\r\n     * @param value2 value to calulate the distance between\r\n     * @return the distance between the two vectors squared\r\n     */\r\n    public static DistanceSquared(value1: DeepImmutable<Vector4>, value2: DeepImmutable<Vector4>): number {\r\n        var x = value1.x - value2.x;\r\n        var y = value1.y - value2.y;\r\n        var z = value1.z - value2.z;\r\n        var w = value1.w - value2.w;\r\n\r\n        return (x * x) + (y * y) + (z * z) + (w * w);\r\n    }\r\n    /**\r\n     * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\r\n     * @param value1 value to calulate the center between\r\n     * @param value2 value to calulate the center between\r\n     * @return the center between the two vectors\r\n     */\r\n    public static Center(value1: DeepImmutable<Vector4>, value2: DeepImmutable<Vector4>): Vector4 {\r\n        var center = value1.add(value2);\r\n        center.scaleInPlace(0.5);\r\n        return center;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\r\n     * This methods computes transformed normalized direction vectors only.\r\n     * @param vector the vector to transform\r\n     * @param transformation the transformation matrix to apply\r\n     * @returns the new vector\r\n     */\r\n    public static TransformNormal(vector: DeepImmutable<Vector4>, transformation: DeepImmutable<Matrix>): Vector4 {\r\n        var result = Vector4.Zero();\r\n        Vector4.TransformNormalToRef(vector, transformation, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector.\r\n     * This methods computes transformed normalized direction vectors only.\r\n     * @param vector the vector to transform\r\n     * @param transformation the transformation matrix to apply\r\n     * @param result the vector to store the result in\r\n     */\r\n    public static TransformNormalToRef(vector: DeepImmutable<Vector4>, transformation: DeepImmutable<Matrix>, result: Vector4): void {\r\n        const m = transformation.m;\r\n        var x = (vector.x * m[0]) + (vector.y * m[4]) + (vector.z * m[8]);\r\n        var y = (vector.x * m[1]) + (vector.y * m[5]) + (vector.z * m[9]);\r\n        var z = (vector.x * m[2]) + (vector.y * m[6]) + (vector.z * m[10]);\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = vector.w;\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\r\n     * This methods computes transformed normalized direction vectors only.\r\n     * @param x value to transform\r\n     * @param y value to transform\r\n     * @param z value to transform\r\n     * @param w value to transform\r\n     * @param transformation the transformation matrix to apply\r\n     * @param result the vector to store the results in\r\n     */\r\n    public static TransformNormalFromFloatsToRef(x: number, y: number, z: number, w: number, transformation: DeepImmutable<Matrix>, result: Vector4): void {\r\n        const m = transformation.m;\r\n        result.x = (x * m[0]) + (y * m[4]) + (z * m[8]);\r\n        result.y = (x * m[1]) + (y * m[5]) + (z * m[9]);\r\n        result.z = (x * m[2]) + (y * m[6]) + (z * m[10]);\r\n        result.w = w;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Vector4 from a Vector3\r\n     * @param source defines the source data\r\n     * @param w defines the 4th component (default is 0)\r\n     * @returns a new Vector4\r\n     */\r\n    public static FromVector3(source: Vector3, w: number = 0) {\r\n        return new Vector4(source.x, source.y, source.z, w);\r\n    }\r\n}\r\n\r\n/**\r\n * Interface for the size containing width and height\r\n */\r\nexport interface ISize {\r\n    /**\r\n     * Width\r\n     */\r\n    width: number;\r\n    /**\r\n     * Heighht\r\n     */\r\n    height: number;\r\n}\r\n\r\n/**\r\n * Size containing widht and height\r\n */\r\nexport class Size implements ISize {\r\n    /**\r\n     * Width\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Height\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Creates a Size object from the given width and height (floats).\r\n     * @param width width of the new size\r\n     * @param height height of the new size\r\n     */\r\n    public constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Returns a string with the Size width and height\r\n     * @returns a string with the Size width and height\r\n     */\r\n    public toString(): string {\r\n        return `{W: ${this.width}, H: ${this.height}}`;\r\n    }\r\n    /**\r\n     * \"Size\"\r\n     * @returns the string \"Size\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Size\";\r\n    }\r\n    /**\r\n     * Returns the Size hash code.\r\n     * @returns a hash code for a unique width and height\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.width || 0;\r\n        hash = (hash * 397) ^ (this.height || 0);\r\n        return hash;\r\n    }\r\n    /**\r\n     * Updates the current size from the given one.\r\n     * @param src the given size\r\n     */\r\n    public copyFrom(src: Size) {\r\n        this.width = src.width;\r\n        this.height = src.height;\r\n    }\r\n    /**\r\n     * Updates in place the current Size from the given floats.\r\n     * @param width width of the new size\r\n     * @param height height of the new size\r\n     * @returns the updated Size.\r\n     */\r\n    public copyFromFloats(width: number, height: number): Size {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates in place the current Size from the given floats.\r\n     * @param width width to set\r\n     * @param height height to set\r\n     * @returns the updated Size.\r\n     */\r\n    public set(width: number, height: number): Size {\r\n        return this.copyFromFloats(width, height);\r\n    }\r\n    /**\r\n     * Multiplies the width and height by numbers\r\n     * @param w factor to multiple the width by\r\n     * @param h factor to multiple the height by\r\n     * @returns a new Size set with the multiplication result of the current Size and the given floats.\r\n     */\r\n    public multiplyByFloats(w: number, h: number): Size {\r\n        return new Size(this.width * w, this.height * h);\r\n    }\r\n    /**\r\n     * Clones the size\r\n     * @returns a new Size copied from the given one.\r\n     */\r\n    public clone(): Size {\r\n        return new Size(this.width, this.height);\r\n    }\r\n    /**\r\n     * True if the current Size and the given one width and height are strictly equal.\r\n     * @param other the other size to compare against\r\n     * @returns True if the current Size and the given one width and height are strictly equal.\r\n     */\r\n    public equals(other: Size): boolean {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        return (this.width === other.width) && (this.height === other.height);\r\n    }\r\n    /**\r\n     * The surface of the Size : width * height (float).\r\n     */\r\n    public get surface(): number {\r\n        return this.width * this.height;\r\n    }\r\n    /**\r\n     * Create a new size of zero\r\n     * @returns a new Size set to (0.0, 0.0)\r\n     */\r\n    public static Zero(): Size {\r\n        return new Size(0.0, 0.0);\r\n    }\r\n    /**\r\n     * Sums the width and height of two sizes\r\n     * @param otherSize size to add to this size\r\n     * @returns a new Size set as the addition result of the current Size and the given one.\r\n     */\r\n    public add(otherSize: Size): Size {\r\n        let r = new Size(this.width + otherSize.width, this.height + otherSize.height);\r\n        return r;\r\n    }\r\n    /**\r\n     * Subtracts the width and height of two\r\n     * @param otherSize size to subtract to this size\r\n     * @returns a new Size set as the subtraction result of  the given one from the current Size.\r\n     */\r\n    public subtract(otherSize: Size): Size {\r\n        let r = new Size(this.width - otherSize.width, this.height - otherSize.height);\r\n        return r;\r\n    }\r\n    /**\r\n     * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n     * @param start starting size to lerp between\r\n     * @param end end size to lerp between\r\n     * @param amount amount to lerp between the start and end values\r\n     * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n     */\r\n    public static Lerp(start: Size, end: Size, amount: number): Size {\r\n        var w = start.width + ((end.width - start.width) * amount);\r\n        var h = start.height + ((end.height - start.height) * amount);\r\n\r\n        return new Size(w, h);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Class used to store quaternion data\r\n * @see https://en.wikipedia.org/wiki/Quaternion\r\n * @see http://doc.babylonjs.com/features/position,_rotation,_scaling\r\n */\r\nexport class Quaternion {\r\n\r\n    /**\r\n     * Creates a new Quaternion from the given floats\r\n     * @param x defines the first component (0 by default)\r\n     * @param y defines the second component (0 by default)\r\n     * @param z defines the third component (0 by default)\r\n     * @param w defines the fourth component (1.0 by default)\r\n     */\r\n    constructor(\r\n        /** defines the first component (0 by default) */\r\n        public x: number = 0.0,\r\n        /** defines the second component (0 by default) */\r\n        public y: number = 0.0,\r\n        /** defines the third component (0 by default) */\r\n        public z: number = 0.0,\r\n        /** defines the fourth component (1.0 by default) */\r\n        public w: number = 1.0) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation for the current quaternion\r\n     * @returns a string with the Quaternion coordinates\r\n     */\r\n    public toString(): string {\r\n        return \"{X: \" + this.x + \" Y:\" + this.y + \" Z:\" + this.z + \" W:\" + this.w + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the quaternion\r\n     * @returns the string \"Quaternion\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Quaternion\";\r\n    }\r\n\r\n    /**\r\n     * Gets a hash code for this quaternion\r\n     * @returns the quaternion hash code\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.x || 0;\r\n        hash = (hash * 397) ^ (this.y || 0);\r\n        hash = (hash * 397) ^ (this.z || 0);\r\n        hash = (hash * 397) ^ (this.w || 0);\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n     * Copy the quaternion to an array\r\n     * @returns a new array populated with 4 elements from the quaternion coordinates\r\n     */\r\n    public asArray(): number[] {\r\n        return [this.x, this.y, this.z, this.w];\r\n    }\r\n    /**\r\n     * Check if two quaternions are equals\r\n     * @param otherQuaternion defines the second operand\r\n     * @return true if the current quaternion and the given one coordinates are strictly equals\r\n     */\r\n    public equals(otherQuaternion: DeepImmutable<Quaternion>): boolean {\r\n        return otherQuaternion && this.x === otherQuaternion.x && this.y === otherQuaternion.y && this.z === otherQuaternion.z && this.w === otherQuaternion.w;\r\n    }\r\n\r\n    /**\r\n     * Clone the current quaternion\r\n     * @returns a new quaternion copied from the current one\r\n     */\r\n    public clone(): Quaternion {\r\n        return new Quaternion(this.x, this.y, this.z, this.w);\r\n    }\r\n\r\n    /**\r\n     * Copy a quaternion to the current one\r\n     * @param other defines the other quaternion\r\n     * @returns the updated current quaternion\r\n     */\r\n    public copyFrom(other: DeepImmutable<Quaternion>): Quaternion {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        this.z = other.z;\r\n        this.w = other.w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the current quaternion with the given float coordinates\r\n     * @param x defines the x coordinate\r\n     * @param y defines the y coordinate\r\n     * @param z defines the z coordinate\r\n     * @param w defines the w coordinate\r\n     * @returns the updated current quaternion\r\n     */\r\n    public copyFromFloats(x: number, y: number, z: number, w: number): Quaternion {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the current quaternion from the given float coordinates\r\n     * @param x defines the x coordinate\r\n     * @param y defines the y coordinate\r\n     * @param z defines the z coordinate\r\n     * @param w defines the w coordinate\r\n     * @returns the updated current quaternion\r\n     */\r\n    public set(x: number, y: number, z: number, w: number): Quaternion {\r\n        return this.copyFromFloats(x, y, z, w);\r\n    }\r\n\r\n    /**\r\n     * Adds two quaternions\r\n     * @param other defines the second operand\r\n     * @returns a new quaternion as the addition result of the given one and the current quaternion\r\n     */\r\n    public add(other: DeepImmutable<Quaternion>): Quaternion {\r\n        return new Quaternion(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);\r\n    }\r\n\r\n    /**\r\n     * Add a quaternion to the current one\r\n     * @param other defines the quaternion to add\r\n     * @returns the current quaternion\r\n     */\r\n    public addInPlace(other: DeepImmutable<Quaternion>): Quaternion {\r\n        this.x += other.x;\r\n        this.y += other.y;\r\n        this.z += other.z;\r\n        this.w += other.w;\r\n        return this;\r\n    }\r\n    /**\r\n     * Subtract two quaternions\r\n     * @param other defines the second operand\r\n     * @returns a new quaternion as the subtraction result of the given one from the current one\r\n     */\r\n    public subtract(other: Quaternion): Quaternion {\r\n        return new Quaternion(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current quaternion by a scale factor\r\n     * @param value defines the scale factor\r\n     * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\r\n     */\r\n    public scale(value: number): Quaternion {\r\n        return new Quaternion(this.x * value, this.y * value, this.z * value, this.w * value);\r\n    }\r\n\r\n    /**\r\n     * Scale the current quaternion values by a factor and stores the result to a given quaternion\r\n     * @param scale defines the scale factor\r\n     * @param result defines the Quaternion object where to store the result\r\n     * @returns the unmodified current quaternion\r\n     */\r\n    public scaleToRef(scale: number, result: Quaternion): Quaternion {\r\n        result.x = this.x * scale;\r\n        result.y = this.y * scale;\r\n        result.z = this.z * scale;\r\n        result.w = this.w * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies in place the current quaternion by a scale factor\r\n     * @param value defines the scale factor\r\n     * @returns the current modified quaternion\r\n     */\r\n    public scaleInPlace(value: number): Quaternion {\r\n        this.x *= value;\r\n        this.y *= value;\r\n        this.z *= value;\r\n        this.w *= value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current quaternion values by a factor and add the result to a given quaternion\r\n     * @param scale defines the scale factor\r\n     * @param result defines the Quaternion object where to store the result\r\n     * @returns the unmodified current quaternion\r\n     */\r\n    public scaleAndAddToRef(scale: number, result: Quaternion): Quaternion {\r\n        result.x += this.x * scale;\r\n        result.y += this.y * scale;\r\n        result.z += this.z * scale;\r\n        result.w += this.w * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies two quaternions\r\n     * @param q1 defines the second operand\r\n     * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\r\n     */\r\n    public multiply(q1: DeepImmutable<Quaternion>): Quaternion {\r\n        var result = new Quaternion(0, 0, 0, 1.0);\r\n        this.multiplyToRef(q1, result);\r\n        return result;\r\n    }\r\n    /**\r\n     * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\r\n     * @param q1 defines the second operand\r\n     * @param result defines the target quaternion\r\n     * @returns the current quaternion\r\n     */\r\n    public multiplyToRef(q1: DeepImmutable<Quaternion>, result: Quaternion): Quaternion {\r\n        var x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;\r\n        var y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;\r\n        var z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;\r\n        var w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;\r\n        result.copyFromFloats(x, y, z, w);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\r\n     * @param q1 defines the second operand\r\n     * @returns the currentupdated quaternion\r\n     */\r\n    public multiplyInPlace(q1: DeepImmutable<Quaternion>): Quaternion {\r\n        this.multiplyToRef(q1, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\r\n     * @param ref defines the target quaternion\r\n     * @returns the current quaternion\r\n     */\r\n    public conjugateToRef(ref: Quaternion): Quaternion {\r\n        ref.copyFromFloats(-this.x, -this.y, -this.z, this.w);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Conjugates in place (1-q) the current quaternion\r\n     * @returns the current updated quaternion\r\n     */\r\n    public conjugateInPlace(): Quaternion {\r\n        this.x *= -1;\r\n        this.y *= -1;\r\n        this.z *= -1;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Conjugates in place (1-q) the current quaternion\r\n     * @returns a new quaternion\r\n     */\r\n    public conjugate(): Quaternion {\r\n        var result = new Quaternion(-this.x, -this.y, -this.z, this.w);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets length of current quaternion\r\n     * @returns the quaternion length (float)\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt((this.x * this.x) + (this.y * this.y) + (this.z * this.z) + (this.w * this.w));\r\n    }\r\n\r\n    /**\r\n     * Normalize in place the current quaternion\r\n     * @returns the current updated quaternion\r\n     */\r\n    public normalize(): Quaternion {\r\n        var len = this.length();\r\n\r\n        if (len === 0) {\r\n            return this;\r\n        }\r\n\r\n        var inv = 1.0 / len;\r\n        this.x *= inv;\r\n        this.y *= inv;\r\n        this.z *= inv;\r\n        this.w *= inv;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the Euler angles translated from the current quaternion\r\n     * @param order is a reserved parameter and is ignore for now\r\n     * @returns a new Vector3 containing the Euler angles\r\n     */\r\n    public toEulerAngles(order = \"YZX\"): Vector3 {\r\n        var result = Vector3.Zero();\r\n        this.toEulerAnglesToRef(result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the given vector3 \"result\" with the Euler angles translated from the current quaternion\r\n     * @param result defines the vector which will be filled with the Euler angles\r\n     * @param order is a reserved parameter and is ignore for now\r\n     * @returns the current unchanged quaternion\r\n     */\r\n    public toEulerAnglesToRef(result: Vector3): Quaternion {\r\n\r\n        var qz = this.z;\r\n        var qx = this.x;\r\n        var qy = this.y;\r\n        var qw = this.w;\r\n\r\n        var sqw = qw * qw;\r\n        var sqz = qz * qz;\r\n        var sqx = qx * qx;\r\n        var sqy = qy * qy;\r\n\r\n        var zAxisY = qy * qz - qx * qw;\r\n        var limit = .4999999;\r\n\r\n        if (zAxisY < -limit) {\r\n            result.y = 2 * Math.atan2(qy, qw);\r\n            result.x = Math.PI / 2;\r\n            result.z = 0;\r\n        } else if (zAxisY > limit) {\r\n            result.y = 2 * Math.atan2(qy, qw);\r\n            result.x = -Math.PI / 2;\r\n            result.z = 0;\r\n        } else {\r\n            result.z = Math.atan2(2.0 * (qx * qy + qz * qw), (-sqz - sqx + sqy + sqw));\r\n            result.x = Math.asin(-2.0 * (qz * qy - qx * qw));\r\n            result.y = Math.atan2(2.0 * (qz * qx + qy * qw), (sqz - sqx - sqy + sqw));\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    /**\r\n     * Updates the given rotation matrix with the current quaternion values\r\n     * @param result defines the target matrix\r\n     * @returns the current unchanged quaternion\r\n     */\r\n    public toRotationMatrix(result: Matrix): Quaternion {\r\n        Matrix.FromQuaternionToRef(this, result);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the current quaternion from the given rotation matrix values\r\n     * @param matrix defines the source matrix\r\n     * @returns the current updated quaternion\r\n     */\r\n    public fromRotationMatrix(matrix: DeepImmutable<Matrix>): Quaternion {\r\n        Quaternion.FromRotationMatrixToRef(matrix, this);\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new quaternion from a rotation matrix\r\n     * @param matrix defines the source matrix\r\n     * @returns a new quaternion created from the given rotation matrix values\r\n     */\r\n    public static FromRotationMatrix(matrix: DeepImmutable<Matrix>): Quaternion {\r\n        var result = new Quaternion();\r\n        Quaternion.FromRotationMatrixToRef(matrix, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Updates the given quaternion with the given rotation matrix values\r\n     * @param matrix defines the source matrix\r\n     * @param result defines the target quaternion\r\n     */\r\n    public static FromRotationMatrixToRef(matrix: DeepImmutable<Matrix>, result: Quaternion): void {\r\n        var data = matrix.m;\r\n        var m11 = data[0], m12 = data[4], m13 = data[8];\r\n        var m21 = data[1], m22 = data[5], m23 = data[9];\r\n        var m31 = data[2], m32 = data[6], m33 = data[10];\r\n        var trace = m11 + m22 + m33;\r\n        var s;\r\n\r\n        if (trace > 0) {\r\n\r\n            s = 0.5 / Math.sqrt(trace + 1.0);\r\n\r\n            result.w = 0.25 / s;\r\n            result.x = (m32 - m23) * s;\r\n            result.y = (m13 - m31) * s;\r\n            result.z = (m21 - m12) * s;\r\n        } else if (m11 > m22 && m11 > m33) {\r\n\r\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\r\n\r\n            result.w = (m32 - m23) / s;\r\n            result.x = 0.25 * s;\r\n            result.y = (m12 + m21) / s;\r\n            result.z = (m13 + m31) / s;\r\n        } else if (m22 > m33) {\r\n\r\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\r\n\r\n            result.w = (m13 - m31) / s;\r\n            result.x = (m12 + m21) / s;\r\n            result.y = 0.25 * s;\r\n            result.z = (m23 + m32) / s;\r\n        } else {\r\n\r\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\r\n\r\n            result.w = (m21 - m12) / s;\r\n            result.x = (m13 + m31) / s;\r\n            result.y = (m23 + m32) / s;\r\n            result.z = 0.25 * s;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the dot product (float) between the quaternions \"left\" and \"right\"\r\n     * @param left defines the left operand\r\n     * @param right defines the right operand\r\n     * @returns the dot product\r\n     */\r\n    public static Dot(left: DeepImmutable<Quaternion>, right: DeepImmutable<Quaternion>): number {\r\n        return (left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w);\r\n    }\r\n\r\n    /**\r\n     * Checks if the two quaternions are close to each other\r\n     * @param quat0 defines the first quaternion to check\r\n     * @param quat1 defines the second quaternion to check\r\n     * @returns true if the two quaternions are close to each other\r\n     */\r\n    public static AreClose(quat0: DeepImmutable<Quaternion>, quat1: DeepImmutable<Quaternion>): boolean {\r\n        let dot = Quaternion.Dot(quat0, quat1);\r\n\r\n        return dot >= 0;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty quaternion\r\n     * @returns a new quaternion set to (0.0, 0.0, 0.0)\r\n     */\r\n    public static Zero(): Quaternion {\r\n        return new Quaternion(0.0, 0.0, 0.0, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Inverse a given quaternion\r\n     * @param q defines the source quaternion\r\n     * @returns a new quaternion as the inverted current quaternion\r\n     */\r\n    public static Inverse(q: DeepImmutable<Quaternion>): Quaternion {\r\n        return new Quaternion(-q.x, -q.y, -q.z, q.w);\r\n    }\r\n\r\n    /**\r\n     * Inverse a given quaternion\r\n     * @param q defines the source quaternion\r\n     * @param result the quaternion the result will be stored in\r\n     * @returns the result quaternion\r\n     */\r\n    public static InverseToRef(q: Quaternion, result: Quaternion): Quaternion {\r\n        result.set(-q.x, -q.y, -q.z, q.w);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates an identity quaternion\r\n     * @returns the identity quaternion\r\n     */\r\n    public static Identity(): Quaternion {\r\n        return new Quaternion(0.0, 0.0, 0.0, 1.0);\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given quaternion is identity\r\n     * @param quaternion defines the quaternion to check\r\n     * @returns true if the quaternion is identity\r\n     */\r\n    public static IsIdentity(quaternion: DeepImmutable<Quaternion>): boolean {\r\n        return quaternion && quaternion.x === 0 && quaternion.y === 0 && quaternion.z === 0 && quaternion.w === 1;\r\n    }\r\n\r\n    /**\r\n     * Creates a quaternion from a rotation around an axis\r\n     * @param axis defines the axis to use\r\n     * @param angle defines the angle to use\r\n     * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\r\n     */\r\n    public static RotationAxis(axis: DeepImmutable<Vector3>, angle: number): Quaternion {\r\n        return Quaternion.RotationAxisToRef(axis, angle, new Quaternion());\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation around an axis and stores it into the given quaternion\r\n     * @param axis defines the axis to use\r\n     * @param angle defines the angle to use\r\n     * @param result defines the target quaternion\r\n     * @returns the target quaternion\r\n     */\r\n    public static RotationAxisToRef(axis: DeepImmutable<Vector3>, angle: number, result: Quaternion): Quaternion {\r\n        var sin = Math.sin(angle / 2);\r\n        axis.normalize();\r\n        result.w = Math.cos(angle / 2);\r\n        result.x = axis.x * sin;\r\n        result.y = axis.y * sin;\r\n        result.z = axis.z * sin;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new quaternion from data stored into an array\r\n     * @param array defines the data source\r\n     * @param offset defines the offset in the source array where the data starts\r\n     * @returns a new quaternion\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset?: number): Quaternion {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\r\n    }\r\n\r\n    /**\r\n     * Create a quaternion from Euler rotation angles\r\n     * @param x Pitch\r\n     * @param y Yaw\r\n     * @param z Roll\r\n     * @returns the new Quaternion\r\n     */\r\n    public static FromEulerAngles(x: number, y: number, z: number): Quaternion {\r\n        var q = new Quaternion();\r\n        Quaternion.RotationYawPitchRollToRef(y, x, z, q);\r\n        return q;\r\n    }\r\n\r\n    /**\r\n     * Updates a quaternion from Euler rotation angles\r\n     * @param x Pitch\r\n     * @param y Yaw\r\n     * @param z Roll\r\n     * @param result the quaternion to store the result\r\n     * @returns the updated quaternion\r\n     */\r\n    public static FromEulerAnglesToRef(x: number, y: number, z: number, result: Quaternion): Quaternion {\r\n        Quaternion.RotationYawPitchRollToRef(y, x, z, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a quaternion from Euler rotation vector\r\n     * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\r\n     * @returns the new Quaternion\r\n     */\r\n    public static FromEulerVector(vec: DeepImmutable<Vector3>): Quaternion {\r\n        var q = new Quaternion();\r\n        Quaternion.RotationYawPitchRollToRef(vec.y, vec.x, vec.z, q);\r\n        return q;\r\n    }\r\n\r\n    /**\r\n     * Updates a quaternion from Euler rotation vector\r\n     * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\r\n     * @param result the quaternion to store the result\r\n     * @returns the updated quaternion\r\n     */\r\n    public static FromEulerVectorToRef(vec: DeepImmutable<Vector3>, result: Quaternion): Quaternion {\r\n        Quaternion.RotationYawPitchRollToRef(vec.y, vec.x, vec.z, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new quaternion from the given Euler float angles (y, x, z)\r\n     * @param yaw defines the rotation around Y axis\r\n     * @param pitch defines the rotation around X axis\r\n     * @param roll defines the rotation around Z axis\r\n     * @returns the new quaternion\r\n     */\r\n    public static RotationYawPitchRoll(yaw: number, pitch: number, roll: number): Quaternion {\r\n        var q = new Quaternion();\r\n        Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\r\n        return q;\r\n    }\r\n\r\n    /**\r\n     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\r\n     * @param yaw defines the rotation around Y axis\r\n     * @param pitch defines the rotation around X axis\r\n     * @param roll defines the rotation around Z axis\r\n     * @param result defines the target quaternion\r\n     */\r\n    public static RotationYawPitchRollToRef(yaw: number, pitch: number, roll: number, result: Quaternion): void {\r\n        // Produces a quaternion from Euler angles in the z-y-x orientation (Tait-Bryan angles)\r\n        var halfRoll = roll * 0.5;\r\n        var halfPitch = pitch * 0.5;\r\n        var halfYaw = yaw * 0.5;\r\n\r\n        var sinRoll = Math.sin(halfRoll);\r\n        var cosRoll = Math.cos(halfRoll);\r\n        var sinPitch = Math.sin(halfPitch);\r\n        var cosPitch = Math.cos(halfPitch);\r\n        var sinYaw = Math.sin(halfYaw);\r\n        var cosYaw = Math.cos(halfYaw);\r\n\r\n        result.x = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\r\n        result.y = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\r\n        result.z = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\r\n        result.w = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\r\n    }\r\n\r\n    /**\r\n     * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\r\n     * @param alpha defines the rotation around first axis\r\n     * @param beta defines the rotation around second axis\r\n     * @param gamma defines the rotation around third axis\r\n     * @returns the new quaternion\r\n     */\r\n    public static RotationAlphaBetaGamma(alpha: number, beta: number, gamma: number): Quaternion {\r\n        var result = new Quaternion();\r\n        Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\r\n     * @param alpha defines the rotation around first axis\r\n     * @param beta defines the rotation around second axis\r\n     * @param gamma defines the rotation around third axis\r\n     * @param result defines the target quaternion\r\n     */\r\n    public static RotationAlphaBetaGammaToRef(alpha: number, beta: number, gamma: number, result: Quaternion): void {\r\n        // Produces a quaternion from Euler angles in the z-x-z orientation\r\n        var halfGammaPlusAlpha = (gamma + alpha) * 0.5;\r\n        var halfGammaMinusAlpha = (gamma - alpha) * 0.5;\r\n        var halfBeta = beta * 0.5;\r\n\r\n        result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\r\n        result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\r\n        result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\r\n        result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\r\n    }\r\n\r\n    /**\r\n     * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\r\n     * @param axis1 defines the first axis\r\n     * @param axis2 defines the second axis\r\n     * @param axis3 defines the third axis\r\n     * @returns the new quaternion\r\n     */\r\n    public static RotationQuaternionFromAxis(axis1: DeepImmutable<Vector3>, axis2: DeepImmutable<Vector3>, axis3: DeepImmutable<Vector3>): Quaternion {\r\n        var quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\r\n        Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\r\n        return quat;\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\r\n     * @param axis1 defines the first axis\r\n     * @param axis2 defines the second axis\r\n     * @param axis3 defines the third axis\r\n     * @param ref defines the target quaternion\r\n     */\r\n    public static RotationQuaternionFromAxisToRef(axis1: DeepImmutable<Vector3>, axis2: DeepImmutable<Vector3>, axis3: DeepImmutable<Vector3>, ref: Quaternion): void {\r\n        var rotMat = MathTmp.Matrix[0];\r\n        Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\r\n        Quaternion.FromRotationMatrixToRef(rotMat, ref);\r\n    }\r\n\r\n    /**\r\n     * Interpolates between two quaternions\r\n     * @param left defines first quaternion\r\n     * @param right defines second quaternion\r\n     * @param amount defines the gradient to use\r\n     * @returns the new interpolated quaternion\r\n     */\r\n    public static Slerp(left: DeepImmutable<Quaternion>, right: DeepImmutable<Quaternion>, amount: number): Quaternion {\r\n        var result = Quaternion.Identity();\r\n\r\n        Quaternion.SlerpToRef(left, right, amount, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Interpolates between two quaternions and stores it into a target quaternion\r\n     * @param left defines first quaternion\r\n     * @param right defines second quaternion\r\n     * @param amount defines the gradient to use\r\n     * @param result defines the target quaternion\r\n     */\r\n    public static SlerpToRef(left: DeepImmutable<Quaternion>, right: DeepImmutable<Quaternion>, amount: number, result: Quaternion): void {\r\n        var num2;\r\n        var num3;\r\n        var num4 = (((left.x * right.x) + (left.y * right.y)) + (left.z * right.z)) + (left.w * right.w);\r\n        var flag = false;\r\n\r\n        if (num4 < 0) {\r\n            flag = true;\r\n            num4 = -num4;\r\n        }\r\n\r\n        if (num4 > 0.999999) {\r\n            num3 = 1 - amount;\r\n            num2 = flag ? -amount : amount;\r\n        }\r\n        else {\r\n            var num5 = Math.acos(num4);\r\n            var num6 = (1.0 / Math.sin(num5));\r\n            num3 = (Math.sin((1.0 - amount) * num5)) * num6;\r\n            num2 = flag ? ((-Math.sin(amount * num5)) * num6) : ((Math.sin(amount * num5)) * num6);\r\n        }\r\n\r\n        result.x = (num3 * left.x) + (num2 * right.x);\r\n        result.y = (num3 * left.y) + (num2 * right.y);\r\n        result.z = (num3 * left.z) + (num2 * right.z);\r\n        result.w = (num3 * left.w) + (num2 * right.w);\r\n    }\r\n\r\n    /**\r\n     * Interpolate between two quaternions using Hermite interpolation\r\n     * @param value1 defines first quaternion\r\n     * @param tangent1 defines the incoming tangent\r\n     * @param value2 defines second quaternion\r\n     * @param tangent2 defines the outgoing tangent\r\n     * @param amount defines the target quaternion\r\n     * @returns the new interpolated quaternion\r\n     */\r\n    public static Hermite(value1: DeepImmutable<Quaternion>, tangent1: DeepImmutable<Quaternion>, value2: DeepImmutable<Quaternion>, tangent2: DeepImmutable<Quaternion>, amount: number): Quaternion {\r\n        var squared = amount * amount;\r\n        var cubed = amount * squared;\r\n        var part1 = ((2.0 * cubed) - (3.0 * squared)) + 1.0;\r\n        var part2 = (-2.0 * cubed) + (3.0 * squared);\r\n        var part3 = (cubed - (2.0 * squared)) + amount;\r\n        var part4 = cubed - squared;\r\n\r\n        var x = (((value1.x * part1) + (value2.x * part2)) + (tangent1.x * part3)) + (tangent2.x * part4);\r\n        var y = (((value1.y * part1) + (value2.y * part2)) + (tangent1.y * part3)) + (tangent2.y * part4);\r\n        var z = (((value1.z * part1) + (value2.z * part2)) + (tangent1.z * part3)) + (tangent2.z * part4);\r\n        var w = (((value1.w * part1) + (value2.w * part2)) + (tangent1.w * part3)) + (tangent2.w * part4);\r\n        return new Quaternion(x, y, z, w);\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to store matrix data (4x4)\r\n */\r\nexport class Matrix {\r\n    private static _updateFlagSeed = 0;\r\n    private static _identityReadOnly = Matrix.Identity() as DeepImmutable<Matrix>;\r\n\r\n    private _isIdentity = false;\r\n    private _isIdentityDirty = true;\r\n    private _isIdentity3x2 = true;\r\n    private _isIdentity3x2Dirty = true;\r\n    /**\r\n     * Gets the update flag of the matrix which is an unique number for the matrix.\r\n     * It will be incremented every time the matrix data change.\r\n     * You can use it to speed the comparison between two versions of the same matrix.\r\n     */\r\n    public updateFlag: number = -1;\r\n\r\n    private readonly _m: Float32Array = new Float32Array(16);\r\n\r\n    /**\r\n     * Gets the internal data of the matrix\r\n     */\r\n    public get m(): DeepImmutable<Float32Array> { return this._m; }\r\n\r\n    /** @hidden */\r\n    public _markAsUpdated() {\r\n        this.updateFlag = Matrix._updateFlagSeed++;\r\n        this._isIdentity = false;\r\n        this._isIdentity3x2 = false;\r\n        this._isIdentityDirty = true;\r\n        this._isIdentity3x2Dirty = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _updateIdentityStatus(isIdentity: boolean, isIdentityDirty: boolean = false, isIdentity3x2: boolean = false, isIdentity3x2Dirty: boolean = true) {\r\n        this.updateFlag = Matrix._updateFlagSeed++;\r\n        this._isIdentity = isIdentity;\r\n        this._isIdentity3x2 = isIdentity || isIdentity3x2;\r\n        this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\r\n        this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty matrix (filled with zeros)\r\n     */\r\n    public constructor() {\r\n        this._updateIdentityStatus(false);\r\n    }\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Check if the current matrix is identity\r\n     * @returns true is the matrix is the identity matrix\r\n     */\r\n    public isIdentity(): boolean {\r\n        if (this._isIdentityDirty) {\r\n            this._isIdentityDirty = false;\r\n            const m = this._m;\r\n            this._isIdentity = (\r\n                m[0] === 1.0 && m[1] === 0.0 && m[2] === 0.0 && m[3] === 0.0 &&\r\n                m[4] === 0.0 && m[5] === 1.0 && m[6] === 0.0 && m[7] === 0.0 &&\r\n                m[8] === 0.0 && m[9] === 0.0 && m[10] === 1.0 && m[11] === 0.0 &&\r\n                m[12] === 0.0 && m[13] === 0.0 && m[14] === 0.0 && m[15] === 1.0\r\n            );\r\n        }\r\n\r\n        return this._isIdentity;\r\n    }\r\n\r\n    /**\r\n     * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\r\n     * @returns true is the matrix is the identity matrix\r\n     */\r\n    public isIdentityAs3x2(): boolean {\r\n        if (this._isIdentity3x2Dirty) {\r\n            this._isIdentity3x2Dirty = false;\r\n            if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\r\n                this._isIdentity3x2 = false;\r\n            } else if (this._m[1] !== 0.0 || this._m[2] !== 0.0 || this._m[3] !== 0.0 ||\r\n                this._m[4] !== 0.0 || this._m[6] !== 0.0 || this._m[7] !== 0.0 ||\r\n                this._m[8] !== 0.0 || this._m[9] !== 0.0 || this._m[10] !== 0.0 || this._m[11] !== 0.0 ||\r\n                this._m[12] !== 0.0 || this._m[13] !== 0.0 || this._m[14] !== 0.0) {\r\n                this._isIdentity3x2 = false;\r\n            } else {\r\n                this._isIdentity3x2 = true;\r\n            }\r\n        }\r\n\r\n        return this._isIdentity3x2;\r\n    }\r\n\r\n    /**\r\n     * Gets the determinant of the matrix\r\n     * @returns the matrix determinant\r\n     */\r\n    public determinant(): number {\r\n        if (this._isIdentity === true) {\r\n            return 1;\r\n        }\r\n\r\n        const m = this._m;\r\n        const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\r\n        const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\r\n        const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\r\n        const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\r\n        // https://en.wikipedia.org/wiki/Laplace_expansion\r\n        // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\r\n        // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\r\n        // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\r\n        // where\r\n        //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\r\n        //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\r\n        //\r\n        // Here we do that for the 1st row.\r\n\r\n        const det_22_33 = m22 * m33 - m32 * m23;\r\n        const det_21_33 = m21 * m33 - m31 * m23;\r\n        const det_21_32 = m21 * m32 - m31 * m22;\r\n        const det_20_33 = m20 * m33 - m30 * m23;\r\n        const det_20_32 = m20 * m32 - m22 * m30;\r\n        const det_20_31 = m20 * m31 - m30 * m21;\r\n        const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\r\n        const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\r\n        const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\r\n        const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\r\n        return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Returns the matrix as a Float32Array\r\n     * @returns the matrix underlying array\r\n     */\r\n    public toArray(): DeepImmutable<Float32Array> {\r\n        return this._m;\r\n    }\r\n    /**\r\n     * Returns the matrix as a Float32Array\r\n    * @returns the matrix underlying array.\r\n    */\r\n    public asArray(): DeepImmutable<Float32Array> {\r\n        return this._m;\r\n    }\r\n\r\n    /**\r\n     * Inverts the current matrix in place\r\n     * @returns the current inverted matrix\r\n     */\r\n    public invert(): Matrix {\r\n        this.invertToRef(this);\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets all the matrix elements to zero\r\n     * @returns the current matrix\r\n     */\r\n    public reset(): Matrix {\r\n        Matrix.FromValuesToRef(\r\n            0.0, 0.0, 0.0, 0.0,\r\n            0.0, 0.0, 0.0, 0.0,\r\n            0.0, 0.0, 0.0, 0.0,\r\n            0.0, 0.0, 0.0, 0.0,\r\n            this\r\n        );\r\n        this._updateIdentityStatus(false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the current matrix with a second one\r\n     * @param other defines the matrix to add\r\n     * @returns a new matrix as the addition of the current matrix and the given one\r\n     */\r\n    public add(other: DeepImmutable<Matrix>): Matrix {\r\n        var result = new Matrix();\r\n        this.addToRef(other, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the given matrix \"result\" to the addition of the current matrix and the given one\r\n     * @param other defines the matrix to add\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public addToRef(other: DeepImmutable<Matrix>, result: Matrix): Matrix {\r\n        const m = this._m;\r\n        const resultM = result._m;\r\n        const otherM = other.m;\r\n        for (var index = 0; index < 16; index++) {\r\n            resultM[index] = m[index] + otherM[index];\r\n        }\r\n        result._markAsUpdated();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds in place the given matrix to the current matrix\r\n     * @param other defines the second operand\r\n     * @returns the current updated matrix\r\n     */\r\n    public addToSelf(other: DeepImmutable<Matrix>): Matrix {\r\n        const m = this._m;\r\n        const otherM = other.m;\r\n        for (var index = 0; index < 16; index++) {\r\n            m[index] += otherM[index];\r\n        }\r\n        this._markAsUpdated();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the given matrix to the current inverted Matrix\r\n     * @param other defines the target matrix\r\n     * @returns the unmodified current matrix\r\n     */\r\n    public invertToRef(other: Matrix): Matrix {\r\n        if (this._isIdentity === true) {\r\n            Matrix.IdentityToRef(other);\r\n            return this;\r\n        }\r\n\r\n        // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\r\n        const m = this._m;\r\n        const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\r\n        const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\r\n        const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\r\n        const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\r\n\r\n        const det_22_33 = m22 * m33 - m32 * m23;\r\n        const det_21_33 = m21 * m33 - m31 * m23;\r\n        const det_21_32 = m21 * m32 - m31 * m22;\r\n        const det_20_33 = m20 * m33 - m30 * m23;\r\n        const det_20_32 = m20 * m32 - m22 * m30;\r\n        const det_20_31 = m20 * m31 - m30 * m21;\r\n\r\n        const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\r\n        const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\r\n        const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\r\n        const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\r\n\r\n        const det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\r\n\r\n        if (det === 0) {\r\n            // not invertible\r\n            other.copyFrom(this);\r\n            return this;\r\n        }\r\n\r\n        const detInv = 1 / det;\r\n        const det_12_33 = m12 * m33 - m32 * m13;\r\n        const det_11_33 = m11 * m33 - m31 * m13;\r\n        const det_11_32 = m11 * m32 - m31 * m12;\r\n        const det_10_33 = m10 * m33 - m30 * m13;\r\n        const det_10_32 = m10 * m32 - m30 * m12;\r\n        const det_10_31 = m10 * m31 - m30 * m11;\r\n        const det_12_23 = m12 * m23 - m22 * m13;\r\n        const det_11_23 = m11 * m23 - m21 * m13;\r\n        const det_11_22 = m11 * m22 - m21 * m12;\r\n        const det_10_23 = m10 * m23 - m20 * m13;\r\n        const det_10_22 = m10 * m22 - m20 * m12;\r\n        const det_10_21 = m10 * m21 - m20 * m11;\r\n\r\n        const cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\r\n        const cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\r\n        const cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\r\n        const cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\r\n\r\n        const cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\r\n        const cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\r\n        const cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\r\n        const cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\r\n\r\n        const cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\r\n        const cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\r\n        const cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\r\n        const cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\r\n\r\n        Matrix.FromValuesToRef(\r\n            cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv,\r\n            cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv,\r\n            cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv,\r\n            cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv,\r\n            other\r\n        );\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * add a value at the specified position in the current Matrix\r\n     * @param index the index of the value within the matrix. between 0 and 15.\r\n     * @param value the value to be added\r\n     * @returns the current updated matrix\r\n     */\r\n    public addAtIndex(index: number, value: number): Matrix {\r\n        this._m[index] += value;\r\n        this._markAsUpdated();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * mutiply the specified position in the current Matrix by a value\r\n     * @param index the index of the value within the matrix. between 0 and 15.\r\n     * @param value the value to be added\r\n     * @returns the current updated matrix\r\n     */\r\n    public multiplyAtIndex(index: number, value: number): Matrix {\r\n        this._m[index] *= value;\r\n        this._markAsUpdated();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Inserts the translation vector (using 3 floats) in the current matrix\r\n     * @param x defines the 1st component of the translation\r\n     * @param y defines the 2nd component of the translation\r\n     * @param z defines the 3rd component of the translation\r\n     * @returns the current updated matrix\r\n     */\r\n    public setTranslationFromFloats(x: number, y: number, z: number): Matrix {\r\n        this._m[12] = x;\r\n        this._m[13] = y;\r\n        this._m[14] = z;\r\n        this._markAsUpdated();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the translation vector (using 3 floats) in the current matrix\r\n     * @param x defines the 1st component of the translation\r\n     * @param y defines the 2nd component of the translation\r\n     * @param z defines the 3rd component of the translation\r\n     * @returns the current updated matrix\r\n     */\r\n    public addTranslationFromFloats(x: number, y: number, z: number): Matrix {\r\n        this._m[12] += x;\r\n        this._m[13] += y;\r\n        this._m[14] += z;\r\n        this._markAsUpdated();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Inserts the translation vector in the current matrix\r\n     * @param vector3 defines the translation to insert\r\n     * @returns the current updated matrix\r\n     */\r\n    public setTranslation(vector3: DeepImmutable<Vector3>): Matrix {\r\n        return this.setTranslationFromFloats(vector3.x, vector3.y, vector3.z);\r\n    }\r\n\r\n    /**\r\n     * Gets the translation value of the current matrix\r\n     * @returns a new Vector3 as the extracted translation from the matrix\r\n     */\r\n    public getTranslation(): Vector3 {\r\n        return new Vector3(this._m[12], this._m[13], this._m[14]);\r\n    }\r\n\r\n    /**\r\n     * Fill a Vector3 with the extracted translation from the matrix\r\n     * @param result defines the Vector3 where to store the translation\r\n     * @returns the current matrix\r\n     */\r\n    public getTranslationToRef(result: Vector3): Matrix {\r\n        result.x = this._m[12];\r\n        result.y = this._m[13];\r\n        result.z = this._m[14];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove rotation and scaling part from the matrix\r\n     * @returns the updated matrix\r\n     */\r\n    public removeRotationAndScaling(): Matrix {\r\n        const m = this.m;\r\n        Matrix.FromValuesToRef(\r\n            1.0, 0.0, 0.0, 0.0,\r\n            0.0, 1.0, 0.0, 0.0,\r\n            0.0, 0.0, 1.0, 0.0,\r\n            m[12], m[13], m[14], m[15],\r\n            this\r\n        );\r\n        this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiply two matrices\r\n     * @param other defines the second operand\r\n     * @returns a new matrix set with the multiplication result of the current Matrix and the given one\r\n     */\r\n    public multiply(other: DeepImmutable<Matrix>): Matrix {\r\n        var result = new Matrix();\r\n        this.multiplyToRef(other, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copy the current matrix from the given one\r\n     * @param other defines the source matrix\r\n     * @returns the current updated matrix\r\n     */\r\n    public copyFrom(other: DeepImmutable<Matrix>): Matrix {\r\n        other.copyToArray(this._m);\r\n        const o = (other as Matrix);\r\n        this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Populates the given array from the starting index with the current matrix values\r\n     * @param array defines the target array\r\n     * @param offset defines the offset in the target array where to start storing values\r\n     * @returns the current matrix\r\n     */\r\n    public copyToArray(array: Float32Array, offset: number = 0): Matrix {\r\n        for (var index = 0; index < 16; index++) {\r\n            array[offset + index] = this._m[index];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\r\n     * @param other defines the second operand\r\n     * @param result defines the matrix where to store the multiplication\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: DeepImmutable<Matrix>, result: Matrix): Matrix {\r\n        if (this._isIdentity) {\r\n            result.copyFrom(other);\r\n            return this;\r\n        }\r\n        if ((other as Matrix)._isIdentity) {\r\n            result.copyFrom(this);\r\n            return this;\r\n        }\r\n\r\n        this.multiplyToArray(other, result._m, 0);\r\n        result._markAsUpdated();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the Float32Array \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\r\n     * @param other defines the second operand\r\n     * @param result defines the array where to store the multiplication\r\n     * @param offset defines the offset in the target array where to start storing values\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToArray(other: DeepImmutable<Matrix>, result: Float32Array, offset: number): Matrix {\r\n        const m = this._m;\r\n        const otherM = other.m;\r\n        var tm0 = m[0], tm1 = m[1], tm2 = m[2], tm3 = m[3];\r\n        var tm4 = m[4], tm5 = m[5], tm6 = m[6], tm7 = m[7];\r\n        var tm8 = m[8], tm9 = m[9], tm10 = m[10], tm11 = m[11];\r\n        var tm12 = m[12], tm13 = m[13], tm14 = m[14], tm15 = m[15];\r\n\r\n        var om0 = otherM[0], om1 = otherM[1], om2 = otherM[2], om3 = otherM[3];\r\n        var om4 = otherM[4], om5 = otherM[5], om6 = otherM[6], om7 = otherM[7];\r\n        var om8 = otherM[8], om9 = otherM[9], om10 = otherM[10], om11 = otherM[11];\r\n        var om12 = otherM[12], om13 = otherM[13], om14 = otherM[14], om15 = otherM[15];\r\n\r\n        result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\r\n        result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\r\n        result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\r\n        result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\r\n\r\n        result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\r\n        result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\r\n        result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\r\n        result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\r\n\r\n        result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\r\n        result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\r\n        result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\r\n        result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\r\n\r\n        result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\r\n        result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\r\n        result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\r\n        result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this matrix and a second one\r\n     * @param value defines the second matrix to compare\r\n     * @returns true is the current matrix and the given one values are strictly equal\r\n     */\r\n    public equals(value: DeepImmutable<Matrix>): boolean {\r\n        const other = (value as Matrix);\r\n        if (!other) {\r\n            return false;\r\n        }\r\n\r\n        if (this._isIdentity || other._isIdentity) {\r\n            if (!this._isIdentityDirty && !other._isIdentityDirty) {\r\n                return this._isIdentity && other._isIdentity;\r\n            }\r\n        }\r\n\r\n        const m = this.m;\r\n        const om = other.m;\r\n        return (\r\n            m[0] === om[0] && m[1] === om[1] && m[2] === om[2] && m[3] === om[3] &&\r\n            m[4] === om[4] && m[5] === om[5] && m[6] === om[6] && m[7] === om[7] &&\r\n            m[8] === om[8] && m[9] === om[9] && m[10] === om[10] && m[11] === om[11] &&\r\n            m[12] === om[12] && m[13] === om[13] && m[14] === om[14] && m[15] === om[15]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Clone the current matrix\r\n     * @returns a new matrix from the current matrix\r\n     */\r\n    public clone(): Matrix {\r\n        const matrix = new Matrix();\r\n        matrix.copyFrom(this);\r\n        return matrix;\r\n    }\r\n\r\n    /**\r\n     * Returns the name of the current matrix class\r\n     * @returns the string \"Matrix\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Matrix\";\r\n    }\r\n\r\n    /**\r\n     * Gets the hash code of the current matrix\r\n     * @returns the hash code\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this._m[0] || 0;\r\n        for (let i = 1; i < 16; i++) {\r\n            hash = (hash * 397) ^ (this._m[i] || 0);\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n     * Decomposes the current Matrix into a translation, rotation and scaling components\r\n     * @param scale defines the scale vector3 given as a reference to update\r\n     * @param rotation defines the rotation quaternion given as a reference to update\r\n     * @param translation defines the translation vector3 given as a reference to update\r\n     * @returns true if operation was successful\r\n     */\r\n    public decompose(scale?: Vector3, rotation?: Quaternion, translation?: Vector3): boolean {\r\n        if (this._isIdentity) {\r\n            if (translation) {\r\n                translation.setAll(0);\r\n            }\r\n            if (scale) {\r\n                scale.setAll(1);\r\n            }\r\n            if (rotation) {\r\n                rotation.copyFromFloats(0, 0, 0, 1);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        const m = this._m;\r\n        if (translation) {\r\n            translation.copyFromFloats(m[12], m[13], m[14]);\r\n        }\r\n\r\n        scale = scale || MathTmp.Vector3[0];\r\n        scale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\r\n        scale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\r\n        scale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\r\n\r\n        if (this.determinant() <= 0) {\r\n            scale.y *= -1;\r\n        }\r\n\r\n        if (scale.x === 0 || scale.y === 0 || scale.z === 0) {\r\n            if (rotation) {\r\n                rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\r\n            }\r\n            return false;\r\n        }\r\n\r\n        if (rotation) {\r\n            const sx = 1 / scale.x, sy = 1 / scale.y, sz = 1 / scale.z;\r\n            Matrix.FromValuesToRef(\r\n                m[0] * sx, m[1] * sx, m[2] * sx, 0.0,\r\n                m[4] * sy, m[5] * sy, m[6] * sy, 0.0,\r\n                m[8] * sz, m[9] * sz, m[10] * sz, 0.0,\r\n                0.0, 0.0, 0.0, 1.0,\r\n                MathTmp.Matrix[0]\r\n            );\r\n\r\n            Quaternion.FromRotationMatrixToRef(MathTmp.Matrix[0], rotation);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets specific row of the matrix\r\n     * @param index defines the number of the row to get\r\n     * @returns the index-th row of the current matrix as a new Vector4\r\n     */\r\n    public getRow(index: number): Nullable<Vector4> {\r\n        if (index < 0 || index > 3) {\r\n            return null;\r\n        }\r\n        var i = index * 4;\r\n        return new Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\r\n    }\r\n\r\n    /**\r\n     * Sets the index-th row of the current matrix to the vector4 values\r\n     * @param index defines the number of the row to set\r\n     * @param row defines the target vector4\r\n     * @returns the updated current matrix\r\n     */\r\n    public setRow(index: number, row: Vector4): Matrix {\r\n        return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\r\n    }\r\n\r\n    /**\r\n     * Compute the transpose of the matrix\r\n     * @returns the new transposed matrix\r\n     */\r\n    public transpose(): Matrix {\r\n        return Matrix.Transpose(this);\r\n    }\r\n\r\n    /**\r\n     * Compute the transpose of the matrix and store it in a given matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public transposeToRef(result: Matrix): Matrix {\r\n        Matrix.TransposeToRef(this, result);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the index-th row of the current matrix with the given 4 x float values\r\n     * @param index defines the row index\r\n     * @param x defines the x component to set\r\n     * @param y defines the y component to set\r\n     * @param z defines the z component to set\r\n     * @param w defines the w component to set\r\n     * @returns the updated current matrix\r\n     */\r\n    public setRowFromFloats(index: number, x: number, y: number, z: number, w: number): Matrix {\r\n        if (index < 0 || index > 3) {\r\n            return this;\r\n        }\r\n        var i = index * 4;\r\n        this._m[i + 0] = x;\r\n        this._m[i + 1] = y;\r\n        this._m[i + 2] = z;\r\n        this._m[i + 3] = w;\r\n\r\n        this._markAsUpdated();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Compute a new matrix set with the current matrix values multiplied by scale (float)\r\n     * @param scale defines the scale factor\r\n     * @returns a new matrix\r\n     */\r\n    public scale(scale: number): Matrix {\r\n        var result = new Matrix();\r\n        this.scaleToRef(scale, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Scale the current matrix values by a factor to a given result matrix\r\n     * @param scale defines the scale factor\r\n     * @param result defines the matrix to store the result\r\n     * @returns the current matrix\r\n     */\r\n    public scaleToRef(scale: number, result: Matrix): Matrix {\r\n        for (var index = 0; index < 16; index++) {\r\n            result._m[index] = this._m[index] * scale;\r\n        }\r\n        result._markAsUpdated();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current matrix values by a factor and add the result to a given matrix\r\n     * @param scale defines the scale factor\r\n     * @param result defines the Matrix to store the result\r\n     * @returns the current matrix\r\n     */\r\n    public scaleAndAddToRef(scale: number, result: Matrix): Matrix {\r\n        for (var index = 0; index < 16; index++) {\r\n            result._m[index] += this._m[index] * scale;\r\n        }\r\n        result._markAsUpdated();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\r\n     * @param ref matrix to store the result\r\n     */\r\n    public toNormalMatrix(ref: Matrix): void {\r\n        const tmp = MathTmp.Matrix[0];\r\n        this.invertToRef(tmp);\r\n        tmp.transposeToRef(ref);\r\n        var m = ref._m;\r\n        Matrix.FromValuesToRef(\r\n            m[0], m[1], m[2], 0.0,\r\n            m[4], m[5], m[6], 0.0,\r\n            m[8], m[9], m[10], 0.0,\r\n            0.0, 0.0, 0.0, 1.0,\r\n            ref\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets only rotation part of the current matrix\r\n     * @returns a new matrix sets to the extracted rotation matrix from the current one\r\n     */\r\n    public getRotationMatrix(): Matrix {\r\n        var result = new Matrix();\r\n        this.getRotationMatrixToRef(result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Extracts the rotation matrix from the current one and sets it as the given \"result\"\r\n     * @param result defines the target matrix to store data to\r\n     * @returns the current matrix\r\n     */\r\n    public getRotationMatrixToRef(result: Matrix): Matrix {\r\n        const scale = MathTmp.Vector3[0];\r\n        if (!this.decompose(scale)) {\r\n            Matrix.IdentityToRef(result);\r\n            return this;\r\n        }\r\n\r\n        const m = this._m;\r\n        const sx = 1 / scale.x, sy = 1 / scale.y, sz = 1 / scale.z;\r\n        Matrix.FromValuesToRef(\r\n            m[0] * sx, m[1] * sx, m[2] * sx, 0.0,\r\n            m[4] * sy, m[5] * sy, m[6] * sy, 0.0,\r\n            m[8] * sz, m[9] * sz, m[10] * sz, 0.0,\r\n            0.0, 0.0, 0.0, 1.0,\r\n            result\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Toggles model matrix from being right handed to left handed in place and vice versa\r\n     */\r\n    public toggleModelMatrixHandInPlace() {\r\n        const m = this._m;\r\n        m[2] *= -1;\r\n        m[6] *= -1;\r\n        m[8] *= -1;\r\n        m[9] *= -1;\r\n        m[14] *= -1;\r\n        this._markAsUpdated();\r\n    }\r\n\r\n    /**\r\n     * Toggles projection matrix from being right handed to left handed in place and vice versa\r\n     */\r\n    public toggleProjectionMatrixHandInPlace() {\r\n        var m = this._m;\r\n        m[8] *= -1;\r\n        m[9] *= -1;\r\n        m[10] *= -1;\r\n        m[11] *= -1;\r\n        this._markAsUpdated();\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a matrix from an array\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @returns a new Matrix set from the starting index of the given array\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.FromArrayToRef(array, offset, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copy the content of an array into a given matrix\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @param result defines the target matrix\r\n     */\r\n    public static FromArrayToRef(array: DeepImmutable<ArrayLike<number>>, offset: number, result: Matrix) {\r\n        for (var index = 0; index < 16; index++) {\r\n            result._m[index] = array[index + offset];\r\n        }\r\n        result._markAsUpdated();\r\n    }\r\n\r\n    /**\r\n     * Stores an array into a matrix after having multiplied each component by a given factor\r\n     * @param array defines the source array\r\n     * @param offset defines the offset in the source array\r\n     * @param scale defines the scaling factor\r\n     * @param result defines the target matrix\r\n     */\r\n    public static FromFloat32ArrayToRefScaled(array: DeepImmutable<Float32Array>, offset: number, scale: number, result: Matrix) {\r\n        for (var index = 0; index < 16; index++) {\r\n            result._m[index] = array[index + offset] * scale;\r\n        }\r\n        result._markAsUpdated();\r\n    }\r\n\r\n    /**\r\n     * Gets an identity matrix that must not be updated\r\n     */\r\n    public static get IdentityReadOnly(): DeepImmutable<Matrix> {\r\n        return Matrix._identityReadOnly;\r\n    }\r\n\r\n    /**\r\n     * Stores a list of values (16) inside a given matrix\r\n     * @param initialM11 defines 1st value of 1st row\r\n     * @param initialM12 defines 2nd value of 1st row\r\n     * @param initialM13 defines 3rd value of 1st row\r\n     * @param initialM14 defines 4th value of 1st row\r\n     * @param initialM21 defines 1st value of 2nd row\r\n     * @param initialM22 defines 2nd value of 2nd row\r\n     * @param initialM23 defines 3rd value of 2nd row\r\n     * @param initialM24 defines 4th value of 2nd row\r\n     * @param initialM31 defines 1st value of 3rd row\r\n     * @param initialM32 defines 2nd value of 3rd row\r\n     * @param initialM33 defines 3rd value of 3rd row\r\n     * @param initialM34 defines 4th value of 3rd row\r\n     * @param initialM41 defines 1st value of 4th row\r\n     * @param initialM42 defines 2nd value of 4th row\r\n     * @param initialM43 defines 3rd value of 4th row\r\n     * @param initialM44 defines 4th value of 4th row\r\n     * @param result defines the target matrix\r\n     */\r\n    public static FromValuesToRef(initialM11: number, initialM12: number, initialM13: number, initialM14: number,\r\n        initialM21: number, initialM22: number, initialM23: number, initialM24: number,\r\n        initialM31: number, initialM32: number, initialM33: number, initialM34: number,\r\n        initialM41: number, initialM42: number, initialM43: number, initialM44: number, result: Matrix): void {\r\n\r\n        const m = result._m;\r\n        m[0] = initialM11; m[1] = initialM12; m[2] = initialM13; m[3] = initialM14;\r\n        m[4] = initialM21; m[5] = initialM22; m[6] = initialM23; m[7] = initialM24;\r\n        m[8] = initialM31; m[9] = initialM32; m[10] = initialM33; m[11] = initialM34;\r\n        m[12] = initialM41; m[13] = initialM42; m[14] = initialM43; m[15] = initialM44;\r\n\r\n        result._markAsUpdated();\r\n    }\r\n\r\n    /**\r\n     * Creates new matrix from a list of values (16)\r\n     * @param initialM11 defines 1st value of 1st row\r\n     * @param initialM12 defines 2nd value of 1st row\r\n     * @param initialM13 defines 3rd value of 1st row\r\n     * @param initialM14 defines 4th value of 1st row\r\n     * @param initialM21 defines 1st value of 2nd row\r\n     * @param initialM22 defines 2nd value of 2nd row\r\n     * @param initialM23 defines 3rd value of 2nd row\r\n     * @param initialM24 defines 4th value of 2nd row\r\n     * @param initialM31 defines 1st value of 3rd row\r\n     * @param initialM32 defines 2nd value of 3rd row\r\n     * @param initialM33 defines 3rd value of 3rd row\r\n     * @param initialM34 defines 4th value of 3rd row\r\n     * @param initialM41 defines 1st value of 4th row\r\n     * @param initialM42 defines 2nd value of 4th row\r\n     * @param initialM43 defines 3rd value of 4th row\r\n     * @param initialM44 defines 4th value of 4th row\r\n     * @returns the new matrix\r\n     */\r\n    public static FromValues(initialM11: number, initialM12: number, initialM13: number, initialM14: number,\r\n        initialM21: number, initialM22: number, initialM23: number, initialM24: number,\r\n        initialM31: number, initialM32: number, initialM33: number, initialM34: number,\r\n        initialM41: number, initialM42: number, initialM43: number, initialM44: number): Matrix {\r\n\r\n        var result = new Matrix();\r\n        const m = result._m;\r\n        m[0] = initialM11; m[1] = initialM12; m[2] = initialM13; m[3] = initialM14;\r\n        m[4] = initialM21; m[5] = initialM22; m[6] = initialM23; m[7] = initialM24;\r\n        m[8] = initialM31; m[9] = initialM32; m[10] = initialM33; m[11] = initialM34;\r\n        m[12] = initialM41; m[13] = initialM42; m[14] = initialM43; m[15] = initialM44;\r\n        result._markAsUpdated();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\r\n     * @param scale defines the scale vector3\r\n     * @param rotation defines the rotation quaternion\r\n     * @param translation defines the translation vector3\r\n     * @returns a new matrix\r\n     */\r\n    public static Compose(scale: DeepImmutable<Vector3>, rotation: DeepImmutable<Quaternion>, translation: DeepImmutable<Vector3>): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.ComposeToRef(scale, rotation, translation, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\r\n     * @param scale defines the scale vector3\r\n     * @param rotation defines the rotation quaternion\r\n     * @param translation defines the translation vector3\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(scale: DeepImmutable<Vector3>, rotation: DeepImmutable<Quaternion>, translation: DeepImmutable<Vector3>, result: Matrix): void {\r\n        let m = result._m;\r\n        var x = rotation.x, y = rotation.y, z = rotation.z, w = rotation.w;\r\n        var x2 = x + x, y2 = y + y, z2 = z + z;\r\n        var xx = x * x2, xy = x * y2, xz = x * z2;\r\n        var yy = y * y2, yz = y * z2, zz = z * z2;\r\n        var wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n        var sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n        m[0] = (1 - (yy + zz)) * sx;\r\n        m[1] = (xy + wz) * sx;\r\n        m[2] = (xz - wy) * sx;\r\n        m[3] = 0;\r\n\r\n        m[4] = (xy - wz) * sy;\r\n        m[5] = (1 - (xx + zz)) * sy;\r\n        m[6] = (yz + wx) * sy;\r\n        m[7] = 0;\r\n\r\n        m[8] = (xz + wy) * sz;\r\n        m[9] = (yz - wx) * sz;\r\n        m[10] = (1 - (xx + yy)) * sz;\r\n        m[11] = 0;\r\n\r\n        m[12] = translation.x;\r\n        m[13] = translation.y;\r\n        m[14] = translation.z;\r\n        m[15] = 1;\r\n\r\n        result._markAsUpdated();\r\n    }\r\n\r\n    /**\r\n     * Creates a new identity matrix\r\n     * @returns a new identity matrix\r\n     */\r\n    public static Identity(): Matrix {\r\n        const identity = Matrix.FromValues(\r\n            1.0, 0.0, 0.0, 0.0,\r\n            0.0, 1.0, 0.0, 0.0,\r\n            0.0, 0.0, 1.0, 0.0,\r\n            0.0, 0.0, 0.0, 1.0);\r\n        identity._updateIdentityStatus(true);\r\n        return identity;\r\n    }\r\n\r\n    /**\r\n     * Creates a new identity matrix and stores the result in a given matrix\r\n     * @param result defines the target matrix\r\n     */\r\n    public static IdentityToRef(result: Matrix): void {\r\n        Matrix.FromValuesToRef(\r\n            1.0, 0.0, 0.0, 0.0,\r\n            0.0, 1.0, 0.0, 0.0,\r\n            0.0, 0.0, 1.0, 0.0,\r\n            0.0, 0.0, 0.0, 1.0,\r\n            result\r\n        );\r\n        result._updateIdentityStatus(true);\r\n    }\r\n\r\n    /**\r\n     * Creates a new zero matrix\r\n     * @returns a new zero matrix\r\n     */\r\n    public static Zero(): Matrix {\r\n        const zero = Matrix.FromValues(\r\n            0.0, 0.0, 0.0, 0.0,\r\n            0.0, 0.0, 0.0, 0.0,\r\n            0.0, 0.0, 0.0, 0.0,\r\n            0.0, 0.0, 0.0, 0.0);\r\n        zero._updateIdentityStatus(false);\r\n        return zero;\r\n    }\r\n\r\n    /**\r\n     * Creates a new rotation matrix for \"angle\" radians around the X axis\r\n     * @param angle defines the angle (in radians) to use\r\n     * @return the new matrix\r\n     */\r\n    public static RotationX(angle: number): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.RotationXToRef(angle, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new matrix as the invert of a given matrix\r\n     * @param source defines the source matrix\r\n     * @returns the new matrix\r\n     */\r\n    public static Invert(source: DeepImmutable<Matrix>): Matrix {\r\n        var result = new Matrix();\r\n        source.invertToRef(result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\r\n     * @param angle defines the angle (in radians) to use\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationXToRef(angle: number, result: Matrix): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n        Matrix.FromValuesToRef(\r\n            1.0, 0.0, 0.0, 0.0,\r\n            0.0, c, s, 0.0,\r\n            0.0, -s, c, 0.0,\r\n            0.0, 0.0, 0.0, 1.0,\r\n            result\r\n        );\r\n\r\n        result._updateIdentityStatus(c === 1 && s === 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a new rotation matrix for \"angle\" radians around the Y axis\r\n     * @param angle defines the angle (in radians) to use\r\n     * @return the new matrix\r\n     */\r\n    public static RotationY(angle: number): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.RotationYToRef(angle, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\r\n     * @param angle defines the angle (in radians) to use\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationYToRef(angle: number, result: Matrix): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n        Matrix.FromValuesToRef(\r\n            c, 0.0, -s, 0.0,\r\n            0.0, 1.0, 0.0, 0.0,\r\n            s, 0.0, c, 0.0,\r\n            0.0, 0.0, 0.0, 1.0,\r\n            result\r\n        );\r\n\r\n        result._updateIdentityStatus(c === 1 && s === 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a new rotation matrix for \"angle\" radians around the Z axis\r\n     * @param angle defines the angle (in radians) to use\r\n     * @return the new matrix\r\n     */\r\n    public static RotationZ(angle: number): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.RotationZToRef(angle, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\r\n     * @param angle defines the angle (in radians) to use\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationZToRef(angle: number, result: Matrix): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n        Matrix.FromValuesToRef(\r\n            c, s, 0.0, 0.0,\r\n            -s, c, 0.0, 0.0,\r\n            0.0, 0.0, 1.0, 0.0,\r\n            0.0, 0.0, 0.0, 1.0,\r\n            result\r\n        );\r\n\r\n        result._updateIdentityStatus(c === 1 && s === 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a new rotation matrix for \"angle\" radians around the given axis\r\n     * @param axis defines the axis to use\r\n     * @param angle defines the angle (in radians) to use\r\n     * @return the new matrix\r\n     */\r\n    public static RotationAxis(axis: DeepImmutable<Vector3>, angle: number): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.RotationAxisToRef(axis, angle, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\r\n     * @param axis defines the axis to use\r\n     * @param angle defines the angle (in radians) to use\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationAxisToRef(axis: DeepImmutable<Vector3>, angle: number, result: Matrix): void {\r\n        var s = Math.sin(-angle);\r\n        var c = Math.cos(-angle);\r\n        var c1 = 1 - c;\r\n\r\n        axis.normalize();\r\n        const m = result._m;\r\n        m[0] = (axis.x * axis.x) * c1 + c;\r\n        m[1] = (axis.x * axis.y) * c1 - (axis.z * s);\r\n        m[2] = (axis.x * axis.z) * c1 + (axis.y * s);\r\n        m[3] = 0.0;\r\n\r\n        m[4] = (axis.y * axis.x) * c1 + (axis.z * s);\r\n        m[5] = (axis.y * axis.y) * c1 + c;\r\n        m[6] = (axis.y * axis.z) * c1 - (axis.x * s);\r\n        m[7] = 0.0;\r\n\r\n        m[8] = (axis.z * axis.x) * c1 - (axis.y * s);\r\n        m[9] = (axis.z * axis.y) * c1 + (axis.x * s);\r\n        m[10] = (axis.z * axis.z) * c1 + c;\r\n        m[11] = 0.0;\r\n\r\n        m[12] = 0.0;\r\n        m[13] = 0.0;\r\n        m[14] = 0.0;\r\n        m[15] = 1.0;\r\n\r\n        result._markAsUpdated();\r\n    }\r\n\r\n    /**\r\n     * Takes normalised vectors and returns a rotation matrix to align \"from\" with \"to\".\r\n     * Taken from http://www.iquilezles.org/www/articles/noacos/noacos.htm\r\n     * @param from defines the vector to align\r\n     * @param to defines the vector to align to\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationAlignToRef(from: DeepImmutable<Vector3>, to: DeepImmutable<Vector3>, result: Matrix): void {\r\n        const v = Vector3.Cross(to, from);\r\n        const c = Vector3.Dot(to, from);\r\n        const k = 1 / (1 + c);\r\n\r\n        const m = result._m;\r\n        m[0] = v.x * v.x * k + c; m[1] = v.y * v.x * k - v.z; m[2] = v.z * v.x * k + v.y; m[3] = 0;\r\n        m[4] = v.x * v.y * k + v.z; m[5] = v.y * v.y * k + c; m[6] = v.z * v.y * k - v.x; m[7] = 0;\r\n        m[8] = v.x * v.z * k - v.y; m[9] = v.y * v.z * k + v.x; m[10] = v.z * v.z * k + c; m[11] = 0;\r\n        m[12] = 0; m[13] = 0; m[14] = 0; m[15] = 1;\r\n\r\n        result._markAsUpdated();\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix\r\n     * @param yaw defines the yaw angle in radians (Y axis)\r\n     * @param pitch defines the pitch angle in radians (X axis)\r\n     * @param roll defines the roll angle in radians (X axis)\r\n     * @returns the new rotation matrix\r\n     */\r\n    public static RotationYawPitchRoll(yaw: number, pitch: number, roll: number): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a given matrix\r\n     * @param yaw defines the yaw angle in radians (Y axis)\r\n     * @param pitch defines the pitch angle in radians (X axis)\r\n     * @param roll defines the roll angle in radians (X axis)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationYawPitchRollToRef(yaw: number, pitch: number, roll: number, result: Matrix): void {\r\n        Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, MathTmp.Quaternion[0]);\r\n        MathTmp.Quaternion[0].toRotationMatrix(result);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix\r\n     * @param x defines the scale factor on X axis\r\n     * @param y defines the scale factor on Y axis\r\n     * @param z defines the scale factor on Z axis\r\n     * @returns the new matrix\r\n     */\r\n    public static Scaling(x: number, y: number, z: number): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.ScalingToRef(x, y, z, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a given matrix\r\n     * @param x defines the scale factor on X axis\r\n     * @param y defines the scale factor on Y axis\r\n     * @param z defines the scale factor on Z axis\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, z: number, result: Matrix): void {\r\n        Matrix.FromValuesToRef(\r\n            x, 0.0, 0.0, 0.0,\r\n            0.0, y, 0.0, 0.0,\r\n            0.0, 0.0, z, 0.0,\r\n            0.0, 0.0, 0.0, 1.0,\r\n            result\r\n        );\r\n\r\n        result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix\r\n     * @param x defines the translation on X axis\r\n     * @param y defines the translation on Y axis\r\n     * @param z defines the translationon Z axis\r\n     * @returns the new matrix\r\n     */\r\n    public static Translation(x: number, y: number, z: number): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.TranslationToRef(x, y, z, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a given matrix\r\n     * @param x defines the translation on X axis\r\n     * @param y defines the translation on Y axis\r\n     * @param z defines the translationon Z axis\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, z: number, result: Matrix): void {\r\n        Matrix.FromValuesToRef(\r\n            1.0, 0.0, 0.0, 0.0,\r\n            0.0, 1.0, 0.0, 0.0,\r\n            0.0, 0.0, 1.0, 0.0,\r\n            x, y, z, 1.0,\r\n            result\r\n        );\r\n        result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\r\n     * @param startValue defines the start value\r\n     * @param endValue defines the end value\r\n     * @param gradient defines the gradient factor\r\n     * @returns the new matrix\r\n     */\r\n    public static Lerp(startValue: DeepImmutable<Matrix>, endValue: DeepImmutable<Matrix>, gradient: number): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.LerpToRef(startValue, endValue, gradient, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\r\n     * @param startValue defines the start value\r\n     * @param endValue defines the end value\r\n     * @param gradient defines the gradient factor\r\n     * @param result defines the Matrix object where to store data\r\n     */\r\n    public static LerpToRef(startValue: DeepImmutable<Matrix>, endValue: DeepImmutable<Matrix>, gradient: number, result: Matrix): void {\r\n        const resultM = result._m;\r\n        const startM = startValue.m;\r\n        const endM = endValue.m;\r\n        for (var index = 0; index < 16; index++) {\r\n            resultM[index] = startM[index] * (1.0 - gradient) + endM[index] * gradient;\r\n        }\r\n        result._markAsUpdated();\r\n    }\r\n\r\n    /**\r\n     * Builds a new matrix whose values are computed by:\r\n     * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\r\n     * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\r\n     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\r\n     * @param startValue defines the first matrix\r\n     * @param endValue defines the second matrix\r\n     * @param gradient defines the gradient between the two matrices\r\n     * @returns the new matrix\r\n     */\r\n    public static DecomposeLerp(startValue: DeepImmutable<Matrix>, endValue: DeepImmutable<Matrix>, gradient: number): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Update a matrix to values which are computed by:\r\n     * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\r\n     * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\r\n     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\r\n     * @param startValue defines the first matrix\r\n     * @param endValue defines the second matrix\r\n     * @param gradient defines the gradient between the two matrices\r\n     * @param result defines the target matrix\r\n     */\r\n    public static DecomposeLerpToRef(startValue: DeepImmutable<Matrix>, endValue: DeepImmutable<Matrix>, gradient: number, result: Matrix) {\r\n        var startScale = MathTmp.Vector3[0];\r\n        var startRotation = MathTmp.Quaternion[0];\r\n        var startTranslation = MathTmp.Vector3[1];\r\n        startValue.decompose(startScale, startRotation, startTranslation);\r\n\r\n        var endScale = MathTmp.Vector3[2];\r\n        var endRotation = MathTmp.Quaternion[1];\r\n        var endTranslation = MathTmp.Vector3[3];\r\n        endValue.decompose(endScale, endRotation, endTranslation);\r\n\r\n        var resultScale = MathTmp.Vector3[4];\r\n        Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\r\n        var resultRotation = MathTmp.Quaternion[2];\r\n        Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\r\n\r\n        var resultTranslation = MathTmp.Vector3[5];\r\n        Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\r\n\r\n        Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\r\n    }\r\n\r\n    /**\r\n     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\r\n     * This function works in left handed mode\r\n     * @param eye defines the final position of the entity\r\n     * @param target defines where the entity should look at\r\n     * @param up defines the up vector for the entity\r\n     * @returns the new matrix\r\n     */\r\n    public static LookAtLH(eye: DeepImmutable<Vector3>, target: DeepImmutable<Vector3>, up: DeepImmutable<Vector3>): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.LookAtLHToRef(eye, target, up, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\r\n     * This function works in left handed mode\r\n     * @param eye defines the final position of the entity\r\n     * @param target defines where the entity should look at\r\n     * @param up defines the up vector for the entity\r\n     * @param result defines the target matrix\r\n     */\r\n    public static LookAtLHToRef(eye: DeepImmutable<Vector3>, target: DeepImmutable<Vector3>, up: DeepImmutable<Vector3>, result: Matrix): void {\r\n        const xAxis = MathTmp.Vector3[0];\r\n        const yAxis = MathTmp.Vector3[1];\r\n        const zAxis = MathTmp.Vector3[2];\r\n\r\n        // Z axis\r\n        target.subtractToRef(eye, zAxis);\r\n        zAxis.normalize();\r\n\r\n        // X axis\r\n        Vector3.CrossToRef(up, zAxis, xAxis);\r\n\r\n        const xSquareLength = xAxis.lengthSquared();\r\n        if (xSquareLength === 0) {\r\n            xAxis.x = 1.0;\r\n        } else {\r\n            xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\r\n        }\r\n\r\n        // Y axis\r\n        Vector3.CrossToRef(zAxis, xAxis, yAxis);\r\n        yAxis.normalize();\r\n\r\n        // Eye angles\r\n        var ex = -Vector3.Dot(xAxis, eye);\r\n        var ey = -Vector3.Dot(yAxis, eye);\r\n        var ez = -Vector3.Dot(zAxis, eye);\r\n\r\n        Matrix.FromValuesToRef(\r\n            xAxis.x, yAxis.x, zAxis.x, 0.0,\r\n            xAxis.y, yAxis.y, zAxis.y, 0.0,\r\n            xAxis.z, yAxis.z, zAxis.z, 0.0,\r\n            ex, ey, ez, 1.0,\r\n            result\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\r\n     * This function works in right handed mode\r\n     * @param eye defines the final position of the entity\r\n     * @param target defines where the entity should look at\r\n     * @param up defines the up vector for the entity\r\n     * @returns the new matrix\r\n     */\r\n    public static LookAtRH(eye: DeepImmutable<Vector3>, target: DeepImmutable<Vector3>, up: DeepImmutable<Vector3>): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.LookAtRHToRef(eye, target, up, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\r\n     * This function works in right handed mode\r\n     * @param eye defines the final position of the entity\r\n     * @param target defines where the entity should look at\r\n     * @param up defines the up vector for the entity\r\n     * @param result defines the target matrix\r\n     */\r\n    public static LookAtRHToRef(eye: DeepImmutable<Vector3>, target: DeepImmutable<Vector3>, up: DeepImmutable<Vector3>, result: Matrix): void {\r\n        const xAxis = MathTmp.Vector3[0];\r\n        const yAxis = MathTmp.Vector3[1];\r\n        const zAxis = MathTmp.Vector3[2];\r\n\r\n        // Z axis\r\n        eye.subtractToRef(target, zAxis);\r\n        zAxis.normalize();\r\n\r\n        // X axis\r\n        Vector3.CrossToRef(up, zAxis, xAxis);\r\n\r\n        const xSquareLength = xAxis.lengthSquared();\r\n        if (xSquareLength === 0) {\r\n            xAxis.x = 1.0;\r\n        } else {\r\n            xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\r\n        }\r\n\r\n        // Y axis\r\n        Vector3.CrossToRef(zAxis, xAxis, yAxis);\r\n        yAxis.normalize();\r\n\r\n        // Eye angles\r\n        var ex = -Vector3.Dot(xAxis, eye);\r\n        var ey = -Vector3.Dot(yAxis, eye);\r\n        var ez = -Vector3.Dot(zAxis, eye);\r\n\r\n        Matrix.FromValuesToRef(\r\n            xAxis.x, yAxis.x, zAxis.x, 0.0,\r\n            xAxis.y, yAxis.y, zAxis.y, 0.0,\r\n            xAxis.z, yAxis.z, zAxis.z, 0.0,\r\n            ex, ey, ez, 1.0,\r\n            result\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a left-handed orthographic projection matrix\r\n     * @param width defines the viewport width\r\n     * @param height defines the viewport height\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @returns a new matrix as a left-handed orthographic projection matrix\r\n     */\r\n    public static OrthoLH(width: number, height: number, znear: number, zfar: number): Matrix {\r\n        var matrix = new Matrix();\r\n        Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);\r\n        return matrix;\r\n    }\r\n\r\n    /**\r\n     * Store a left-handed orthographic projection to a given matrix\r\n     * @param width defines the viewport width\r\n     * @param height defines the viewport height\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @param result defines the target matrix\r\n     */\r\n    public static OrthoLHToRef(width: number, height: number, znear: number, zfar: number, result: Matrix): void {\r\n        let n = znear;\r\n        let f = zfar;\r\n\r\n        let a = 2.0 / width;\r\n        let b = 2.0 / height;\r\n        let c = 2.0 / (f - n);\r\n        let d = -(f + n) / (f - n);\r\n\r\n        Matrix.FromValuesToRef(\r\n            a, 0.0, 0.0, 0.0,\r\n            0.0, b, 0.0, 0.0,\r\n            0.0, 0.0, c, 0.0,\r\n            0.0, 0.0, d, 1.0,\r\n            result\r\n        );\r\n\r\n        result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\r\n    }\r\n\r\n    /**\r\n     * Create a left-handed orthographic projection matrix\r\n     * @param left defines the viewport left coordinate\r\n     * @param right defines the viewport right coordinate\r\n     * @param bottom defines the viewport bottom coordinate\r\n     * @param top defines the viewport top coordinate\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @returns a new matrix as a left-handed orthographic projection matrix\r\n     */\r\n    public static OrthoOffCenterLH(left: number, right: number, bottom: number, top: number, znear: number, zfar: number): Matrix {\r\n        var matrix = new Matrix();\r\n        Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);\r\n        return matrix;\r\n    }\r\n\r\n    /**\r\n     * Stores a left-handed orthographic projection into a given matrix\r\n     * @param left defines the viewport left coordinate\r\n     * @param right defines the viewport right coordinate\r\n     * @param bottom defines the viewport bottom coordinate\r\n     * @param top defines the viewport top coordinate\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @param result defines the target matrix\r\n     */\r\n    public static OrthoOffCenterLHToRef(left: number, right: number, bottom: number, top: number, znear: number, zfar: number, result: Matrix): void {\r\n        let n = znear;\r\n        let f = zfar;\r\n\r\n        let a = 2.0 / (right - left);\r\n        let b = 2.0 / (top - bottom);\r\n        let c = 2.0 / (f - n);\r\n        let d = -(f + n) / (f - n);\r\n        let i0 = (left + right) / (left - right);\r\n        let i1 = (top + bottom) / (bottom - top);\r\n\r\n        Matrix.FromValuesToRef(\r\n            a, 0.0, 0.0, 0.0,\r\n            0.0, b, 0.0, 0.0,\r\n            0.0, 0.0, c, 0.0,\r\n            i0, i1, d, 1.0,\r\n            result\r\n        );\r\n\r\n        result._markAsUpdated();\r\n    }\r\n\r\n    /**\r\n     * Creates a right-handed orthographic projection matrix\r\n     * @param left defines the viewport left coordinate\r\n     * @param right defines the viewport right coordinate\r\n     * @param bottom defines the viewport bottom coordinate\r\n     * @param top defines the viewport top coordinate\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @returns a new matrix as a right-handed orthographic projection matrix\r\n     */\r\n    public static OrthoOffCenterRH(left: number, right: number, bottom: number, top: number, znear: number, zfar: number): Matrix {\r\n        var matrix = new Matrix();\r\n        Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);\r\n        return matrix;\r\n    }\r\n\r\n    /**\r\n     * Stores a right-handed orthographic projection into a given matrix\r\n     * @param left defines the viewport left coordinate\r\n     * @param right defines the viewport right coordinate\r\n     * @param bottom defines the viewport bottom coordinate\r\n     * @param top defines the viewport top coordinate\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @param result defines the target matrix\r\n     */\r\n    public static OrthoOffCenterRHToRef(left: number, right: number, bottom: number, top: number, znear: number, zfar: number, result: Matrix): void {\r\n        Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);\r\n        result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\r\n    }\r\n\r\n    /**\r\n     * Creates a left-handed perspective projection matrix\r\n     * @param width defines the viewport width\r\n     * @param height defines the viewport height\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @returns a new matrix as a left-handed perspective projection matrix\r\n     */\r\n    public static PerspectiveLH(width: number, height: number, znear: number, zfar: number): Matrix {\r\n        var matrix = new Matrix();\r\n\r\n        let n = znear;\r\n        let f = zfar;\r\n\r\n        let a = 2.0 * n / width;\r\n        let b = 2.0 * n / height;\r\n        let c = (f + n) / (f - n);\r\n        let d = -2.0 * f * n / (f - n);\r\n\r\n        Matrix.FromValuesToRef(\r\n            a, 0.0, 0.0, 0.0,\r\n            0.0, b, 0.0, 0.0,\r\n            0.0, 0.0, c, 1.0,\r\n            0.0, 0.0, d, 0.0,\r\n            matrix\r\n        );\r\n\r\n        matrix._updateIdentityStatus(false);\r\n        return matrix;\r\n    }\r\n\r\n    /**\r\n     * Creates a left-handed perspective projection matrix\r\n     * @param fov defines the horizontal field of view\r\n     * @param aspect defines the aspect ratio\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @returns a new matrix as a left-handed perspective projection matrix\r\n     */\r\n    public static PerspectiveFovLH(fov: number, aspect: number, znear: number, zfar: number): Matrix {\r\n        var matrix = new Matrix();\r\n        Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);\r\n        return matrix;\r\n    }\r\n\r\n    /**\r\n     * Stores a left-handed perspective projection into a given matrix\r\n     * @param fov defines the horizontal field of view\r\n     * @param aspect defines the aspect ratio\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @param result defines the target matrix\r\n     * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n     */\r\n    public static PerspectiveFovLHToRef(fov: number, aspect: number, znear: number, zfar: number, result: Matrix, isVerticalFovFixed = true): void {\r\n        let n = znear;\r\n        let f = zfar;\r\n\r\n        let t = 1.0 / (Math.tan(fov * 0.5));\r\n        let a = isVerticalFovFixed ? (t / aspect) : t;\r\n        let b = isVerticalFovFixed ? t : (t * aspect);\r\n        let c = (f + n) / (f - n);\r\n        let d = -2.0 * f * n / (f - n);\r\n\r\n        Matrix.FromValuesToRef(\r\n            a, 0.0, 0.0, 0.0,\r\n            0.0, b, 0.0, 0.0,\r\n            0.0, 0.0, c, 1.0,\r\n            0.0, 0.0, d, 0.0,\r\n            result\r\n        );\r\n        result._updateIdentityStatus(false);\r\n    }\r\n\r\n    /**\r\n     * Creates a right-handed perspective projection matrix\r\n     * @param fov defines the horizontal field of view\r\n     * @param aspect defines the aspect ratio\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @returns a new matrix as a right-handed perspective projection matrix\r\n     */\r\n    public static PerspectiveFovRH(fov: number, aspect: number, znear: number, zfar: number): Matrix {\r\n        var matrix = new Matrix();\r\n        Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);\r\n        return matrix;\r\n    }\r\n\r\n    /**\r\n     * Stores a right-handed perspective projection into a given matrix\r\n     * @param fov defines the horizontal field of view\r\n     * @param aspect defines the aspect ratio\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @param result defines the target matrix\r\n     * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n     */\r\n    public static PerspectiveFovRHToRef(fov: number, aspect: number, znear: number, zfar: number, result: Matrix, isVerticalFovFixed = true): void {\r\n        //alternatively this could be expressed as:\r\n        //    m = PerspectiveFovLHToRef\r\n        //    m[10] *= -1.0;\r\n        //    m[11] *= -1.0;\r\n\r\n        let n = znear;\r\n        let f = zfar;\r\n\r\n        let t = 1.0 / (Math.tan(fov * 0.5));\r\n        let a = isVerticalFovFixed ? (t / aspect) : t;\r\n        let b = isVerticalFovFixed ? t : (t * aspect);\r\n        let c = -(f + n) / (f - n);\r\n        let d = -2 * f * n / (f - n);\r\n\r\n        Matrix.FromValuesToRef(\r\n            a, 0.0, 0.0, 0.0,\r\n            0.0, b, 0.0, 0.0,\r\n            0.0, 0.0, c, -1.0,\r\n            0.0, 0.0, d, 0.0,\r\n            result\r\n        );\r\n\r\n        result._updateIdentityStatus(false);\r\n    }\r\n\r\n    /**\r\n     * Stores a perspective projection for WebVR info a given matrix\r\n     * @param fov defines the field of view\r\n     * @param znear defines the near clip plane\r\n     * @param zfar defines the far clip plane\r\n     * @param result defines the target matrix\r\n     * @param rightHanded defines if the matrix must be in right-handed mode (false by default)\r\n     */\r\n    public static PerspectiveFovWebVRToRef(fov: { upDegrees: number, downDegrees: number, leftDegrees: number, rightDegrees: number }, znear: number, zfar: number, result: Matrix, rightHanded = false): void {\r\n\r\n        var rightHandedFactor = rightHanded ? -1 : 1;\r\n\r\n        var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n        var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n        var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n        var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n        var xScale = 2.0 / (leftTan + rightTan);\r\n        var yScale = 2.0 / (upTan + downTan);\r\n        const m = result._m;\r\n        m[0] = xScale;\r\n        m[1] = m[2] = m[3] = m[4] = 0.0;\r\n        m[5] = yScale;\r\n        m[6] = m[7] = 0.0;\r\n        m[8] = ((leftTan - rightTan) * xScale * 0.5);\r\n        m[9] = -((upTan - downTan) * yScale * 0.5);\r\n        m[10] = -zfar / (znear - zfar);\r\n        m[11] = 1.0 * rightHandedFactor;\r\n        m[12] = m[13] = m[15] = 0.0;\r\n        m[14] = -(2.0 * zfar * znear) / (zfar - znear);\r\n\r\n        result._markAsUpdated();\r\n    }\r\n\r\n    /**\r\n     * Computes a complete transformation matrix\r\n     * @param viewport defines the viewport to use\r\n     * @param world defines the world matrix\r\n     * @param view defines the view matrix\r\n     * @param projection defines the projection matrix\r\n     * @param zmin defines the near clip plane\r\n     * @param zmax defines the far clip plane\r\n     * @returns the transformation matrix\r\n     */\r\n    public static GetFinalMatrix(viewport: DeepImmutable<Viewport>, world: DeepImmutable<Matrix>, view: DeepImmutable<Matrix>, projection: DeepImmutable<Matrix>, zmin: number, zmax: number): Matrix {\r\n        var cw = viewport.width;\r\n        var ch = viewport.height;\r\n        var cx = viewport.x;\r\n        var cy = viewport.y;\r\n\r\n        var viewportMatrix = Matrix.FromValues(\r\n            cw / 2.0, 0.0, 0.0, 0.0,\r\n            0.0, -ch / 2.0, 0.0, 0.0,\r\n            0.0, 0.0, zmax - zmin, 0.0,\r\n            cx + cw / 2.0, ch / 2.0 + cy, zmin, 1.0);\r\n\r\n        var matrix = MathTmp.Matrix[0];\r\n        world.multiplyToRef(view, matrix);\r\n        matrix.multiplyToRef(projection, matrix);\r\n        return matrix.multiply(viewportMatrix);\r\n    }\r\n\r\n    /**\r\n     * Extracts a 2x2 matrix from a given matrix and store the result in a Float32Array\r\n     * @param matrix defines the matrix to use\r\n     * @returns a new Float32Array array with 4 elements : the 2x2 matrix extracted from the given matrix\r\n     */\r\n    public static GetAsMatrix2x2(matrix: DeepImmutable<Matrix>): Float32Array {\r\n        const m = matrix.m;\r\n        return new Float32Array([m[0], m[1], m[4], m[5]]);\r\n    }\r\n    /**\r\n     * Extracts a 3x3 matrix from a given matrix and store the result in a Float32Array\r\n     * @param matrix defines the matrix to use\r\n     * @returns a new Float32Array array with 9 elements : the 3x3 matrix extracted from the given matrix\r\n     */\r\n    public static GetAsMatrix3x3(matrix: DeepImmutable<Matrix>): Float32Array {\r\n        const m = matrix.m;\r\n        return new Float32Array([\r\n            m[0], m[1], m[2],\r\n            m[4], m[5], m[6],\r\n            m[8], m[9], m[10]\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Compute the transpose of a given matrix\r\n     * @param matrix defines the matrix to transpose\r\n     * @returns the new matrix\r\n     */\r\n    public static Transpose(matrix: DeepImmutable<Matrix>): Matrix {\r\n        var result = new Matrix();\r\n        Matrix.TransposeToRef(matrix, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Compute the transpose of a matrix and store it in a target matrix\r\n     * @param matrix defines the matrix to transpose\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TransposeToRef(matrix: DeepImmutable<Matrix>, result: Matrix): void {\r\n        const rm = result._m;\r\n        const mm = matrix.m;\r\n        rm[0] = mm[0];\r\n        rm[1] = mm[4];\r\n        rm[2] = mm[8];\r\n        rm[3] = mm[12];\r\n\r\n        rm[4] = mm[1];\r\n        rm[5] = mm[5];\r\n        rm[6] = mm[9];\r\n        rm[7] = mm[13];\r\n\r\n        rm[8] = mm[2];\r\n        rm[9] = mm[6];\r\n        rm[10] = mm[10];\r\n        rm[11] = mm[14];\r\n\r\n        rm[12] = mm[3];\r\n        rm[13] = mm[7];\r\n        rm[14] = mm[11];\r\n        rm[15] = mm[15];\r\n        // identity-ness does not change when transposing\r\n        result._updateIdentityStatus((matrix as Matrix)._isIdentity, (matrix as Matrix)._isIdentityDirty);\r\n    }\r\n\r\n    /**\r\n     * Computes a reflection matrix from a plane\r\n     * @param plane defines the reflection plane\r\n     * @returns a new matrix\r\n     */\r\n    public static Reflection(plane: DeepImmutable<Plane>): Matrix {\r\n        var matrix = new Matrix();\r\n        Matrix.ReflectionToRef(plane, matrix);\r\n        return matrix;\r\n    }\r\n\r\n    /**\r\n     * Computes a reflection matrix from a plane\r\n     * @param plane defines the reflection plane\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ReflectionToRef(plane: DeepImmutable<Plane>, result: Matrix): void {\r\n        plane.normalize();\r\n        var x = plane.normal.x;\r\n        var y = plane.normal.y;\r\n        var z = plane.normal.z;\r\n        var temp = -2 * x;\r\n        var temp2 = -2 * y;\r\n        var temp3 = -2 * z;\r\n        Matrix.FromValuesToRef(\r\n            temp * x + 1, temp2 * x, temp3 * x, 0.0,\r\n            temp * y, temp2 * y + 1, temp3 * y, 0.0,\r\n            temp * z, temp2 * z, temp3 * z + 1, 0.0,\r\n            temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0,\r\n            result\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\r\n     * @param xaxis defines the value of the 1st axis\r\n     * @param yaxis defines the value of the 2nd axis\r\n     * @param zaxis defines the value of the 3rd axis\r\n     * @param result defines the target matrix\r\n     */\r\n    public static FromXYZAxesToRef(xaxis: DeepImmutable<Vector3>, yaxis: DeepImmutable<Vector3>, zaxis: DeepImmutable<Vector3>, result: Matrix) {\r\n        Matrix.FromValuesToRef(\r\n            xaxis.x, xaxis.y, xaxis.z, 0.0,\r\n            yaxis.x, yaxis.y, yaxis.z, 0.0,\r\n            zaxis.x, zaxis.y, zaxis.z, 0.0,\r\n            0.0, 0.0, 0.0, 1.0,\r\n            result\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix from a quaternion and stores it in a target matrix\r\n     * @param quat defines the quaternion to use\r\n     * @param result defines the target matrix\r\n     */\r\n    public static FromQuaternionToRef(quat: DeepImmutable<Quaternion>, result: Matrix) {\r\n        var xx = quat.x * quat.x;\r\n        var yy = quat.y * quat.y;\r\n        var zz = quat.z * quat.z;\r\n        var xy = quat.x * quat.y;\r\n        var zw = quat.z * quat.w;\r\n        var zx = quat.z * quat.x;\r\n        var yw = quat.y * quat.w;\r\n        var yz = quat.y * quat.z;\r\n        var xw = quat.x * quat.w;\r\n\r\n        result._m[0] = 1.0 - (2.0 * (yy + zz));\r\n        result._m[1] = 2.0 * (xy + zw);\r\n        result._m[2] = 2.0 * (zx - yw);\r\n        result._m[3] = 0.0;\r\n\r\n        result._m[4] = 2.0 * (xy - zw);\r\n        result._m[5] = 1.0 - (2.0 * (zz + xx));\r\n        result._m[6] = 2.0 * (yz + xw);\r\n        result._m[7] = 0.0;\r\n\r\n        result._m[8] = 2.0 * (zx + yw);\r\n        result._m[9] = 2.0 * (yz - xw);\r\n        result._m[10] = 1.0 - (2.0 * (yy + xx));\r\n        result._m[11] = 0.0;\r\n\r\n        result._m[12] = 0.0;\r\n        result._m[13] = 0.0;\r\n        result._m[14] = 0.0;\r\n        result._m[15] = 1.0;\r\n\r\n        result._markAsUpdated();\r\n    }\r\n}\r\n\r\n/**\r\n * Represens a plane by the equation ax + by + cz + d = 0\r\n */\r\nexport class Plane {\r\n    /**\r\n     * Normal of the plane (a,b,c)\r\n     */\r\n    public normal: Vector3;\r\n    /**\r\n     * d component of the plane\r\n     */\r\n    public d: number;\r\n    /**\r\n     * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\r\n     * @param a a component of the plane\r\n     * @param b b component of the plane\r\n     * @param c c component of the plane\r\n     * @param d d component of the plane\r\n     */\r\n    constructor(a: number, b: number, c: number, d: number) {\r\n        this.normal = new Vector3(a, b, c);\r\n        this.d = d;\r\n    }\r\n\r\n    /**\r\n     * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\r\n     */\r\n    public asArray(): number[] {\r\n        return [this.normal.x, this.normal.y, this.normal.z, this.d];\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * @returns a new plane copied from the current Plane.\r\n     */\r\n    public clone(): Plane {\r\n        return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);\r\n    }\r\n    /**\r\n     * @returns the string \"Plane\".\r\n     */\r\n    public getClassName(): string {\r\n        return \"Plane\";\r\n    }\r\n    /**\r\n     * @returns the Plane hash code.\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.normal.getHashCode();\r\n        hash = (hash * 397) ^ (this.d || 0);\r\n        return hash;\r\n    }\r\n    /**\r\n     * Normalize the current Plane in place.\r\n     * @returns the updated Plane.\r\n     */\r\n    public normalize(): Plane {\r\n        var norm = (Math.sqrt((this.normal.x * this.normal.x) + (this.normal.y * this.normal.y) + (this.normal.z * this.normal.z)));\r\n        var magnitude = 0.0;\r\n\r\n        if (norm !== 0) {\r\n            magnitude = 1.0 / norm;\r\n        }\r\n        this.normal.x *= magnitude;\r\n        this.normal.y *= magnitude;\r\n        this.normal.z *= magnitude;\r\n        this.d *= magnitude;\r\n        return this;\r\n    }\r\n    /**\r\n     * Applies a transformation the plane and returns the result\r\n     * @param transformation the transformation matrix to be applied to the plane\r\n     * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\r\n     */\r\n    public transform(transformation: DeepImmutable<Matrix>): Plane {\r\n        const transposedMatrix = MathTmp.Matrix[0];\r\n        Matrix.TransposeToRef(transformation, transposedMatrix);\r\n        const m = transposedMatrix.m;\r\n        var x = this.normal.x;\r\n        var y = this.normal.y;\r\n        var z = this.normal.z;\r\n        var d = this.d;\r\n\r\n        var normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];\r\n        var normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];\r\n        var normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];\r\n        var finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];\r\n\r\n        return new Plane(normalX, normalY, normalZ, finalD);\r\n    }\r\n\r\n    /**\r\n     * Calcualtte the dot product between the point and the plane normal\r\n     * @param point point to calculate the dot product with\r\n     * @returns the dot product (float) of the point coordinates and the plane normal.\r\n     */\r\n    public dotCoordinate(point: DeepImmutable<Vector3>): number {\r\n        return ((((this.normal.x * point.x) + (this.normal.y * point.y)) + (this.normal.z * point.z)) + this.d);\r\n    }\r\n\r\n    /**\r\n     * Updates the current Plane from the plane defined by the three given points.\r\n     * @param point1 one of the points used to contruct the plane\r\n     * @param point2 one of the points used to contruct the plane\r\n     * @param point3 one of the points used to contruct the plane\r\n     * @returns the updated Plane.\r\n     */\r\n    public copyFromPoints(point1: DeepImmutable<Vector3>, point2: DeepImmutable<Vector3>, point3: DeepImmutable<Vector3>): Plane {\r\n        var x1 = point2.x - point1.x;\r\n        var y1 = point2.y - point1.y;\r\n        var z1 = point2.z - point1.z;\r\n        var x2 = point3.x - point1.x;\r\n        var y2 = point3.y - point1.y;\r\n        var z2 = point3.z - point1.z;\r\n        var yz = (y1 * z2) - (z1 * y2);\r\n        var xz = (z1 * x2) - (x1 * z2);\r\n        var xy = (x1 * y2) - (y1 * x2);\r\n        var pyth = (Math.sqrt((yz * yz) + (xz * xz) + (xy * xy)));\r\n        var invPyth;\r\n\r\n        if (pyth !== 0) {\r\n            invPyth = 1.0 / pyth;\r\n        }\r\n        else {\r\n            invPyth = 0.0;\r\n        }\r\n\r\n        this.normal.x = yz * invPyth;\r\n        this.normal.y = xz * invPyth;\r\n        this.normal.z = xy * invPyth;\r\n        this.d = -((this.normal.x * point1.x) + (this.normal.y * point1.y) + (this.normal.z * point1.z));\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Checks if the plane is facing a given direction\r\n     * @param direction the direction to check if the plane is facing\r\n     * @param epsilon value the dot product is compared against (returns true if dot <= epsilon)\r\n     * @returns True is the vector \"direction\"  is the same side than the plane normal.\r\n     */\r\n    public isFrontFacingTo(direction: DeepImmutable<Vector3>, epsilon: number): boolean {\r\n        var dot = Vector3.Dot(this.normal, direction);\r\n        return (dot <= epsilon);\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance to a point\r\n     * @param point point to calculate distance to\r\n     * @returns the signed distance (float) from the given point to the Plane.\r\n     */\r\n    public signedDistanceTo(point: DeepImmutable<Vector3>): number {\r\n        return Vector3.Dot(point, this.normal) + this.d;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a plane from an  array\r\n     * @param array the array to create a plane from\r\n     * @returns a new Plane from the given array.\r\n     */\r\n    static FromArray(array: DeepImmutable<ArrayLike<number>>): Plane {\r\n        return new Plane(array[0], array[1], array[2], array[3]);\r\n    }\r\n    /**\r\n     * Creates a plane from three points\r\n     * @param point1 point used to create the plane\r\n     * @param point2 point used to create the plane\r\n     * @param point3 point used to create the plane\r\n     * @returns a new Plane defined by the three given points.\r\n     */\r\n    static FromPoints(point1: DeepImmutable<Vector3>, point2: DeepImmutable<Vector3>, point3: DeepImmutable<Vector3>): Plane {\r\n        var result = new Plane(0.0, 0.0, 0.0, 0.0);\r\n        result.copyFromPoints(point1, point2, point3);\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates a plane from an origin point and a normal\r\n     * @param origin origin of the plane to be constructed\r\n     * @param normal normal of the plane to be constructed\r\n     * @returns a new Plane the normal vector to this plane at the given origin point.\r\n     * Note : the vector \"normal\" is updated because normalized.\r\n     */\r\n    static FromPositionAndNormal(origin: DeepImmutable<Vector3>, normal: DeepImmutable<Vector3>): Plane {\r\n        var result = new Plane(0.0, 0.0, 0.0, 0.0);\r\n        normal.normalize();\r\n        result.normal = normal;\r\n        result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance from a plane and a point\r\n     * @param origin origin of the plane to be constructed\r\n     * @param normal normal of the plane to be constructed\r\n     * @param point point to calculate distance to\r\n     * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\r\n     */\r\n    static SignedDistanceToPlaneFromPositionAndNormal(origin: DeepImmutable<Vector3>, normal: DeepImmutable<Vector3>, point: DeepImmutable<Vector3>): number {\r\n        var d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\r\n        return Vector3.Dot(point, normal) + d;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to represent a viewport on screen\r\n */\r\nexport class Viewport {\r\n    /**\r\n     * Creates a Viewport object located at (x, y) and sized (width, height)\r\n     * @param x defines viewport left coordinate\r\n     * @param y defines viewport top coordinate\r\n     * @param width defines the viewport width\r\n     * @param height defines the viewport height\r\n     */\r\n    constructor(\r\n        /** viewport left coordinate */\r\n        public x: number,\r\n        /** viewport top coordinate */\r\n        public y: number,\r\n        /**viewport width */\r\n        public width: number,\r\n        /** viewport height */\r\n        public height: number) {\r\n    }\r\n\r\n    /**\r\n     * Creates a new viewport using absolute sizing (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @returns a new Viewport\r\n     */\r\n    public toGlobal(renderWidth: number, renderHeight: number): Viewport {\r\n        return new Viewport(this.x * renderWidth, this.y * renderHeight, this.width * renderWidth, this.height * renderHeight);\r\n    }\r\n\r\n    /**\r\n     * Stores absolute viewport value into a target viewport (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @param ref defines the target viewport\r\n     * @returns the current viewport\r\n     */\r\n    public toGlobalToRef(renderWidth: number, renderHeight: number, ref: Viewport): Viewport {\r\n        ref.x = this.x * renderWidth;\r\n        ref.y = this.y * renderHeight;\r\n        ref.width = this.width * renderWidth;\r\n        ref.height = this.height * renderHeight;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Viewport copied from the current one\r\n     * @returns a new Viewport\r\n     */\r\n    public clone(): Viewport {\r\n        return new Viewport(this.x, this.y, this.width, this.height);\r\n    }\r\n}\r\n\r\n/**\r\n * Reprasents a camera frustum\r\n */\r\nexport class Frustum {\r\n    /**\r\n     * Gets the planes representing the frustum\r\n     * @param transform matrix to be applied to the returned planes\r\n     * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\r\n     */\r\n    public static GetPlanes(transform: DeepImmutable<Matrix>): Plane[] {\r\n        var frustumPlanes = [];\r\n        for (var index = 0; index < 6; index++) {\r\n            frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\r\n        }\r\n        Frustum.GetPlanesToRef(transform, frustumPlanes);\r\n        return frustumPlanes;\r\n    }\r\n\r\n    /**\r\n     * Gets the near frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetNearPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[2];\r\n        frustumPlane.normal.y = m[7] + m[6];\r\n        frustumPlane.normal.z = m[11] + m[10];\r\n        frustumPlane.d = m[15] + m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the far frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetFarPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[2];\r\n        frustumPlane.normal.y = m[7] - m[6];\r\n        frustumPlane.normal.z = m[11] - m[10];\r\n        frustumPlane.d = m[15] - m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the left frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetLeftPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[0];\r\n        frustumPlane.normal.y = m[7] + m[4];\r\n        frustumPlane.normal.z = m[11] + m[8];\r\n        frustumPlane.d = m[15] + m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the right frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetRightPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[0];\r\n        frustumPlane.normal.y = m[7] - m[4];\r\n        frustumPlane.normal.z = m[11] - m[8];\r\n        frustumPlane.d = m[15] - m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the top frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetTopPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[1];\r\n        frustumPlane.normal.y = m[7] - m[5];\r\n        frustumPlane.normal.z = m[11] - m[9];\r\n        frustumPlane.d = m[15] - m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the bottom frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetBottomPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[1];\r\n        frustumPlane.normal.y = m[7] + m[5];\r\n        frustumPlane.normal.z = m[11] + m[9];\r\n        frustumPlane.d = m[15] + m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\r\n     * @param transform transformation matrix to be applied to the resulting frustum planes\r\n     * @param frustumPlanes the resuling frustum planes\r\n     */\r\n    public static GetPlanesToRef(transform: DeepImmutable<Matrix>, frustumPlanes: Plane[]): void {\r\n        // Near\r\n        Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\r\n\r\n        // Far\r\n        Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\r\n\r\n        // Left\r\n        Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\r\n\r\n        // Right\r\n        Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\r\n\r\n        // Top\r\n        Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\r\n\r\n        // Bottom\r\n        Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\r\n    }\r\n}\r\n\r\n/** Defines supported spaces */\r\nexport enum Space {\r\n    /** Local (object) space */\r\n    LOCAL = 0,\r\n    /** World space */\r\n    WORLD = 1,\r\n    /** Bone space */\r\n    BONE = 2\r\n}\r\n\r\n/** Defines the 3 main axes */\r\nexport class Axis {\r\n    /** X axis */\r\n    public static X: Vector3 = new Vector3(1.0, 0.0, 0.0);\r\n    /** Y axis */\r\n    public static Y: Vector3 = new Vector3(0.0, 1.0, 0.0);\r\n    /** Z axis */\r\n    public static Z: Vector3 = new Vector3(0.0, 0.0, 1.0);\r\n}\r\n\r\n/** Class used to represent a Bezier curve */\r\nexport class BezierCurve {\r\n    /**\r\n     * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\r\n     * @param t defines the time\r\n     * @param x1 defines the left coordinate on X axis\r\n     * @param y1 defines the left coordinate on Y axis\r\n     * @param x2 defines the right coordinate on X axis\r\n     * @param y2 defines the right coordinate on Y axis\r\n     * @returns the interpolated value\r\n     */\r\n    public static Interpolate(t: number, x1: number, y1: number, x2: number, y2: number): number {\r\n\r\n        // Extract X (which is equal to time here)\r\n        var f0 = 1 - 3 * x2 + 3 * x1;\r\n        var f1 = 3 * x2 - 6 * x1;\r\n        var f2 = 3 * x1;\r\n\r\n        var refinedT = t;\r\n        for (var i = 0; i < 5; i++) {\r\n            var refinedT2 = refinedT * refinedT;\r\n            var refinedT3 = refinedT2 * refinedT;\r\n\r\n            var x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;\r\n            var slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);\r\n            refinedT -= (x - t) * slope;\r\n            refinedT = Math.min(1, Math.max(0, refinedT));\r\n\r\n        }\r\n\r\n        // Resolve cubic bezier for the given x\r\n        return 3 * Math.pow(1 - refinedT, 2) * refinedT * y1 +\r\n            3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 +\r\n            Math.pow(refinedT, 3);\r\n    }\r\n}\r\n\r\n/**\r\n * Defines potential orientation for back face culling\r\n */\r\nexport enum Orientation {\r\n    /**\r\n     * Clockwise\r\n     */\r\n    CW = 0,\r\n    /** Counter clockwise */\r\n    CCW = 1\r\n}\r\n\r\n/**\r\n * Defines angle representation\r\n */\r\nexport class Angle {\r\n    private _radians: number;\r\n\r\n    /**\r\n     * Creates an Angle object of \"radians\" radians (float).\r\n     * @param radians the angle in radians\r\n     */\r\n    constructor(radians: number) {\r\n        this._radians = radians;\r\n        if (this._radians < 0.0) { this._radians += (2.0 * Math.PI); }\r\n    }\r\n\r\n    /**\r\n     * Get value in degrees\r\n     * @returns the Angle value in degrees (float)\r\n     */\r\n    public degrees() {\r\n        return this._radians * 180.0 / Math.PI;\r\n    }\r\n\r\n    /**\r\n     * Get value in radians\r\n     * @returns the Angle value in radians (float)\r\n     */\r\n    public radians() {\r\n        return this._radians;\r\n    }\r\n\r\n    /**\r\n     * Gets a new Angle object valued with the angle value in radians between the two given vectors\r\n     * @param a defines first vector\r\n     * @param b defines second vector\r\n     * @returns a new Angle\r\n     */\r\n    public static BetweenTwoPoints(a: DeepImmutable<Vector2>, b: DeepImmutable<Vector2>): Angle {\r\n        var delta = b.subtract(a);\r\n        var theta = Math.atan2(delta.y, delta.x);\r\n        return new Angle(theta);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Angle object from the given float in radians\r\n     * @param radians defines the angle value in radians\r\n     * @returns a new Angle\r\n     */\r\n    public static FromRadians(radians: number): Angle {\r\n        return new Angle(radians);\r\n    }\r\n    /**\r\n     * Gets a new Angle object from the given float in degrees\r\n     * @param degrees defines the angle value in degrees\r\n     * @returns a new Angle\r\n     */\r\n    public static FromDegrees(degrees: number): Angle {\r\n        return new Angle(degrees * Math.PI / 180.0);\r\n    }\r\n}\r\n\r\n/**\r\n * This represents an arc in a 2d space.\r\n */\r\nexport class Arc2 {\r\n    /**\r\n     * Defines the center point of the arc.\r\n     */\r\n    public centerPoint: Vector2;\r\n    /**\r\n     * Defines the radius of the arc.\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * Defines the angle of the arc (from mid point to end point).\r\n     */\r\n    public angle: Angle;\r\n    /**\r\n     * Defines the start angle of the arc (from start point to middle point).\r\n     */\r\n    public startAngle: Angle;\r\n    /**\r\n     * Defines the orientation of the arc (clock wise/counter clock wise).\r\n     */\r\n    public orientation: Orientation;\r\n\r\n    /**\r\n     * Creates an Arc object from the three given points : start, middle and end.\r\n     * @param startPoint Defines the start point of the arc\r\n     * @param midPoint Defines the midlle point of the arc\r\n     * @param endPoint Defines the end point of the arc\r\n     */\r\n    constructor(\r\n        /** Defines the start point of the arc */\r\n        public startPoint: Vector2,\r\n        /** Defines the mid point of the arc */\r\n        public midPoint: Vector2,\r\n        /** Defines the end point of the arc */\r\n        public endPoint: Vector2) {\r\n\r\n        var temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);\r\n        var startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2.;\r\n        var midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2.;\r\n        var det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) - (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);\r\n\r\n        this.centerPoint = new Vector2(\r\n            (startToMid * (midPoint.y - endPoint.y) - midToEnd * (startPoint.y - midPoint.y)) / det,\r\n            ((startPoint.x - midPoint.x) * midToEnd - (midPoint.x - endPoint.x) * startToMid) / det\r\n        );\r\n\r\n        this.radius = this.centerPoint.subtract(this.startPoint).length();\r\n\r\n        this.startAngle = Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\r\n\r\n        var a1 = this.startAngle.degrees();\r\n        var a2 = Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();\r\n        var a3 = Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();\r\n\r\n        // angles correction\r\n        if (a2 - a1 > +180.0) { a2 -= 360.0; }\r\n        if (a2 - a1 < -180.0) { a2 += 360.0; }\r\n        if (a3 - a2 > +180.0) { a3 -= 360.0; }\r\n        if (a3 - a2 < -180.0) { a3 += 360.0; }\r\n\r\n        this.orientation = (a2 - a1) < 0 ? Orientation.CW : Orientation.CCW;\r\n        this.angle = Angle.FromDegrees(this.orientation === Orientation.CW ? a1 - a3 : a3 - a1);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a 2D path made up of multiple 2D points\r\n */\r\nexport class Path2 {\r\n    private _points = new Array<Vector2>();\r\n    private _length = 0.0;\r\n\r\n    /**\r\n     * If the path start and end point are the same\r\n     */\r\n    public closed = false;\r\n\r\n    /**\r\n     * Creates a Path2 object from the starting 2D coordinates x and y.\r\n     * @param x the starting points x value\r\n     * @param y the starting points y value\r\n     */\r\n    constructor(x: number, y: number) {\r\n        this._points.push(new Vector2(x, y));\r\n    }\r\n\r\n    /**\r\n     * Adds a new segment until the given coordinates (x, y) to the current Path2.\r\n     * @param x the added points x value\r\n     * @param y the added points y value\r\n     * @returns the updated Path2.\r\n     */\r\n    public addLineTo(x: number, y: number): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n        var newPoint = new Vector2(x, y);\r\n        var previousPoint = this._points[this._points.length - 1];\r\n        this._points.push(newPoint);\r\n        this._length += newPoint.subtract(previousPoint).length();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\r\n     * @param midX middle point x value\r\n     * @param midY middle point y value\r\n     * @param endX end point x value\r\n     * @param endY end point y value\r\n     * @param numberOfSegments (default: 36)\r\n     * @returns the updated Path2.\r\n     */\r\n    public addArcTo(midX: number, midY: number, endX: number, endY: number, numberOfSegments = 36): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n        var startPoint = this._points[this._points.length - 1];\r\n        var midPoint = new Vector2(midX, midY);\r\n        var endPoint = new Vector2(endX, endY);\r\n\r\n        var arc = new Arc2(startPoint, midPoint, endPoint);\r\n\r\n        var increment = arc.angle.radians() / numberOfSegments;\r\n        if (arc.orientation === Orientation.CW) { increment *= -1; }\r\n        var currentAngle = arc.startAngle.radians() + increment;\r\n\r\n        for (var i = 0; i < numberOfSegments; i++) {\r\n            var x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;\r\n            var y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;\r\n            this.addLineTo(x, y);\r\n            currentAngle += increment;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Closes the Path2.\r\n     * @returns the Path2.\r\n     */\r\n    public close(): Path2 {\r\n        this.closed = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Gets the sum of the distance between each sequential point in the path\r\n     * @returns the Path2 total length (float).\r\n     */\r\n    public length(): number {\r\n        var result = this._length;\r\n\r\n        if (!this.closed) {\r\n            var lastPoint = this._points[this._points.length - 1];\r\n            var firstPoint = this._points[0];\r\n            result += (firstPoint.subtract(lastPoint).length());\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the points which construct the path\r\n     * @returns the Path2 internal array of points.\r\n     */\r\n    public getPoints(): Vector2[] {\r\n        return this._points;\r\n    }\r\n\r\n    /**\r\n     * Retreives the point at the distance aways from the starting point\r\n     * @param normalizedLengthPosition the length along the path to retreive the point from\r\n     * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\r\n     */\r\n    public getPointAtLengthPosition(normalizedLengthPosition: number): Vector2 {\r\n        if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var lengthPosition = normalizedLengthPosition * this.length();\r\n\r\n        var previousOffset = 0;\r\n        for (var i = 0; i < this._points.length; i++) {\r\n            var j = (i + 1) % this._points.length;\r\n\r\n            var a = this._points[i];\r\n            var b = this._points[j];\r\n            var bToA = b.subtract(a);\r\n\r\n            var nextOffset = (bToA.length() + previousOffset);\r\n            if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\r\n                var dir = bToA.normalize();\r\n                var localOffset = lengthPosition - previousOffset;\r\n\r\n                return new Vector2(\r\n                    a.x + (dir.x * localOffset),\r\n                    a.y + (dir.y * localOffset)\r\n                );\r\n            }\r\n            previousOffset = nextOffset;\r\n        }\r\n\r\n        return Vector2.Zero();\r\n    }\r\n\r\n    /**\r\n     * Creates a new path starting from an x and y position\r\n     * @param x starting x value\r\n     * @param y starting y value\r\n     * @returns a new Path2 starting at the coordinates (x, y).\r\n     */\r\n    public static StartingAt(x: number, y: number): Path2 {\r\n        return new Path2(x, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a 3D path made up of multiple 3D points\r\n */\r\nexport class Path3D {\r\n    private _curve = new Array<Vector3>();\r\n    private _distances = new Array<number>();\r\n    private _tangents = new Array<Vector3>();\r\n    private _normals = new Array<Vector3>();\r\n    private _binormals = new Array<Vector3>();\r\n    private _raw: boolean;\r\n\r\n    /**\r\n    * new Path3D(path, normal, raw)\r\n    * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\r\n    * please read the description in the tutorial : https://doc.babylonjs.com/how_to/how_to_use_path3d\r\n    * @param path an array of Vector3, the curve axis of the Path3D\r\n    * @param firstNormal (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\r\n    * @param raw (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\r\n    */\r\n    constructor(\r\n        /**\r\n         * an array of Vector3, the curve axis of the Path3D\r\n         */\r\n        public path: Vector3[],\r\n        firstNormal: Nullable<Vector3> = null,\r\n        raw?: boolean\r\n    ) {\r\n        for (var p = 0; p < path.length; p++) {\r\n            this._curve[p] = path[p].clone(); // hard copy\r\n        }\r\n        this._raw = raw || false;\r\n        this._compute(firstNormal);\r\n    }\r\n\r\n    /**\r\n     * Returns the Path3D array of successive Vector3 designing its curve.\r\n     * @returns the Path3D array of successive Vector3 designing its curve.\r\n     */\r\n    public getCurve(): Vector3[] {\r\n        return this._curve;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with tangent vectors on each Path3D curve point.\r\n     * @returns an array populated with tangent vectors on each Path3D curve point.\r\n     */\r\n    public getTangents(): Vector3[] {\r\n        return this._tangents;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with normal vectors on each Path3D curve point.\r\n     * @returns an array populated with normal vectors on each Path3D curve point.\r\n     */\r\n    public getNormals(): Vector3[] {\r\n        return this._normals;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with binormal vectors on each Path3D curve point.\r\n     * @returns an array populated with binormal vectors on each Path3D curve point.\r\n     */\r\n    public getBinormals(): Vector3[] {\r\n        return this._binormals;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with distances (float) of the i-th point from the first curve point.\r\n     * @returns an array populated with distances (float) of the i-th point from the first curve point.\r\n     */\r\n    public getDistances(): number[] {\r\n        return this._distances;\r\n    }\r\n\r\n    /**\r\n     * Forces the Path3D tangent, normal, binormal and distance recomputation.\r\n     * @param path path which all values are copied into the curves points\r\n     * @param firstNormal which should be projected onto the curve\r\n     * @returns the same object updated.\r\n     */\r\n    public update(path: Vector3[], firstNormal: Nullable<Vector3> = null): Path3D {\r\n        for (var p = 0; p < path.length; p++) {\r\n            this._curve[p].x = path[p].x;\r\n            this._curve[p].y = path[p].y;\r\n            this._curve[p].z = path[p].z;\r\n        }\r\n        this._compute(firstNormal);\r\n        return this;\r\n    }\r\n\r\n    // private function compute() : computes tangents, normals and binormals\r\n    private _compute(firstNormal: Nullable<Vector3>): void {\r\n        var l = this._curve.length;\r\n\r\n        // first and last tangents\r\n        this._tangents[0] = this._getFirstNonNullVector(0);\r\n        if (!this._raw) {\r\n            this._tangents[0].normalize();\r\n        }\r\n        this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);\r\n        if (!this._raw) {\r\n            this._tangents[l - 1].normalize();\r\n        }\r\n\r\n        // normals and binormals at first point : arbitrary vector with _normalVector()\r\n        var tg0 = this._tangents[0];\r\n        var pp0 = this._normalVector(tg0, firstNormal);\r\n        this._normals[0] = pp0;\r\n        if (!this._raw) {\r\n            this._normals[0].normalize();\r\n        }\r\n        this._binormals[0] = Vector3.Cross(tg0, this._normals[0]);\r\n        if (!this._raw) {\r\n            this._binormals[0].normalize();\r\n        }\r\n        this._distances[0] = 0.0;\r\n\r\n        // normals and binormals : next points\r\n        var prev: Vector3;        // previous vector (segment)\r\n        var cur: Vector3;         // current vector (segment)\r\n        var curTang: Vector3;     // current tangent\r\n        // previous normal\r\n        var prevBinor: Vector3;   // previous binormal\r\n\r\n        for (var i = 1; i < l; i++) {\r\n            // tangents\r\n            prev = this._getLastNonNullVector(i);\r\n            if (i < l - 1) {\r\n                cur = this._getFirstNonNullVector(i);\r\n                this._tangents[i] = prev.add(cur);\r\n                this._tangents[i].normalize();\r\n            }\r\n            this._distances[i] = this._distances[i - 1] + prev.length();\r\n\r\n            // normals and binormals\r\n            // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\r\n            curTang = this._tangents[i];\r\n            prevBinor = this._binormals[i - 1];\r\n            this._normals[i] = Vector3.Cross(prevBinor, curTang);\r\n            if (!this._raw) {\r\n                this._normals[i].normalize();\r\n            }\r\n            this._binormals[i] = Vector3.Cross(curTang, this._normals[i]);\r\n            if (!this._raw) {\r\n                this._binormals[i].normalize();\r\n            }\r\n        }\r\n    }\r\n\r\n    // private function getFirstNonNullVector(index)\r\n    // returns the first non null vector from index : curve[index + N].subtract(curve[index])\r\n    private _getFirstNonNullVector(index: number): Vector3 {\r\n        var i = 1;\r\n        var nNVector: Vector3 = this._curve[index + i].subtract(this._curve[index]);\r\n        while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\r\n            i++;\r\n            nNVector = this._curve[index + i].subtract(this._curve[index]);\r\n        }\r\n        return nNVector;\r\n    }\r\n\r\n    // private function getLastNonNullVector(index)\r\n    // returns the last non null vector from index : curve[index].subtract(curve[index - N])\r\n    private _getLastNonNullVector(index: number): Vector3 {\r\n        var i = 1;\r\n        var nLVector: Vector3 = this._curve[index].subtract(this._curve[index - i]);\r\n        while (nLVector.length() === 0 && index > i + 1) {\r\n            i++;\r\n            nLVector = this._curve[index].subtract(this._curve[index - i]);\r\n        }\r\n        return nLVector;\r\n    }\r\n\r\n    // private function normalVector(v0, vt, va) :\r\n    // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\r\n    // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\r\n    private _normalVector(vt: Vector3, va: Nullable<Vector3>): Vector3 {\r\n        var normal0: Vector3;\r\n        var tgl = vt.length();\r\n        if (tgl === 0.0) {\r\n            tgl = 1.0;\r\n        }\r\n\r\n        if (va === undefined || va === null) {\r\n            var point: Vector3;\r\n            if (!Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, Epsilon)) {     // search for a point in the plane\r\n                point = new Vector3(0.0, -1.0, 0.0);\r\n            }\r\n            else if (!Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, Epsilon)) {\r\n                point = new Vector3(1.0, 0.0, 0.0);\r\n            }\r\n            else if (!Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, Epsilon)) {\r\n                point = new Vector3(0.0, 0.0, 1.0);\r\n            }\r\n            else {\r\n                point = Vector3.Zero();\r\n            }\r\n            normal0 = Vector3.Cross(vt, point);\r\n        }\r\n        else {\r\n            normal0 = Vector3.Cross(vt, va);\r\n            Vector3.CrossToRef(normal0, vt, normal0);\r\n        }\r\n        normal0.normalize();\r\n        return normal0;\r\n    }\r\n}\r\n\r\n/**\r\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n * A Curve3 is designed from a series of successive Vector3.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_curve3\r\n */\r\nexport class Curve3 {\r\n    private _points: Vector3[];\r\n    private _length: number = 0.0;\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Quadratic Bezier curve : https://doc.babylonjs.com/how_to/how_to_use_curve3#quadratic-bezier-curve\r\n     * @param v0 (Vector3) the origin point of the Quadratic Bezier\r\n     * @param v1 (Vector3) the control point\r\n     * @param v2 (Vector3) the end point of the Quadratic Bezier\r\n     * @param nbPoints (integer) the wanted number of points in the curve\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateQuadraticBezier(v0: DeepImmutable<Vector3>, v1: DeepImmutable<Vector3>, v2: DeepImmutable<Vector3>, nbPoints: number): Curve3 {\r\n        nbPoints = nbPoints > 2 ? nbPoints : 3;\r\n        var bez = new Array<Vector3>();\r\n        var equation = (t: number, val0: number, val1: number, val2: number) => {\r\n            var res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\r\n            return res;\r\n        };\r\n        for (var i = 0; i <= nbPoints; i++) {\r\n            bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));\r\n        }\r\n        return new Curve3(bez);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Cubic Bezier curve : https://doc.babylonjs.com/how_to/how_to_use_curve3#cubic-bezier-curve\r\n     * @param v0 (Vector3) the origin point of the Cubic Bezier\r\n     * @param v1 (Vector3) the first control point\r\n     * @param v2 (Vector3) the second control point\r\n     * @param v3 (Vector3) the end point of the Cubic Bezier\r\n     * @param nbPoints (integer) the wanted number of points in the curve\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateCubicBezier(v0: DeepImmutable<Vector3>, v1: DeepImmutable<Vector3>, v2: DeepImmutable<Vector3>, v3: DeepImmutable<Vector3>, nbPoints: number): Curve3 {\r\n        nbPoints = nbPoints > 3 ? nbPoints : 4;\r\n        var bez = new Array<Vector3>();\r\n        var equation = (t: number, val0: number, val1: number, val2: number, val3: number) => {\r\n            var res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 + 3.0 * t * (1.0 - t) * (1.0 - t) * val1 + 3.0 * t * t * (1.0 - t) * val2 + t * t * t * val3;\r\n            return res;\r\n        };\r\n        for (var i = 0; i <= nbPoints; i++) {\r\n            bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));\r\n        }\r\n        return new Curve3(bez);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Hermite Spline curve : https://doc.babylonjs.com/how_to/how_to_use_curve3#hermite-spline\r\n     * @param p1 (Vector3) the origin point of the Hermite Spline\r\n     * @param t1 (Vector3) the tangent vector at the origin point\r\n     * @param p2 (Vector3) the end point of the Hermite Spline\r\n     * @param t2 (Vector3) the tangent vector at the end point\r\n     * @param nbPoints (integer) the wanted number of points in the curve\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateHermiteSpline(p1: DeepImmutable<Vector3>, t1: DeepImmutable<Vector3>, p2: DeepImmutable<Vector3>, t2: DeepImmutable<Vector3>, nbPoints: number): Curve3 {\r\n        var hermite = new Array<Vector3>();\r\n        var step = 1.0 / nbPoints;\r\n        for (var i = 0; i <= nbPoints; i++) {\r\n            hermite.push(Vector3.Hermite(p1, t1, p2, t2, i * step));\r\n        }\r\n        return new Curve3(hermite);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a CatmullRom Spline curve :\r\n     * @param points (array of Vector3) the points the spline must pass through. At least, four points required\r\n     * @param nbPoints (integer) the wanted number of points between each curve control points\r\n     * @param closed (boolean) optional with default false, when true forms a closed loop from the points\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateCatmullRomSpline(points: DeepImmutable<Vector3[]>, nbPoints: number, closed?: boolean): Curve3 {\r\n        var catmullRom = new Array<Vector3>();\r\n        var step = 1.0 / nbPoints;\r\n        var amount = 0.0;\r\n        if (closed) {\r\n            var pointsCount = points.length;\r\n            for (var i = 0; i < pointsCount; i++) {\r\n                amount = 0;\r\n                for (var c = 0; c < nbPoints; c++) {\r\n                    catmullRom.push(Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount));\r\n                    amount += step;\r\n                }\r\n            }\r\n            catmullRom.push(catmullRom[0]);\r\n        }\r\n        else {\r\n            var totalPoints = new Array<Vector3>();\r\n            totalPoints.push(points[0].clone());\r\n            Array.prototype.push.apply(totalPoints, points);\r\n            totalPoints.push(points[points.length - 1].clone());\r\n            for (var i = 0; i < totalPoints.length - 3; i++) {\r\n                amount = 0;\r\n                for (var c = 0; c < nbPoints; c++) {\r\n                    catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\r\n                    amount += step;\r\n                }\r\n            }\r\n            i--;\r\n            catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\r\n        }\r\n        return new Curve3(catmullRom);\r\n    }\r\n\r\n    /**\r\n     * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n     * A Curve3 is designed from a series of successive Vector3.\r\n     * Tuto : https://doc.babylonjs.com/how_to/how_to_use_curve3#curve3-object\r\n     * @param points points which make up the curve\r\n     */\r\n    constructor(points: Vector3[]) {\r\n        this._points = points;\r\n        this._length = this._computeLength(points);\r\n    }\r\n\r\n    /**\r\n     * @returns the Curve3 stored array of successive Vector3\r\n     */\r\n    public getPoints() {\r\n        return this._points;\r\n    }\r\n\r\n    /**\r\n     * @returns the computed length (float) of the curve.\r\n     */\r\n    public length() {\r\n        return this._length;\r\n    }\r\n\r\n    /**\r\n     * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\r\n     * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\r\n     * curveA and curveB keep unchanged.\r\n     * @param curve the curve to continue from this curve\r\n     * @returns the newly constructed curve\r\n     */\r\n    public continue(curve: DeepImmutable<Curve3>): Curve3 {\r\n        var lastPoint = this._points[this._points.length - 1];\r\n        var continuedPoints = this._points.slice();\r\n        var curvePoints = curve.getPoints();\r\n        for (var i = 1; i < curvePoints.length; i++) {\r\n            continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));\r\n        }\r\n        var continuedCurve = new Curve3(continuedPoints);\r\n        return continuedCurve;\r\n    }\r\n\r\n    private _computeLength(path: DeepImmutable<Vector3[]>): number {\r\n        var l = 0;\r\n        for (var i = 1; i < path.length; i++) {\r\n            l += (path[i].subtract(path[i - 1])).length();\r\n        }\r\n        return l;\r\n    }\r\n}\r\n\r\n// Vertex formats\r\n/**\r\n * Contains position and normal vectors for a vertex\r\n */\r\nexport class PositionNormalVertex {\r\n    /**\r\n     * Creates a PositionNormalVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     */\r\n    constructor(\r\n        /** the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up()\r\n    ) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Clones the PositionNormalVertex\r\n     * @returns the cloned PositionNormalVertex\r\n     */\r\n    public clone(): PositionNormalVertex {\r\n        return new PositionNormalVertex(this.position.clone(), this.normal.clone());\r\n    }\r\n}\r\n\r\n/**\r\n * Contains position, normal and uv vectors for a vertex\r\n */\r\nexport class PositionNormalTextureVertex {\r\n    /**\r\n     * Creates a PositionNormalTextureVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     * @param uv the uv of the vertex (default: 0,0)\r\n     */\r\n    constructor(\r\n        /** the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up(),\r\n        /** the uv of the vertex (default: 0,0) */\r\n        public uv: Vector2 = Vector2.Zero()\r\n    ) {\r\n\r\n    }\r\n    /**\r\n     * Clones the PositionNormalTextureVertex\r\n     * @returns the cloned PositionNormalTextureVertex\r\n     */\r\n    public clone(): PositionNormalTextureVertex {\r\n        return new PositionNormalTextureVertex(this.position.clone(), this.normal.clone(), this.uv.clone());\r\n    }\r\n}\r\n\r\n// Temporary pre-allocated objects for engine internal use\r\n// usage in any internal function :\r\n// var tmp = Tmp.Vector3[0];   <= gets access to the first pre-created Vector3\r\n// There's a Tmp array per object type : int, float, Vector2, Vector3, Vector4, Quaternion, Matrix\r\n/**\r\n * @hidden\r\n */\r\nexport class Tmp {\r\n\r\n    public static Color3: Color3[] = ArrayTools.BuildArray(3, Color3.Black);\r\n    public static Color4: Color4[] = ArrayTools.BuildArray(3, () => new Color4(0, 0, 0, 0));\r\n    public static Vector2: Vector2[] = ArrayTools.BuildArray(3, Vector2.Zero); // 3 temp Vector2 at once should be enough\r\n    public static Vector3: Vector3[] = ArrayTools.BuildArray(13, Vector3.Zero); // 13 temp Vector3 at once should be enough\r\n    public static Vector4: Vector4[] = ArrayTools.BuildArray(3, Vector4.Zero); // 3 temp Vector4 at once should be enough\r\n    public static Quaternion: Quaternion[] = ArrayTools.BuildArray(2, Quaternion.Zero); // 2 temp Quaternion at once should be enough\r\n    public static Matrix: Matrix[] = ArrayTools.BuildArray(8, Matrix.Identity); // 8 temp Matrices at once should be enough\r\n}\r\n/**\r\n * @hidden\r\n * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\r\n */\r\nclass MathTmp {\r\n    public static Vector3: Vector3[] = ArrayTools.BuildArray(6, Vector3.Zero);\r\n    public static Matrix: Matrix[] = ArrayTools.BuildArray(2, Matrix.Identity);\r\n    public static Quaternion: Quaternion[] = ArrayTools.BuildArray(3, Quaternion.Zero);\r\n}\r\n"]}