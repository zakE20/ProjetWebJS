/**
 * Extended version of XMLHttpRequest with support for customizations (headers, ...)
 */
export declare class WebRequest {
    private _xhr;
    /**
     * Custom HTTP Request Headers to be sent with XMLHttpRequests
     * i.e. when loading files, where the server/service expects an Authorization header
     */
    static CustomRequestHeaders: {
        [key: string]: string;
    };
    /**
     * Add callback functions in this array to update all the requests before they get sent to the network
     */
    static CustomRequestModifiers: ((request: XMLHttpRequest) => void)[];
    private _injectCustomRequestHeaders;
    /**
     * Gets or sets a function to be called when loading progress changes
     */
    onprogress: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
    /**
     * Returns client's state
     */
    readonly readyState: number;
    /**
     * Returns client's status
     */
    readonly status: number;
    /**
     * Returns client's status as a text
     */
    readonly statusText: string;
    /**
     * Returns client's response
     */
    readonly response: any;
    /**
     * Returns client's response url
     */
    readonly responseURL: string;
    /**
     * Returns client's response as text
     */
    readonly responseText: string;
    /**
     * Gets or sets the expected response type
     */
    responseType: XMLHttpRequestResponseType;
    /** @hidden */
    addEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    /** @hidden */
    removeEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    /**
     * Cancels any network activity
     */
    abort(): void;
    /**
     * Initiates the request. The optional argument provides the request body. The argument is ignored if request method is GET or HEAD
     * @param body defines an optional request body
     */
    send(body?: Document | BodyInit | null): void;
    /**
     * Sets the request method, request URL
     * @param method defines the method to use (GET, POST, etc..)
     * @param url defines the url to connect with
     */
    open(method: string, url: string): void;
}
