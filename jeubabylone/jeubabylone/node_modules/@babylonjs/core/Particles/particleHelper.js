import { Tools } from "../Misc/tools";
import { Color4 } from "../Maths/math";
import { Texture } from "../Materials/Textures/texture";
import { EngineStore } from "../Engines/engineStore";
import { GPUParticleSystem } from "./gpuParticleSystem";
import { ParticleSystemSet } from "./particleSystemSet";
import { ParticleSystem } from "./particleSystem";
import { Constants } from "../Engines/constants";
/**
 * This class is made for on one-liner static method to help creating particle system set.
 */
var ParticleHelper = /** @class */ (function () {
    function ParticleHelper() {
    }
    /**
     * Create a default particle system that you can tweak
     * @param emitter defines the emitter to use
     * @param capacity defines the system capacity (default is 500 particles)
     * @param scene defines the hosting scene
     * @param useGPU defines if a GPUParticleSystem must be created (default is false)
     * @returns the new Particle system
     */
    ParticleHelper.CreateDefault = function (emitter, capacity, scene, useGPU) {
        if (capacity === void 0) { capacity = 500; }
        if (useGPU === void 0) { useGPU = false; }
        var system;
        if (useGPU) {
            system = new GPUParticleSystem("default system", { capacity: capacity }, scene);
        }
        else {
            system = new ParticleSystem("default system", capacity, scene);
        }
        system.emitter = emitter;
        system.particleTexture = new Texture("https://www.babylonjs.com/assets/Flare.png", system.getScene());
        system.createConeEmitter(0.1, Math.PI / 4);
        // Particle color
        system.color1 = new Color4(1.0, 1.0, 1.0, 1.0);
        system.color2 = new Color4(1.0, 1.0, 1.0, 1.0);
        system.colorDead = new Color4(1.0, 1.0, 1.0, 0.0);
        // Particle Size
        system.minSize = 0.1;
        system.maxSize = 0.1;
        // Emission speed
        system.minEmitPower = 2;
        system.maxEmitPower = 2;
        // Update speed
        system.updateSpeed = 1 / 60;
        system.emitRate = 30;
        return system;
    };
    /**
     * This is the main static method (one-liner) of this helper to create different particle systems
     * @param type This string represents the type to the particle system to create
     * @param scene The scene where the particle system should live
     * @param gpu If the system will use gpu
     * @returns the ParticleSystemSet created
     */
    ParticleHelper.CreateAsync = function (type, scene, gpu) {
        if (gpu === void 0) { gpu = false; }
        if (!scene) {
            scene = EngineStore.LastCreatedScene;
        }
        var token = {};
        scene._addPendingData(token);
        return new Promise(function (resolve, reject) {
            if (gpu && !GPUParticleSystem.IsSupported) {
                scene._removePendingData(token);
                return reject("Particle system with GPU is not supported.");
            }
            Tools.LoadFile(ParticleHelper.BaseAssetsUrl + "/systems/" + type + ".json", function (data) {
                scene._removePendingData(token);
                var newData = JSON.parse(data.toString());
                return resolve(ParticleSystemSet.Parse(newData, scene, gpu));
            }, undefined, undefined, undefined, function () {
                scene._removePendingData(token);
                return reject("An error occured while the creation of your particle system. Check if your type '" + type + "' exists.");
            });
        });
    };
    /**
     * Static function used to export a particle system to a ParticleSystemSet variable.
     * Please note that the emitter shape is not exported
     * @param systems defines the particle systems to export
     * @returns the created particle system set
     */
    ParticleHelper.ExportSet = function (systems) {
        var set = new ParticleSystemSet();
        for (var _i = 0, systems_1 = systems; _i < systems_1.length; _i++) {
            var system = systems_1[_i];
            set.systems.push(system);
        }
        return set;
    };
    /**
     * Gets or sets base Assets URL
     */
    ParticleHelper.BaseAssetsUrl = Constants.PARTICLES_BaseAssetsUrl;
    return ParticleHelper;
}());
export { ParticleHelper };
//# sourceMappingURL=particleHelper.js.map