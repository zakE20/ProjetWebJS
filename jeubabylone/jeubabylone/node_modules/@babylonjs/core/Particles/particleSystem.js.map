{"version":3,"file":"particleSystem.js","sourceRoot":"","sources":["../../../sourceES6/core/Particles/particleSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\nimport { IAnimatable, Tools, FactorGradient, ColorGradient, Color3Gradient } from \"../Misc/tools\";\nimport { Observable, Observer } from \"../Misc/observable\";\nimport { Color4, Color3, Vector3, Matrix, Tmp, ISize, Vector4 } from \"../Maths/math\";\nimport { Scalar } from \"../Maths/math.scalar\";\nimport { VertexBuffer } from \"../Meshes/buffer\";\nimport { Buffer } from \"../Meshes/buffer\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\nimport { Material } from \"../Materials/material\";\nimport { MaterialHelper } from \"../Materials/materialHelper\";\nimport { Effect } from \"../Materials/effect\";\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { RawTexture } from \"../Materials/Textures/rawTexture\";\nimport { ProceduralTexture } from \"../Materials/Textures/Procedurals/proceduralTexture\";\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { Scene, IDisposable } from \"../scene\";\nimport { BoxParticleEmitter, IParticleEmitterType, HemisphericParticleEmitter, SphereParticleEmitter, SphereDirectedParticleEmitter, CylinderParticleEmitter, ConeParticleEmitter } from \"../Particles/EmitterTypes/index\";\nimport { IParticleSystem } from \"./IParticleSystem\";\nimport { BaseParticleSystem } from \"./baseParticleSystem\";\nimport { Particle } from \"./particle\";\nimport { SubEmitter, SubEmitterType } from \"./subEmitter\";\nimport { Constants } from \"../Engines/constants\";\nimport { SerializationHelper } from \"../Misc/decorators\";\nimport { DeepCopier } from \"../Misc/deepCopier\";\nimport { _TypeStore } from '../Misc/typeStore';\n\nimport \"../Shaders/particles.fragment\";\nimport \"../Shaders/particles.vertex\";\nimport { DataBuffer } from '../Meshes/dataBuffer';\n\n/**\n * This represents a particle system in Babylon.\n * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\n * Particles can take different shapes while emitted like box, sphere, cone or you can write your custom function.\n * @example https://doc.babylonjs.com/babylon101/particles\n */\nexport class ParticleSystem extends BaseParticleSystem implements IDisposable, IAnimatable, IParticleSystem {\n\n    /**\n     * Billboard mode will only apply to Y axis\n     */\n    public static readonly BILLBOARDMODE_Y = Constants.PARTICLES_BILLBOARDMODE_Y;\n    /**\n     * Billboard mode will apply to all axes\n     */\n    public static readonly BILLBOARDMODE_ALL = Constants.PARTICLES_BILLBOARDMODE_ALL;\n    /**\n     * Special billboard mode where the particle will be biilboard to the camera but rotated to align with direction\n     */\n    public static readonly BILLBOARDMODE_STRETCHED = Constants.PARTICLES_BILLBOARDMODE_STRETCHED;\n\n    /**\n     * This function can be defined to provide custom update for active particles.\n     * This function will be called instead of regular update (age, position, color, etc.).\n     * Do not forget that this function will be called on every frame so try to keep it simple and fast :)\n     */\n    public updateFunction: (particles: Particle[]) => void;\n\n    private _emitterWorldMatrix: Matrix;\n\n    /**\n     * This function can be defined to specify initial direction for every new particle.\n     * It by default use the emitterType defined function\n     */\n    public startDirectionFunction: (worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle) => void;\n    /**\n     * This function can be defined to specify initial position for every new particle.\n     * It by default use the emitterType defined function\n     */\n    public startPositionFunction: (worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle) => void;\n\n    /**\n     * @hidden\n     */\n    public _inheritedVelocityOffset = new Vector3();\n    /**\n    * An event triggered when the system is disposed\n    */\n    public onDisposeObservable = new Observable<ParticleSystem>();\n\n    private _onDisposeObserver: Nullable<Observer<ParticleSystem>>;\n    /**\n     * Sets a callback that will be triggered when the system is disposed\n     */\n    public set onDispose(callback: () => void) {\n        if (this._onDisposeObserver) {\n            this.onDisposeObservable.remove(this._onDisposeObserver);\n        }\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\n    }\n\n    private _particles = new Array<Particle>();\n    private _epsilon: number;\n    private _capacity: number;\n    private _stockParticles = new Array<Particle>();\n    private _newPartsExcess = 0;\n    private _vertexData: Float32Array;\n    private _vertexBuffer: Nullable<Buffer>;\n    private _vertexBuffers: { [key: string]: VertexBuffer } = {};\n    private _spriteBuffer: Nullable<Buffer>;\n    private _indexBuffer: Nullable<DataBuffer>;\n    private _effect: Effect;\n    private _customEffect: Nullable<Effect>;\n    private _cachedDefines: string;\n    private _scaledColorStep = new Color4(0, 0, 0, 0);\n    private _colorDiff = new Color4(0, 0, 0, 0);\n    private _scaledDirection = Vector3.Zero();\n    private _scaledGravity = Vector3.Zero();\n    private _currentRenderId = -1;\n    private _alive: boolean;\n    private _useInstancing = false;\n\n    private _started = false;\n    private _stopped = false;\n    private _actualFrame = 0;\n    private _scaledUpdateSpeed: number;\n    private _vertexBufferSize: number;\n\n    /** @hidden */\n    public _currentEmitRateGradient: Nullable<FactorGradient>;\n    /** @hidden */\n    public _currentEmitRate1 = 0;\n    /** @hidden */\n    public _currentEmitRate2 = 0;\n\n    /** @hidden */\n    public _currentStartSizeGradient: Nullable<FactorGradient>;\n    /** @hidden */\n    public _currentStartSize1 = 0;\n    /** @hidden */\n    public _currentStartSize2 = 0;\n\n    private readonly _rawTextureWidth = 256;\n    private _rampGradientsTexture: Nullable<RawTexture>;\n    private _useRampGradients = false;\n\n    /** Gets or sets a boolean indicating that ramp gradients must be used\n     * @see http://doc.babylonjs.com/babylon101/particles#ramp-gradients\n     */\n    public get useRampGradients(): boolean {\n        return this._useRampGradients;\n    }\n\n    public set useRampGradients(value: boolean) {\n        if (this._useRampGradients === value) {\n            return;\n        }\n\n        this._useRampGradients = value;\n\n        this._resetEffect();\n    }\n\n    // Sub-emitters\n    /**\n     * The Sub-emitters templates that will be used to generate the sub particle system to be associated with the system, this property is used by the root particle system only.\n     * When a particle is spawned, an array will be chosen at random and all the emitters in that array will be attached to the particle.  (Default: [])\n     */\n    public subEmitters: Array<ParticleSystem | SubEmitter | Array<SubEmitter>>;\n    // the subEmitters field above converted to a constant type\n    private _subEmitters: Array<Array<SubEmitter>>;\n    /**\n     * @hidden\n     * If the particle systems emitter should be disposed when the particle system is disposed\n     */\n    public _disposeEmitterOnDispose = false;\n    /**\n    * The current active Sub-systems, this property is used by the root particle system only.\n    */\n    public activeSubSystems: Array<ParticleSystem>;\n\n    private _rootParticleSystem: Nullable<ParticleSystem>;\n    //end of Sub-emitter\n\n    /**\n     * Gets the current list of active particles\n     */\n    public get particles(): Particle[] {\n        return this._particles;\n    }\n\n    /**\n     * Returns the string \"ParticleSystem\"\n     * @returns a string containing the class name\n     */\n    public getClassName(): string {\n        return \"ParticleSystem\";\n    }\n\n    /**\n     * Instantiates a particle system.\n     * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\n     * @param name The name of the particle system\n     * @param capacity The max number of particles alive at the same time\n     * @param scene The scene the particle system belongs to\n     * @param customEffect a custom effect used to change the way particles are rendered by default\n     * @param isAnimationSheetEnabled Must be true if using a spritesheet to animate the particles texture\n     * @param epsilon Offset used to render the particles\n     */\n    constructor(name: string, capacity: number, scene: Scene, customEffect: Nullable<Effect> = null, isAnimationSheetEnabled: boolean = false, epsilon: number = 0.01) {\n        super(name);\n\n        this._capacity = capacity;\n\n        this._epsilon = epsilon;\n        this._isAnimationSheetEnabled = isAnimationSheetEnabled;\n\n        this._scene = scene || EngineStore.LastCreatedScene;\n\n        // Setup the default processing configuration to the scene.\n        this._attachImageProcessingConfiguration(null);\n\n        this._customEffect = customEffect;\n\n        this._scene.particleSystems.push(this);\n\n        this._useInstancing = this._scene.getEngine().getCaps().instancedArrays;\n\n        this._createIndexBuffer();\n        this._createVertexBuffers();\n\n        // Default emitter type\n        this.particleEmitterType = new BoxParticleEmitter();\n\n        // Update\n        this.updateFunction = (particles: Particle[]): void => {\n            let noiseTextureSize: Nullable<ISize> = null;\n            let noiseTextureData: Nullable<Uint8Array> = null;\n\n            if (this.noiseTexture) { // We need to get texture data back to CPU\n                noiseTextureSize = this.noiseTexture.getSize();\n                noiseTextureData = <Nullable<Uint8Array>>(this.noiseTexture.getContent());\n            }\n\n            for (var index = 0; index < particles.length; index++) {\n                var particle = particles[index];\n\n                let scaledUpdateSpeed = this._scaledUpdateSpeed;\n                let previousAge = particle.age;\n                particle.age += scaledUpdateSpeed;\n\n                // Evaluate step to death\n                if (particle.age > particle.lifeTime) {\n                    let diff = particle.age - previousAge;\n                    let oldDiff = particle.lifeTime - previousAge;\n\n                    scaledUpdateSpeed = (oldDiff * scaledUpdateSpeed) / diff;\n\n                    particle.age = particle.lifeTime;\n                }\n\n                let ratio = particle.age / particle.lifeTime;\n\n                // Color\n                if (this._colorGradients && this._colorGradients.length > 0) {\n                    Tools.GetCurrentGradient(ratio, this._colorGradients, (currentGradient, nextGradient, scale) => {\n                        if (currentGradient !== particle._currentColorGradient) {\n                            particle._currentColor1.copyFrom(particle._currentColor2);\n                            (<ColorGradient>nextGradient).getColorToRef(particle._currentColor2);\n                            particle._currentColorGradient = (<ColorGradient>currentGradient);\n                        }\n                        Color4.LerpToRef(particle._currentColor1, particle._currentColor2, scale, particle.color);\n                    });\n                }\n                else {\n                    particle.colorStep.scaleToRef(scaledUpdateSpeed, this._scaledColorStep);\n                    particle.color.addInPlace(this._scaledColorStep);\n\n                    if (particle.color.a < 0) {\n                        particle.color.a = 0;\n                    }\n                }\n\n                // Angular speed\n                if (this._angularSpeedGradients && this._angularSpeedGradients.length > 0) {\n                    Tools.GetCurrentGradient(ratio, this._angularSpeedGradients, (currentGradient, nextGradient, scale) => {\n                        if (currentGradient !== particle._currentAngularSpeedGradient) {\n                            particle._currentAngularSpeed1 = particle._currentAngularSpeed2;\n                            particle._currentAngularSpeed2 = (<FactorGradient>nextGradient).getFactor();\n                            particle._currentAngularSpeedGradient = (<FactorGradient>currentGradient);\n                        }\n                        particle.angularSpeed = Scalar.Lerp(particle._currentAngularSpeed1, particle._currentAngularSpeed2, scale);\n                    });\n                }\n                particle.angle += particle.angularSpeed * scaledUpdateSpeed;\n\n                // Direction\n                let directionScale = scaledUpdateSpeed;\n\n                /// Velocity\n                if (this._velocityGradients && this._velocityGradients.length > 0) {\n                    Tools.GetCurrentGradient(ratio, this._velocityGradients, (currentGradient, nextGradient, scale) => {\n                        if (currentGradient !== particle._currentVelocityGradient) {\n                            particle._currentVelocity1 = particle._currentVelocity2;\n                            particle._currentVelocity2 = (<FactorGradient>nextGradient).getFactor();\n                            particle._currentVelocityGradient = (<FactorGradient>currentGradient);\n                        }\n                        directionScale *= Scalar.Lerp(particle._currentVelocity1, particle._currentVelocity2, scale);\n                    });\n                }\n\n                particle.direction.scaleToRef(directionScale, this._scaledDirection);\n\n                /// Limit velocity\n                if (this._limitVelocityGradients && this._limitVelocityGradients.length > 0) {\n                    Tools.GetCurrentGradient(ratio, this._limitVelocityGradients, (currentGradient, nextGradient, scale) => {\n                        if (currentGradient !== particle._currentLimitVelocityGradient) {\n                            particle._currentLimitVelocity1 = particle._currentLimitVelocity2;\n                            particle._currentLimitVelocity2 = (<FactorGradient>nextGradient).getFactor();\n                            particle._currentLimitVelocityGradient = (<FactorGradient>currentGradient);\n                        }\n\n                        let limitVelocity = Scalar.Lerp(particle._currentLimitVelocity1, particle._currentLimitVelocity2, scale);\n                        let currentVelocity = particle.direction.length();\n\n                        if (currentVelocity > limitVelocity) {\n                            particle.direction.scaleInPlace(this.limitVelocityDamping);\n                        }\n                    });\n                }\n\n                /// Drag\n                if (this._dragGradients && this._dragGradients.length > 0) {\n                    Tools.GetCurrentGradient(ratio, this._dragGradients, (currentGradient, nextGradient, scale) => {\n                        if (currentGradient !== particle._currentDragGradient) {\n                            particle._currentDrag1 = particle._currentDrag2;\n                            particle._currentDrag2 = (<FactorGradient>nextGradient).getFactor();\n                            particle._currentDragGradient = (<FactorGradient>currentGradient);\n                        }\n\n                        let drag = Scalar.Lerp(particle._currentDrag1, particle._currentDrag2, scale);\n\n                        this._scaledDirection.scaleInPlace(1.0 - drag);\n                    });\n                }\n\n                particle.position.addInPlace(this._scaledDirection);\n\n                // Noise\n                if (noiseTextureData && noiseTextureSize && particle._randomNoiseCoordinates1) {\n                    let fetchedColorR = this._fetchR(particle._randomNoiseCoordinates1.x, particle._randomNoiseCoordinates1.y, noiseTextureSize.width, noiseTextureSize.height, noiseTextureData);\n                    let fetchedColorG = this._fetchR(particle._randomNoiseCoordinates1.z, particle._randomNoiseCoordinates2.x, noiseTextureSize.width, noiseTextureSize.height, noiseTextureData);\n                    let fetchedColorB = this._fetchR(particle._randomNoiseCoordinates2.y, particle._randomNoiseCoordinates2.z, noiseTextureSize.width, noiseTextureSize.height, noiseTextureData);\n\n                    let force = Tmp.Vector3[0];\n                    let scaledForce = Tmp.Vector3[1];\n\n                    force.copyFromFloats((2 * fetchedColorR - 1) * this.noiseStrength.x, (2 * fetchedColorG - 1) * this.noiseStrength.y, (2 * fetchedColorB - 1) * this.noiseStrength.z);\n\n                    force.scaleToRef(scaledUpdateSpeed, scaledForce);\n                    particle.direction.addInPlace(scaledForce);\n                }\n\n                // Gravity\n                this.gravity.scaleToRef(scaledUpdateSpeed, this._scaledGravity);\n                particle.direction.addInPlace(this._scaledGravity);\n\n                // Size\n                if (this._sizeGradients && this._sizeGradients.length > 0) {\n                    Tools.GetCurrentGradient(ratio, this._sizeGradients, (currentGradient, nextGradient, scale) => {\n                        if (currentGradient !== particle._currentSizeGradient) {\n                            particle._currentSize1 = particle._currentSize2;\n                            particle._currentSize2 = (<FactorGradient>nextGradient).getFactor();\n                            particle._currentSizeGradient = (<FactorGradient>currentGradient);\n                        }\n                        particle.size = Scalar.Lerp(particle._currentSize1, particle._currentSize2, scale);\n                    });\n                }\n\n                // Remap data\n                if (this._useRampGradients) {\n                    if (this._colorRemapGradients && this._colorRemapGradients.length > 0) {\n                        Tools.GetCurrentGradient(ratio, this._colorRemapGradients, (currentGradient, nextGradient, scale) => {\n                            let min = Scalar.Lerp((<FactorGradient>currentGradient).factor1, (<FactorGradient>nextGradient).factor1, scale);\n                            let max = Scalar.Lerp((<FactorGradient>currentGradient).factor2!, (<FactorGradient>nextGradient).factor2!, scale);\n\n                            particle.remapData.x = min;\n                            particle.remapData.y = max - min;\n                        });\n                    }\n\n                    if (this._alphaRemapGradients && this._alphaRemapGradients.length > 0) {\n                        Tools.GetCurrentGradient(ratio, this._alphaRemapGradients, (currentGradient, nextGradient, scale) => {\n                            let min = Scalar.Lerp((<FactorGradient>currentGradient).factor1, (<FactorGradient>nextGradient).factor1, scale);\n                            let max = Scalar.Lerp((<FactorGradient>currentGradient).factor2!, (<FactorGradient>nextGradient).factor2!, scale);\n\n                            particle.remapData.z = min;\n                            particle.remapData.w = max - min;\n                        });\n                    }\n                }\n\n                if (this._isAnimationSheetEnabled) {\n                    particle.updateCellIndex();\n                }\n\n                // Update the position of the attached sub-emitters to match their attached particle\n                particle._inheritParticleInfoToSubEmitters();\n\n                if (particle.age >= particle.lifeTime) { // Recycle by swapping with last particle\n                    this._emitFromParticle(particle);\n                    if (particle._attachedSubEmitters) {\n                        particle._attachedSubEmitters.forEach((subEmitter) => {\n                            subEmitter.particleSystem.disposeOnStop = true;\n                            subEmitter.particleSystem.stop();\n                        });\n                        particle._attachedSubEmitters = null;\n                    }\n                    this.recycleParticle(particle);\n                    index--;\n                    continue;\n                }\n            }\n        };\n    }\n\n    private _addFactorGradient(factorGradients: FactorGradient[], gradient: number, factor: number, factor2?: number) {\n        let newGradient = new FactorGradient();\n        newGradient.gradient = gradient;\n        newGradient.factor1 = factor;\n        newGradient.factor2 = factor2;\n        factorGradients.push(newGradient);\n\n        factorGradients.sort((a, b) => {\n            if (a.gradient < b.gradient) {\n                return -1;\n            } else if (a.gradient > b.gradient) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    private _removeFactorGradient(factorGradients: Nullable<FactorGradient[]>, gradient: number) {\n        if (!factorGradients) {\n            return;\n        }\n\n        let index = 0;\n        for (var factorGradient of factorGradients) {\n            if (factorGradient.gradient === gradient) {\n                factorGradients.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n    }\n\n    /**\n     * Adds a new life time gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the life time factor to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    public addLifeTimeGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\n        if (!this._lifeTimeGradients) {\n            this._lifeTimeGradients = [];\n        }\n\n        this._addFactorGradient(this._lifeTimeGradients, gradient, factor, factor2);\n\n        return this;\n    }\n\n    /**\n     * Remove a specific life time gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    public removeLifeTimeGradient(gradient: number): IParticleSystem {\n        this._removeFactorGradient(this._lifeTimeGradients, gradient);\n\n        return this;\n    }\n\n    /**\n     * Adds a new size gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the size factor to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    public addSizeGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\n        if (!this._sizeGradients) {\n            this._sizeGradients = [];\n        }\n\n        this._addFactorGradient(this._sizeGradients, gradient, factor, factor2);\n\n        return this;\n    }\n\n    /**\n     * Remove a specific size gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    public removeSizeGradient(gradient: number): IParticleSystem {\n        this._removeFactorGradient(this._sizeGradients, gradient);\n\n        return this;\n    }\n\n    /**\n     * Adds a new color remap gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param min defines the color remap minimal range\n     * @param max defines the color remap maximal range\n     * @returns the current particle system\n     */\n    public addColorRemapGradient(gradient: number, min: number, max: number): IParticleSystem {\n        if (!this._colorRemapGradients) {\n            this._colorRemapGradients = [];\n        }\n\n        this._addFactorGradient(this._colorRemapGradients, gradient, min, max);\n\n        return this;\n    }\n\n    /**\n     * Remove a specific color remap gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    public removeColorRemapGradient(gradient: number): IParticleSystem {\n        this._removeFactorGradient(this._colorRemapGradients, gradient);\n\n        return this;\n    }\n\n    /**\n     * Adds a new alpha remap gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param min defines the alpha remap minimal range\n     * @param max defines the alpha remap maximal range\n     * @returns the current particle system\n     */\n    public addAlphaRemapGradient(gradient: number, min: number, max: number): IParticleSystem {\n        if (!this._alphaRemapGradients) {\n            this._alphaRemapGradients = [];\n        }\n\n        this._addFactorGradient(this._alphaRemapGradients, gradient, min, max);\n\n        return this;\n    }\n\n    /**\n     * Remove a specific alpha remap gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    public removeAlphaRemapGradient(gradient: number): IParticleSystem {\n        this._removeFactorGradient(this._alphaRemapGradients, gradient);\n\n        return this;\n    }\n\n    /**\n     * Adds a new angular speed gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the angular speed  to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    public addAngularSpeedGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\n        if (!this._angularSpeedGradients) {\n            this._angularSpeedGradients = [];\n        }\n\n        this._addFactorGradient(this._angularSpeedGradients, gradient, factor, factor2);\n\n        return this;\n    }\n\n    /**\n     * Remove a specific angular speed gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    public removeAngularSpeedGradient(gradient: number): IParticleSystem {\n        this._removeFactorGradient(this._angularSpeedGradients, gradient);\n\n        return this;\n    }\n\n    /**\n     * Adds a new velocity gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the velocity to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    public addVelocityGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\n        if (!this._velocityGradients) {\n            this._velocityGradients = [];\n        }\n\n        this._addFactorGradient(this._velocityGradients, gradient, factor, factor2);\n\n        return this;\n    }\n\n    /**\n     * Remove a specific velocity gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    public removeVelocityGradient(gradient: number): IParticleSystem {\n        this._removeFactorGradient(this._velocityGradients, gradient);\n\n        return this;\n    }\n\n    /**\n     * Adds a new limit velocity gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the limit velocity value to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    public addLimitVelocityGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\n        if (!this._limitVelocityGradients) {\n            this._limitVelocityGradients = [];\n        }\n\n        this._addFactorGradient(this._limitVelocityGradients, gradient, factor, factor2);\n\n        return this;\n    }\n\n    /**\n     * Remove a specific limit velocity gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    public removeLimitVelocityGradient(gradient: number): IParticleSystem {\n        this._removeFactorGradient(this._limitVelocityGradients, gradient);\n\n        return this;\n    }\n\n    /**\n     * Adds a new drag gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the drag value to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    public addDragGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\n        if (!this._dragGradients) {\n            this._dragGradients = [];\n        }\n\n        this._addFactorGradient(this._dragGradients, gradient, factor, factor2);\n\n        return this;\n    }\n\n    /**\n     * Remove a specific drag gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    public removeDragGradient(gradient: number): IParticleSystem {\n        this._removeFactorGradient(this._dragGradients, gradient);\n\n        return this;\n    }\n\n    /**\n     * Adds a new emit rate gradient (please note that this will only work if you set the targetStopDuration property)\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the emit rate value to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    public addEmitRateGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\n        if (!this._emitRateGradients) {\n            this._emitRateGradients = [];\n        }\n\n        this._addFactorGradient(this._emitRateGradients, gradient, factor, factor2);\n        return this;\n    }\n\n    /**\n     * Remove a specific emit rate gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    public removeEmitRateGradient(gradient: number): IParticleSystem {\n        this._removeFactorGradient(this._emitRateGradients, gradient);\n\n        return this;\n    }\n\n    /**\n     * Adds a new start size gradient (please note that this will only work if you set the targetStopDuration property)\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the start size value to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    public addStartSizeGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\n        if (!this._startSizeGradients) {\n            this._startSizeGradients = [];\n        }\n\n        this._addFactorGradient(this._startSizeGradients, gradient, factor, factor2);\n        return this;\n    }\n\n    /**\n     * Remove a specific start size gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    public removeStartSizeGradient(gradient: number): IParticleSystem {\n        this._removeFactorGradient(this._emitRateGradients, gradient);\n\n        return this;\n    }\n\n    private _createRampGradientTexture() {\n        if (!this._rampGradients || !this._rampGradients.length || this._rampGradientsTexture) {\n            return;\n        }\n\n        let data = new Uint8Array(this._rawTextureWidth * 4);\n        let tmpColor = Tmp.Color3[0];\n\n        for (var x = 0; x < this._rawTextureWidth; x++) {\n            var ratio = x / this._rawTextureWidth;\n\n            Tools.GetCurrentGradient(ratio, this._rampGradients, (currentGradient, nextGradient, scale) => {\n\n                Color3.LerpToRef((<Color3Gradient>currentGradient).color, (<Color3Gradient>nextGradient).color, scale, tmpColor);\n                data[x * 4] = tmpColor.r * 255;\n                data[x * 4 + 1] = tmpColor.g * 255;\n                data[x * 4 + 2] = tmpColor.b * 255;\n                data[x * 4 + 3] = 255;\n            });\n\n        }\n\n        this._rampGradientsTexture = RawTexture.CreateRGBATexture(data, this._rawTextureWidth, 1, this._scene, false, false, Texture.NEAREST_SAMPLINGMODE);\n    }\n\n    /**\n     * Gets the current list of ramp gradients.\n     * You must use addRampGradient and removeRampGradient to udpate this list\n     * @returns the list of ramp gradients\n     */\n    public getRampGradients(): Nullable<Array<Color3Gradient>> {\n        return this._rampGradients;\n    }\n\n    /**\n     * Adds a new ramp gradient used to remap particle colors\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param color defines the color to affect to the specified gradient\n     * @returns the current particle system\n     */\n    public addRampGradient(gradient: number, color: Color3): ParticleSystem {\n        if (!this._rampGradients) {\n            this._rampGradients = [];\n        }\n\n        let rampGradient = new Color3Gradient();\n        rampGradient.gradient = gradient;\n        rampGradient.color = color;\n        this._rampGradients.push(rampGradient);\n\n        this._rampGradients.sort((a, b) => {\n            if (a.gradient < b.gradient) {\n                return -1;\n            } else if (a.gradient > b.gradient) {\n                return 1;\n            }\n\n            return 0;\n        });\n\n        if (this._rampGradientsTexture) {\n            this._rampGradientsTexture.dispose();\n            (<any>this._rampGradientsTexture) = null;\n        }\n\n        this._createRampGradientTexture();\n\n        return this;\n    }\n\n    /**\n     * Remove a specific ramp gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    public removeRampGradient(gradient: number): ParticleSystem {\n        this._removeGradientAndTexture(gradient, this._rampGradients, this._rampGradientsTexture);\n        (<any>this._rampGradientsTexture) = null;\n\n        if (this._rampGradients && this._rampGradients.length > 0) {\n            this._createRampGradientTexture();\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds a new color gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param color1 defines the color to affect to the specified gradient\n     * @param color2 defines an additional color used to define a range ([color, color2]) with main color to pick the final color from\n     * @returns this particle system\n     */\n    public addColorGradient(gradient: number, color1: Color4, color2?: Color4): IParticleSystem {\n        if (!this._colorGradients) {\n            this._colorGradients = [];\n        }\n\n        let colorGradient = new ColorGradient();\n        colorGradient.gradient = gradient;\n        colorGradient.color1 = color1;\n        colorGradient.color2 = color2;\n        this._colorGradients.push(colorGradient);\n\n        this._colorGradients.sort((a, b) => {\n            if (a.gradient < b.gradient) {\n                return -1;\n            } else if (a.gradient > b.gradient) {\n                return 1;\n            }\n\n            return 0;\n        });\n\n        return this;\n    }\n\n    /**\n     * Remove a specific color gradient\n     * @param gradient defines the gradient to remove\n     * @returns this particle system\n     */\n    public removeColorGradient(gradient: number): IParticleSystem {\n        if (!this._colorGradients) {\n            return this;\n        }\n\n        let index = 0;\n        for (var colorGradient of this._colorGradients) {\n            if (colorGradient.gradient === gradient) {\n                this._colorGradients.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n\n        return this;\n    }\n\n    private _fetchR(u: number, v: number, width: number, height: number, pixels: Uint8Array): number {\n        u = Math.abs(u) * 0.5 + 0.5;\n        v = Math.abs(v) * 0.5 + 0.5;\n\n        let wrappedU = ((u * width) % width) | 0;\n        let wrappedV = ((v * height) % height) | 0;\n\n        let position = (wrappedU + wrappedV * width) * 4;\n        return pixels[position] / 255;\n    }\n\n    protected _reset() {\n        this._resetEffect();\n    }\n\n    private _resetEffect() {\n        if (this._vertexBuffer) {\n            this._vertexBuffer.dispose();\n            this._vertexBuffer = null;\n        }\n\n        if (this._spriteBuffer) {\n            this._spriteBuffer.dispose();\n            this._spriteBuffer = null;\n        }\n\n        this._createVertexBuffers();\n    }\n\n    private _createVertexBuffers() {\n        this._vertexBufferSize = this._useInstancing ? 10 : 12;\n        if (this._isAnimationSheetEnabled) {\n            this._vertexBufferSize += 1;\n        }\n\n        if (!this._isBillboardBased || this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED) {\n            this._vertexBufferSize += 3;\n        }\n\n        if (this._useRampGradients) {\n            this._vertexBufferSize += 4;\n        }\n\n        let engine = this._scene.getEngine();\n        this._vertexData = new Float32Array(this._capacity * this._vertexBufferSize * (this._useInstancing ? 1 : 4));\n        this._vertexBuffer = new Buffer(engine, this._vertexData, true, this._vertexBufferSize);\n\n        let dataOffset = 0;\n        var positions = this._vertexBuffer.createVertexBuffer(VertexBuffer.PositionKind, dataOffset, 3, this._vertexBufferSize, this._useInstancing);\n        this._vertexBuffers[VertexBuffer.PositionKind] = positions;\n        dataOffset += 3;\n\n        var colors = this._vertexBuffer.createVertexBuffer(VertexBuffer.ColorKind, dataOffset, 4, this._vertexBufferSize, this._useInstancing);\n        this._vertexBuffers[VertexBuffer.ColorKind] = colors;\n        dataOffset += 4;\n\n        var options = this._vertexBuffer.createVertexBuffer(\"angle\", dataOffset, 1, this._vertexBufferSize, this._useInstancing);\n        this._vertexBuffers[\"angle\"] = options;\n        dataOffset += 1;\n\n        var size = this._vertexBuffer.createVertexBuffer(\"size\", dataOffset, 2, this._vertexBufferSize, this._useInstancing);\n        this._vertexBuffers[\"size\"] = size;\n        dataOffset += 2;\n\n        if (this._isAnimationSheetEnabled) {\n            var cellIndexBuffer = this._vertexBuffer.createVertexBuffer(\"cellIndex\", dataOffset, 1, this._vertexBufferSize, this._useInstancing);\n            this._vertexBuffers[\"cellIndex\"] = cellIndexBuffer;\n            dataOffset += 1;\n        }\n\n        if (!this._isBillboardBased || this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED) {\n            var directionBuffer = this._vertexBuffer.createVertexBuffer(\"direction\", dataOffset, 3, this._vertexBufferSize, this._useInstancing);\n            this._vertexBuffers[\"direction\"] = directionBuffer;\n            dataOffset += 3;\n        }\n\n        if (this._useRampGradients) {\n            var rampDataBuffer = this._vertexBuffer.createVertexBuffer(\"remapData\", dataOffset, 4, this._vertexBufferSize, this._useInstancing);\n            this._vertexBuffers[\"remapData\"] = rampDataBuffer;\n            dataOffset += 4;\n        }\n\n        var offsets: VertexBuffer;\n        if (this._useInstancing) {\n            var spriteData = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n            this._spriteBuffer = new Buffer(engine, spriteData, false, 2);\n            offsets = this._spriteBuffer.createVertexBuffer(\"offset\", 0, 2);\n        } else {\n            offsets = this._vertexBuffer.createVertexBuffer(\"offset\", dataOffset, 2, this._vertexBufferSize, this._useInstancing);\n            dataOffset += 2;\n        }\n        this._vertexBuffers[\"offset\"] = offsets;\n\n    }\n\n    private _createIndexBuffer() {\n        if (this._useInstancing) {\n            return;\n        }\n        var indices = [];\n        var index = 0;\n        for (var count = 0; count < this._capacity; count++) {\n            indices.push(index);\n            indices.push(index + 1);\n            indices.push(index + 2);\n            indices.push(index);\n            indices.push(index + 2);\n            indices.push(index + 3);\n            index += 4;\n        }\n\n        this._indexBuffer = this._scene.getEngine().createIndexBuffer(indices);\n    }\n\n    /**\n     * Gets the maximum number of particles active at the same time.\n     * @returns The max number of active particles.\n     */\n    public getCapacity(): number {\n        return this._capacity;\n    }\n\n    /**\n     * Gets whether there are still active particles in the system.\n     * @returns True if it is alive, otherwise false.\n     */\n    public isAlive(): boolean {\n        return this._alive;\n    }\n\n    /**\n     * Gets if the system has been started. (Note: this will still be true after stop is called)\n     * @returns True if it has been started, otherwise false.\n     */\n    public isStarted(): boolean {\n        return this._started;\n    }\n\n    private _prepareSubEmitterInternalArray() {\n        this._subEmitters = new Array<Array<SubEmitter>>();\n        if (this.subEmitters) {\n            this.subEmitters.forEach((subEmitter) => {\n                if (subEmitter instanceof ParticleSystem) {\n                    this._subEmitters.push([new SubEmitter(subEmitter)]);\n                } else if (subEmitter instanceof SubEmitter) {\n                    this._subEmitters.push([subEmitter]);\n                } else if (subEmitter instanceof Array) {\n                    this._subEmitters.push(subEmitter);\n                }\n            });\n        }\n    }\n\n    /**\n     * Starts the particle system and begins to emit\n     * @param delay defines the delay in milliseconds before starting the system (this.startDelay by default)\n     */\n    public start(delay = this.startDelay): void {\n        if (!this.targetStopDuration && this._hasTargetStopDurationDependantGradient()) {\n            throw \"Particle system started with a targetStopDuration dependant gradient (eg. startSizeGradients) but no targetStopDuration set\";\n        }\n        if (delay) {\n            setTimeout(() => {\n                this.start(0);\n            }, delay);\n            return;\n        }\n        // Convert the subEmitters field to the constant type field _subEmitters\n        this._prepareSubEmitterInternalArray();\n\n        this._started = true;\n        this._stopped = false;\n        this._actualFrame = 0;\n        if (this._subEmitters && this._subEmitters.length != 0) {\n            this.activeSubSystems = new Array<ParticleSystem>();\n        }\n\n        // Reset emit gradient so it acts the same on every start\n        if (this._emitRateGradients) {\n            if (this._emitRateGradients.length > 0) {\n                this._currentEmitRateGradient = this._emitRateGradients[0];\n                this._currentEmitRate1 = this._currentEmitRateGradient.getFactor();\n                this._currentEmitRate2 = this._currentEmitRate1;\n            }\n            if (this._emitRateGradients.length > 1) {\n                this._currentEmitRate2 = this._emitRateGradients[1].getFactor();\n            }\n        }\n        // Reset start size gradient so it acts the same on every start\n        if (this._startSizeGradients) {\n            if (this._startSizeGradients.length > 0) {\n                this._currentStartSizeGradient = this._startSizeGradients[0];\n                this._currentStartSize1 = this._currentStartSizeGradient.getFactor();\n                this._currentStartSize2 = this._currentStartSize1;\n            }\n            if (this._startSizeGradients.length > 1) {\n                this._currentStartSize2 = this._startSizeGradients[1].getFactor();\n            }\n        }\n\n        if (this.preWarmCycles) {\n            if (this.emitter instanceof AbstractMesh) {\n                this.emitter.computeWorldMatrix(true);\n            }\n\n            let noiseTextureAsProcedural = this.noiseTexture as ProceduralTexture;\n\n            if (noiseTextureAsProcedural && noiseTextureAsProcedural.onGeneratedObservable) {\n                noiseTextureAsProcedural.onGeneratedObservable.addOnce(() => {\n                    setTimeout(() => {\n                        for (var index = 0; index < this.preWarmCycles; index++) {\n                            this.animate(true);\n                            noiseTextureAsProcedural.render();\n                        }\n                    });\n                });\n            } else {\n                for (var index = 0; index < this.preWarmCycles; index++) {\n                    this.animate(true);\n                }\n            }\n        }\n\n        // Animations\n        if (this.beginAnimationOnStart && this.animations && this.animations.length > 0) {\n            this.getScene().beginAnimation(this, this.beginAnimationFrom, this.beginAnimationTo, this.beginAnimationLoop);\n        }\n    }\n\n    /**\n     * Stops the particle system.\n     * @param stopSubEmitters if true it will stop the current system and all created sub-Systems if false it will stop the current root system only, this param is used by the root particle system only. the default value is true.\n     */\n    public stop(stopSubEmitters = true): void {\n        this._stopped = true;\n\n        if (stopSubEmitters) {\n            this._stopSubEmitters();\n        }\n    }\n\n    // animation sheet\n\n    /**\n     * Remove all active particles\n     */\n    public reset(): void {\n        this._stockParticles = [];\n        this._particles = [];\n    }\n\n    /**\n     * @hidden (for internal use only)\n     */\n    public _appendParticleVertex(index: number, particle: Particle, offsetX: number, offsetY: number): void {\n        var offset = index * this._vertexBufferSize;\n\n        this._vertexData[offset++] = particle.position.x + this.worldOffset.x;\n        this._vertexData[offset++] = particle.position.y + this.worldOffset.y;\n        this._vertexData[offset++] = particle.position.z + this.worldOffset.z;\n        this._vertexData[offset++] = particle.color.r;\n        this._vertexData[offset++] = particle.color.g;\n        this._vertexData[offset++] = particle.color.b;\n        this._vertexData[offset++] = particle.color.a;\n        this._vertexData[offset++] = particle.angle;\n\n        this._vertexData[offset++] = particle.scale.x * particle.size;\n        this._vertexData[offset++] = particle.scale.y * particle.size;\n\n        if (this._isAnimationSheetEnabled) {\n            this._vertexData[offset++] = particle.cellIndex;\n        }\n\n        if (!this._isBillboardBased) {\n            if (particle._initialDirection) {\n                this._vertexData[offset++] = particle._initialDirection.x;\n                this._vertexData[offset++] = particle._initialDirection.y;\n                this._vertexData[offset++] = particle._initialDirection.z;\n            } else {\n                this._vertexData[offset++] = particle.direction.x;\n                this._vertexData[offset++] = particle.direction.y;\n                this._vertexData[offset++] = particle.direction.z;\n            }\n        } else if (this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED) {\n            this._vertexData[offset++] = particle.direction.x;\n            this._vertexData[offset++] = particle.direction.y;\n            this._vertexData[offset++] = particle.direction.z;\n        }\n\n        if (this._useRampGradients) {\n            this._vertexData[offset++] = particle.remapData.x;\n            this._vertexData[offset++] = particle.remapData.y;\n            this._vertexData[offset++] = particle.remapData.z;\n            this._vertexData[offset++] = particle.remapData.w;\n        }\n\n        if (!this._useInstancing) {\n            if (this._isAnimationSheetEnabled) {\n                if (offsetX === 0) {\n                    offsetX = this._epsilon;\n                }\n                else if (offsetX === 1) {\n                    offsetX = 1 - this._epsilon;\n                }\n\n                if (offsetY === 0) {\n                    offsetY = this._epsilon;\n                }\n                else if (offsetY === 1) {\n                    offsetY = 1 - this._epsilon;\n                }\n            }\n\n            this._vertexData[offset++] = offsetX;\n            this._vertexData[offset++] = offsetY;\n        }\n    }\n\n    // start of sub system methods\n\n    /**\n     * \"Recycles\" one of the particle by copying it back to the \"stock\" of particles and removing it from the active list.\n     * Its lifetime will start back at 0.\n     */\n    public recycleParticle: (particle: Particle) => void = (particle) => {\n        // move particle from activeParticle list to stock particles\n        var lastParticle = <Particle>this._particles.pop();\n        if (lastParticle !== particle) {\n            lastParticle.copyTo(particle);\n        }\n        this._stockParticles.push(lastParticle);\n    }\n\n    private _stopSubEmitters(): void {\n        if (!this.activeSubSystems) {\n            return;\n        }\n        this.activeSubSystems.forEach((subSystem) => {\n            subSystem.stop(true);\n        });\n        this.activeSubSystems = new Array<ParticleSystem>();\n    }\n\n    private _createParticle: () => Particle = () => {\n        var particle: Particle;\n        if (this._stockParticles.length !== 0) {\n            particle = <Particle>this._stockParticles.pop();\n            particle._reset();\n        } else {\n            particle = new Particle(this);\n        }\n\n        // Attach emitters\n        if (this._subEmitters && this._subEmitters.length > 0) {\n            var subEmitters = this._subEmitters[Math.floor(Math.random() * this._subEmitters.length)];\n            particle._attachedSubEmitters = [];\n            subEmitters.forEach((subEmitter) => {\n                if (subEmitter.type === SubEmitterType.ATTACHED) {\n                    var newEmitter = subEmitter.clone();\n                    (<Array<SubEmitter>>particle._attachedSubEmitters).push(newEmitter);\n                    newEmitter.particleSystem.start();\n                }\n            });\n        }\n        return particle;\n    }\n\n    private _removeFromRoot(): void {\n        if (!this._rootParticleSystem) {\n            return;\n        }\n\n        let index = this._rootParticleSystem.activeSubSystems.indexOf(this);\n        if (index !== -1) {\n            this._rootParticleSystem.activeSubSystems.splice(index, 1);\n        }\n\n        this._rootParticleSystem = null;\n    }\n\n    private _emitFromParticle: (particle: Particle) => void = (particle) => {\n        if (!this._subEmitters || this._subEmitters.length === 0) {\n            return;\n        }\n        var templateIndex = Math.floor(Math.random() * this._subEmitters.length);\n\n        this._subEmitters[templateIndex].forEach((subEmitter) => {\n            if (subEmitter.type === SubEmitterType.END) {\n                var subSystem = subEmitter.clone();\n                particle._inheritParticleInfoToSubEmitter(subSystem);\n                subSystem.particleSystem._rootParticleSystem = this;\n                this.activeSubSystems.push(subSystem.particleSystem);\n                subSystem.particleSystem.start();\n            }\n        });\n    }\n\n    // End of sub system methods\n\n    private _update(newParticles: number): void {\n        // Update current\n        this._alive = this._particles.length > 0;\n\n        if ((<AbstractMesh>this.emitter).position) {\n            var emitterMesh = (<AbstractMesh>this.emitter);\n            this._emitterWorldMatrix = emitterMesh.getWorldMatrix();\n        } else {\n            var emitterPosition = (<Vector3>this.emitter);\n            this._emitterWorldMatrix = Matrix.Translation(emitterPosition.x, emitterPosition.y, emitterPosition.z);\n        }\n\n        this.updateFunction(this._particles);\n\n        // Add new ones\n        var particle: Particle;\n        for (var index = 0; index < newParticles; index++) {\n            if (this._particles.length === this._capacity) {\n                break;\n            }\n\n            particle = this._createParticle();\n\n            this._particles.push(particle);\n\n            // Emitter\n            let emitPower = Scalar.RandomRange(this.minEmitPower, this.maxEmitPower);\n\n            if (this.startPositionFunction) {\n                this.startPositionFunction(this._emitterWorldMatrix, particle.position, particle);\n            }\n            else {\n                this.particleEmitterType.startPositionFunction(this._emitterWorldMatrix, particle.position, particle);\n            }\n\n            if (this.startDirectionFunction) {\n                this.startDirectionFunction(this._emitterWorldMatrix, particle.direction, particle);\n            }\n            else {\n                this.particleEmitterType.startDirectionFunction(this._emitterWorldMatrix, particle.direction, particle);\n            }\n\n            if (emitPower === 0) {\n                if (!particle._initialDirection) {\n                    particle._initialDirection = particle.direction.clone();\n                } else {\n                    particle._initialDirection.copyFrom(particle.direction);\n                }\n            } else {\n                particle._initialDirection = null;\n            }\n\n            particle.direction.scaleInPlace(emitPower);\n\n            // Life time\n            if (this.targetStopDuration && this._lifeTimeGradients && this._lifeTimeGradients.length > 0) {\n                let ratio = Scalar.Clamp(this._actualFrame / this.targetStopDuration);\n                Tools.GetCurrentGradient(ratio, this._lifeTimeGradients, (currentGradient, nextGradient) => {\n                    let factorGradient1 = (<FactorGradient>currentGradient);\n                    let factorGradient2 = (<FactorGradient>nextGradient);\n                    let lifeTime1 = factorGradient1.getFactor();\n                    let lifeTime2 = factorGradient2.getFactor();\n                    let gradient = (ratio - factorGradient1.gradient) / (factorGradient2.gradient - factorGradient1.gradient);\n                    particle.lifeTime = Scalar.Lerp(lifeTime1, lifeTime2, gradient);\n                });\n            } else {\n                particle.lifeTime = Scalar.RandomRange(this.minLifeTime, this.maxLifeTime);\n            }\n\n            // Size\n            if (!this._sizeGradients || this._sizeGradients.length === 0) {\n                particle.size = Scalar.RandomRange(this.minSize, this.maxSize);\n            } else {\n                particle._currentSizeGradient = this._sizeGradients[0];\n                particle._currentSize1 = particle._currentSizeGradient.getFactor();\n                particle.size = particle._currentSize1;\n\n                if (this._sizeGradients.length > 1) {\n                    particle._currentSize2 = this._sizeGradients[1].getFactor();\n                } else {\n                    particle._currentSize2 = particle._currentSize1;\n                }\n            }\n            // Size and scale\n            particle.scale.copyFromFloats(Scalar.RandomRange(this.minScaleX, this.maxScaleX), Scalar.RandomRange(this.minScaleY, this.maxScaleY));\n\n            // Adjust scale by start size\n            if (this._startSizeGradients && this._startSizeGradients[0] && this.targetStopDuration) {\n                const ratio = this._actualFrame / this.targetStopDuration;\n                Tools.GetCurrentGradient(ratio, this._startSizeGradients, (currentGradient, nextGradient, scale) => {\n                    if (currentGradient !== this._currentStartSizeGradient) {\n                        this._currentStartSize1 = this._currentStartSize2;\n                        this._currentStartSize2 = (<FactorGradient>nextGradient).getFactor();\n                        this._currentStartSizeGradient = (<FactorGradient>currentGradient);\n                    }\n\n                    var value = Scalar.Lerp(this._currentStartSize1, this._currentStartSize2, scale);\n                    particle.scale.scaleInPlace(value);\n                });\n            }\n\n            // Angle\n            if (!this._angularSpeedGradients || this._angularSpeedGradients.length === 0) {\n                particle.angularSpeed = Scalar.RandomRange(this.minAngularSpeed, this.maxAngularSpeed);\n            } else {\n                particle._currentAngularSpeedGradient = this._angularSpeedGradients[0];\n                particle.angularSpeed = particle._currentAngularSpeedGradient.getFactor();\n                particle._currentAngularSpeed1 = particle.angularSpeed;\n\n                if (this._angularSpeedGradients.length > 1) {\n                    particle._currentAngularSpeed2 = this._angularSpeedGradients[1].getFactor();\n                } else {\n                    particle._currentAngularSpeed2 = particle._currentAngularSpeed1;\n                }\n            }\n            particle.angle = Scalar.RandomRange(this.minInitialRotation, this.maxInitialRotation);\n\n            // Velocity\n            if (this._velocityGradients && this._velocityGradients.length > 0) {\n                particle._currentVelocityGradient = this._velocityGradients[0];\n                particle._currentVelocity1 = particle._currentVelocityGradient.getFactor();\n\n                if (this._velocityGradients.length > 1) {\n                    particle._currentVelocity2 = this._velocityGradients[1].getFactor();\n                } else {\n                    particle._currentVelocity2 = particle._currentVelocity1;\n                }\n            }\n\n            // Limit velocity\n            if (this._limitVelocityGradients && this._limitVelocityGradients.length > 0) {\n                particle._currentLimitVelocityGradient = this._limitVelocityGradients[0];\n                particle._currentLimitVelocity1 = particle._currentLimitVelocityGradient.getFactor();\n\n                if (this._limitVelocityGradients.length > 1) {\n                    particle._currentLimitVelocity2 = this._limitVelocityGradients[1].getFactor();\n                } else {\n                    particle._currentLimitVelocity2 = particle._currentLimitVelocity1;\n                }\n            }\n\n            // Drag\n            if (this._dragGradients && this._dragGradients.length > 0) {\n                particle._currentDragGradient = this._dragGradients[0];\n                particle._currentDrag1 = particle._currentDragGradient.getFactor();\n\n                if (this._dragGradients.length > 1) {\n                    particle._currentDrag2 = this._dragGradients[1].getFactor();\n                } else {\n                    particle._currentDrag2 = particle._currentDrag1;\n                }\n            }\n\n            // Color\n            if (!this._colorGradients || this._colorGradients.length === 0) {\n                var step = Scalar.RandomRange(0, 1.0);\n\n                Color4.LerpToRef(this.color1, this.color2, step, particle.color);\n\n                this.colorDead.subtractToRef(particle.color, this._colorDiff);\n                this._colorDiff.scaleToRef(1.0 / particle.lifeTime, particle.colorStep);\n            } else {\n                particle._currentColorGradient = this._colorGradients[0];\n                particle._currentColorGradient.getColorToRef(particle.color);\n                particle._currentColor1.copyFrom(particle.color);\n\n                if (this._colorGradients.length > 1) {\n                    this._colorGradients[1].getColorToRef(particle._currentColor2);\n                } else {\n                    particle._currentColor2.copyFrom(particle.color);\n                }\n            }\n\n            // Sheet\n            if (this._isAnimationSheetEnabled) {\n                particle._initialStartSpriteCellID = this.startSpriteCellID;\n                particle._initialEndSpriteCellID = this.endSpriteCellID;\n            }\n\n            // Inherited Velocity\n            particle.direction.addInPlace(this._inheritedVelocityOffset);\n\n            // Ramp\n            if (this._useRampGradients) {\n                particle.remapData = new Vector4(0, 1, 0, 1);\n            }\n\n            // Noise texture coordinates\n            if (this.noiseTexture) {\n                if (particle._randomNoiseCoordinates1) {\n                    particle._randomNoiseCoordinates1.copyFromFloats(Math.random(), Math.random(), Math.random());\n                    particle._randomNoiseCoordinates2.copyFromFloats(Math.random(), Math.random(), Math.random());\n                } else {\n                    particle._randomNoiseCoordinates1 = new Vector3(Math.random(), Math.random(), Math.random());\n                    particle._randomNoiseCoordinates2 = new Vector3(Math.random(), Math.random(), Math.random());\n                }\n            }\n\n            // Update the position of the attached sub-emitters to match their attached particle\n            particle._inheritParticleInfoToSubEmitters();\n\n        }\n    }\n\n    /** @hidden */\n    public static _GetAttributeNamesOrOptions(isAnimationSheetEnabled = false, isBillboardBased = false, useRampGradients = false): string[] {\n        var attributeNamesOrOptions = [VertexBuffer.PositionKind, VertexBuffer.ColorKind, \"angle\", \"offset\", \"size\"];\n\n        if (isAnimationSheetEnabled) {\n            attributeNamesOrOptions.push(\"cellIndex\");\n        }\n\n        if (!isBillboardBased) {\n            attributeNamesOrOptions.push(\"direction\");\n        }\n\n        if (useRampGradients) {\n            attributeNamesOrOptions.push(\"remapData\");\n        }\n\n        return attributeNamesOrOptions;\n    }\n\n    /** @hidden */\n    public static _GetEffectCreationOptions(isAnimationSheetEnabled = false): string[] {\n        var effectCreationOption = [\"invView\", \"view\", \"projection\", \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"textureMask\", \"translationPivot\", \"eyePosition\"];\n\n        if (isAnimationSheetEnabled) {\n            effectCreationOption.push(\"particlesInfos\");\n        }\n\n        return effectCreationOption;\n    }\n\n    /** @hidden */\n    private _getEffect(blendMode: number): Effect {\n        if (this._customEffect) {\n            return this._customEffect;\n        }\n\n        var defines = [];\n\n        if (this._scene.clipPlane) {\n            defines.push(\"#define CLIPPLANE\");\n        }\n\n        if (this._scene.clipPlane2) {\n            defines.push(\"#define CLIPPLANE2\");\n        }\n\n        if (this._scene.clipPlane3) {\n            defines.push(\"#define CLIPPLANE3\");\n        }\n\n        if (this._scene.clipPlane4) {\n            defines.push(\"#define CLIPPLANE4\");\n        }\n\n        if (this._isAnimationSheetEnabled) {\n            defines.push(\"#define ANIMATESHEET\");\n        }\n\n        if (blendMode === ParticleSystem.BLENDMODE_MULTIPLY) {\n            defines.push(\"#define BLENDMULTIPLYMODE\");\n        }\n\n        if (this._useRampGradients) {\n            defines.push(\"#define RAMPGRADIENT\");\n        }\n\n        if (this._isBillboardBased) {\n            defines.push(\"#define BILLBOARD\");\n\n            switch (this.billboardMode) {\n                case ParticleSystem.BILLBOARDMODE_Y:\n                    defines.push(\"#define BILLBOARDY\");\n                    break;\n                case ParticleSystem.BILLBOARDMODE_STRETCHED:\n                    defines.push(\"#define BILLBOARDSTRETCHED\");\n                    break;\n                case ParticleSystem.BILLBOARDMODE_ALL:\n                default:\n                    break;\n            }\n        }\n\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingConfiguration.prepareDefines(this._imageProcessingConfigurationDefines);\n            defines.push(this._imageProcessingConfigurationDefines.toString());\n        }\n\n        // Effect\n        var join = defines.join(\"\\n\");\n        if (this._cachedDefines !== join) {\n            this._cachedDefines = join;\n\n            var attributesNamesOrOptions = ParticleSystem._GetAttributeNamesOrOptions(this._isAnimationSheetEnabled, this._isBillboardBased && this.billboardMode !== ParticleSystem.BILLBOARDMODE_STRETCHED, this._useRampGradients);\n            var effectCreationOption = ParticleSystem._GetEffectCreationOptions(this._isAnimationSheetEnabled);\n\n            var samplers = [\"diffuseSampler\", \"rampSampler\"];\n\n            if (ImageProcessingConfiguration) {\n                ImageProcessingConfiguration.PrepareUniforms(effectCreationOption, this._imageProcessingConfigurationDefines);\n                ImageProcessingConfiguration.PrepareSamplers(samplers, this._imageProcessingConfigurationDefines);\n            }\n\n            this._effect = this._scene.getEngine().createEffect(\n                \"particles\",\n                attributesNamesOrOptions,\n                effectCreationOption,\n                samplers, join);\n        }\n\n        return this._effect;\n    }\n\n    /**\n     * Animates the particle system for the current frame by emitting new particles and or animating the living ones.\n     * @param preWarmOnly will prevent the system from updating the vertex buffer (default is false)\n     */\n    public animate(preWarmOnly = false): void {\n        if (!this._started) {\n            return;\n        }\n\n        if (!preWarmOnly) {\n            // Check\n            if (!this.isReady()) {\n                return;\n            }\n\n            if (this._currentRenderId === this._scene.getFrameId()) {\n                return;\n            }\n            this._currentRenderId = this._scene.getFrameId();\n        }\n\n        this._scaledUpdateSpeed = this.updateSpeed * (preWarmOnly ? this.preWarmStepOffset : this._scene.getAnimationRatio());\n\n        // Determine the number of particles we need to create\n        var newParticles;\n\n        if (this.manualEmitCount > -1) {\n            newParticles = this.manualEmitCount;\n            this._newPartsExcess = 0;\n            this.manualEmitCount = 0;\n        } else {\n            let rate = this.emitRate;\n\n            if (this._emitRateGradients && this._emitRateGradients.length > 0 && this.targetStopDuration) {\n                const ratio = this._actualFrame / this.targetStopDuration;\n                Tools.GetCurrentGradient(ratio, this._emitRateGradients, (currentGradient, nextGradient, scale) => {\n                    if (currentGradient !== this._currentEmitRateGradient) {\n                        this._currentEmitRate1 = this._currentEmitRate2;\n                        this._currentEmitRate2 = (<FactorGradient>nextGradient).getFactor();\n                        this._currentEmitRateGradient = (<FactorGradient>currentGradient);\n                    }\n\n                    rate = Scalar.Lerp(this._currentEmitRate1, this._currentEmitRate2, scale);\n                });\n            }\n\n            newParticles = ((rate * this._scaledUpdateSpeed) >> 0);\n            this._newPartsExcess += rate * this._scaledUpdateSpeed - newParticles;\n        }\n\n        if (this._newPartsExcess > 1.0) {\n            newParticles += this._newPartsExcess >> 0;\n            this._newPartsExcess -= this._newPartsExcess >> 0;\n        }\n\n        this._alive = false;\n\n        if (!this._stopped) {\n            this._actualFrame += this._scaledUpdateSpeed;\n\n            if (this.targetStopDuration && this._actualFrame >= this.targetStopDuration) {\n                this.stop();\n            }\n        } else {\n            newParticles = 0;\n        }\n        this._update(newParticles);\n\n        // Stopped?\n        if (this._stopped) {\n            if (!this._alive) {\n                this._started = false;\n                if (this.onAnimationEnd) {\n                    this.onAnimationEnd();\n                }\n                if (this.disposeOnStop) {\n                    this._scene._toBeDisposed.push(this);\n                }\n            }\n        }\n\n        if (!preWarmOnly) {\n            // Update VBO\n            var offset = 0;\n            for (var index = 0; index < this._particles.length; index++) {\n                var particle = this._particles[index];\n                this._appendParticleVertices(offset, particle);\n                offset += this._useInstancing ? 1 : 4;\n            }\n\n            if (this._vertexBuffer) {\n                this._vertexBuffer.update(this._vertexData);\n            }\n        }\n\n        if (this.manualEmitCount === 0 && this.disposeOnStop) {\n            this.stop();\n        }\n    }\n\n    private _appendParticleVertices(offset: number, particle: Particle) {\n        this._appendParticleVertex(offset++, particle, 0, 0);\n        if (!this._useInstancing) {\n            this._appendParticleVertex(offset++, particle, 1, 0);\n            this._appendParticleVertex(offset++, particle, 1, 1);\n            this._appendParticleVertex(offset++, particle, 0, 1);\n        }\n    }\n\n    /**\n     * Rebuilds the particle system.\n     */\n    public rebuild(): void {\n        this._createIndexBuffer();\n\n        if (this._vertexBuffer) {\n            this._vertexBuffer._rebuild();\n        }\n    }\n\n    /**\n     * Is this system ready to be used/rendered\n     * @return true if the system is ready\n     */\n    public isReady(): boolean {\n        if (!this.emitter || !this._imageProcessingConfiguration.isReady() || !this.particleTexture || !this.particleTexture.isReady()) {\n            return false;\n        }\n\n        if (this.blendMode !== ParticleSystem.BLENDMODE_MULTIPLYADD) {\n            if (!this._getEffect(this.blendMode).isReady()) {\n                return false;\n            }\n        } else {\n            if (!this._getEffect(ParticleSystem.BLENDMODE_MULTIPLY).isReady()) {\n                return false;\n            }\n            if (!this._getEffect(ParticleSystem.BLENDMODE_ADD).isReady()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private _render(blendMode: number) {\n        var effect = this._getEffect(blendMode);\n\n        var engine = this._scene.getEngine();\n\n        // Render\n        engine.enableEffect(effect);\n\n        var viewMatrix = this._scene.getViewMatrix();\n        effect.setTexture(\"diffuseSampler\", this.particleTexture);\n        effect.setMatrix(\"view\", viewMatrix);\n        effect.setMatrix(\"projection\", this._scene.getProjectionMatrix());\n\n        if (this._isAnimationSheetEnabled && this.particleTexture) {\n            var baseSize = this.particleTexture.getBaseSize();\n            effect.setFloat3(\"particlesInfos\", this.spriteCellWidth / baseSize.width, this.spriteCellHeight / baseSize.height, baseSize.width / this.spriteCellWidth);\n        }\n\n        effect.setVector2(\"translationPivot\", this.translationPivot);\n        effect.setFloat4(\"textureMask\", this.textureMask.r, this.textureMask.g, this.textureMask.b, this.textureMask.a);\n\n        if (this._isBillboardBased) {\n            var camera = this._scene.activeCamera!;\n            effect.setVector3(\"eyePosition\", camera.globalPosition);\n        }\n\n        if (this._rampGradientsTexture) {\n            effect.setTexture(\"rampSampler\", this._rampGradientsTexture);\n        }\n\n        if (this._scene.clipPlane || this._scene.clipPlane2 || this._scene.clipPlane3 || this._scene.clipPlane4) {\n            var invView = viewMatrix.clone();\n            invView.invert();\n            effect.setMatrix(\"invView\", invView);\n            MaterialHelper.BindClipPlane(effect, this._scene);\n        }\n\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\n\n        // image processing\n        if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\n            this._imageProcessingConfiguration.bind(effect);\n        }\n\n        // Draw order\n        switch (blendMode) {\n            case ParticleSystem.BLENDMODE_ADD:\n                engine.setAlphaMode(Constants.ALPHA_ADD);\n                break;\n            case ParticleSystem.BLENDMODE_ONEONE:\n                engine.setAlphaMode(Constants.ALPHA_ONEONE);\n                break;\n            case ParticleSystem.BLENDMODE_STANDARD:\n                engine.setAlphaMode(Constants.ALPHA_COMBINE);\n                break;\n            case ParticleSystem.BLENDMODE_MULTIPLY:\n                engine.setAlphaMode(Constants.ALPHA_MULTIPLY);\n                break;\n        }\n\n        if (this._useInstancing) {\n            engine.drawArraysType(Material.TriangleFanDrawMode, 0, 4, this._particles.length);\n        } else {\n            engine.drawElementsType(Material.TriangleFillMode, 0, this._particles.length * 6);\n        }\n\n        return this._particles.length;\n    }\n\n    /**\n     * Renders the particle system in its current state.\n     * @returns the current number of particles\n     */\n    public render(): number {\n        // Check\n        if (!this.isReady() || !this._particles.length) {\n            return 0;\n        }\n\n        var engine = this._scene.getEngine();\n        engine.setState(false);\n\n        if (this.forceDepthWrite) {\n            engine.setDepthWrite(true);\n        }\n\n        let outparticles = 0;\n\n        if (this.blendMode === ParticleSystem.BLENDMODE_MULTIPLYADD) {\n            outparticles = this._render(ParticleSystem.BLENDMODE_MULTIPLY) + this._render(ParticleSystem.BLENDMODE_ADD);\n        }\n        outparticles = this._render(this.blendMode);\n\n        engine.unbindInstanceAttributes();\n        engine.setAlphaMode(Constants.ALPHA_DISABLE);\n\n        return outparticles;\n    }\n\n    /**\n     * Disposes the particle system and free the associated resources\n     * @param disposeTexture defines if the particule texture must be disposed as well (true by default)\n     */\n    public dispose(disposeTexture = true): void {\n        if (this._vertexBuffer) {\n            this._vertexBuffer.dispose();\n            this._vertexBuffer = null;\n        }\n\n        if (this._spriteBuffer) {\n            this._spriteBuffer.dispose();\n            this._spriteBuffer = null;\n        }\n\n        if (this._indexBuffer) {\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n            this._indexBuffer = null;\n        }\n\n        if (disposeTexture && this.particleTexture) {\n            this.particleTexture.dispose();\n            this.particleTexture = null;\n        }\n\n        if (disposeTexture && this.noiseTexture) {\n            this.noiseTexture.dispose();\n            this.noiseTexture = null;\n        }\n\n        if (this._rampGradientsTexture) {\n            this._rampGradientsTexture.dispose();\n            this._rampGradientsTexture = null;\n        }\n\n        this._removeFromRoot();\n\n        if (this._subEmitters && this._subEmitters.length) {\n            for (var index = 0; index < this._subEmitters.length; index++) {\n                for (var subEmitter of this._subEmitters[index]) {\n                    subEmitter.dispose();\n                }\n            }\n\n            this._subEmitters = [];\n            this.subEmitters = [];\n        }\n\n        if (this._disposeEmitterOnDispose && this.emitter && (this.emitter as AbstractMesh).dispose) {\n            (<AbstractMesh>this.emitter).dispose(true);\n        }\n\n        // Remove from scene\n        var index = this._scene.particleSystems.indexOf(this);\n        if (index > -1) {\n            this._scene.particleSystems.splice(index, 1);\n        }\n\n        this._scene._activeParticleSystems.dispose();\n\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n\n        this.reset();\n    }\n\n    // Clone\n    /**\n     * Clones the particle system.\n     * @param name The name of the cloned object\n     * @param newEmitter The new emitter to use\n     * @returns the cloned particle system\n     */\n    public clone(name: string, newEmitter: any): ParticleSystem {\n        var custom: Nullable<Effect> = null;\n        var program: any = null;\n        if (this.customShader != null) {\n            program = this.customShader;\n            var defines: string = (program.shaderOptions.defines.length > 0) ? program.shaderOptions.defines.join(\"\\n\") : \"\";\n            custom = this._scene.getEngine().createEffectForParticles(program.shaderPath.fragmentElement, program.shaderOptions.uniforms, program.shaderOptions.samplers, defines);\n        } else if (this._customEffect) {\n            custom = this._customEffect;\n        }\n        var result = new ParticleSystem(name, this._capacity, this._scene, custom);\n        result.customShader = program;\n\n        DeepCopier.DeepCopy(this, result, [\"particles\", \"customShader\", \"noiseTexture\"]);\n\n        if (newEmitter === undefined) {\n            newEmitter = this.emitter;\n        }\n\n        result.noiseTexture = this.noiseTexture;\n        result.emitter = newEmitter;\n        if (this.particleTexture) {\n            result.particleTexture = new Texture(this.particleTexture.url, this._scene);\n        }\n\n        // Clone gradients\n        if (this._colorGradients) {\n            this._colorGradients.forEach((v) => {\n                result.addColorGradient(v.gradient, v.color1, v.color2);\n            });\n        }\n        if (this._dragGradients) {\n            this._dragGradients.forEach((v) => {\n                result.addDragGradient(v.gradient, v.factor1, v.factor2);\n            });\n        }\n        if (this._angularSpeedGradients) {\n            this._angularSpeedGradients.forEach((v) => {\n                result.addAngularSpeedGradient(v.gradient, v.factor1, v.factor2);\n            });\n        }\n        if (this._emitRateGradients) {\n            this._emitRateGradients.forEach((v) => {\n                result.addEmitRateGradient(v.gradient, v.factor1, v.factor2);\n            });\n        }\n        if (this._lifeTimeGradients) {\n            this._lifeTimeGradients.forEach((v) => {\n                result.addLifeTimeGradient(v.gradient, v.factor1, v.factor2);\n            });\n        }\n        if (this._limitVelocityGradients) {\n            this._limitVelocityGradients.forEach((v) => {\n                result.addLimitVelocityGradient(v.gradient, v.factor1, v.factor2);\n            });\n        }\n        if (this._sizeGradients) {\n            this._sizeGradients.forEach((v) => {\n                result.addSizeGradient(v.gradient, v.factor1, v.factor2);\n            });\n        }\n        if (this._startSizeGradients) {\n            this._startSizeGradients.forEach((v) => {\n                result.addStartSizeGradient(v.gradient, v.factor1, v.factor2);\n            });\n        }\n        if (this._velocityGradients) {\n            this._velocityGradients.forEach((v) => {\n                result.addVelocityGradient(v.gradient, v.factor1, v.factor2);\n            });\n        }\n        if (this._rampGradients) {\n            this._rampGradients.forEach((v) => {\n                result.addRampGradient(v.gradient, v.color);\n            });\n        }\n        if (this._colorRemapGradients) {\n            this._colorRemapGradients.forEach((v) => {\n                result.addColorRemapGradient(v.gradient, v.factor1, v.factor2!);\n            });\n        }\n        if (this._alphaRemapGradients) {\n            this._alphaRemapGradients.forEach((v) => {\n                result.addAlphaRemapGradient(v.gradient, v.factor1, v.factor2!);\n            });\n        }\n\n        if (!this.preventAutoStart) {\n            result.start();\n        }\n\n        return result;\n    }\n\n    /**\n     * Serializes the particle system to a JSON object.\n     * @returns the JSON object\n     */\n    public serialize(): any {\n        var serializationObject: any = {};\n\n        ParticleSystem._Serialize(serializationObject, this);\n\n        serializationObject.textureMask = this.textureMask.asArray();\n        serializationObject.customShader = this.customShader;\n        serializationObject.preventAutoStart = this.preventAutoStart;\n\n        // SubEmitters\n        if (this.subEmitters) {\n            serializationObject.subEmitters = [];\n\n            if (!this._subEmitters) {\n                this._prepareSubEmitterInternalArray();\n            }\n\n            for (var subs of this._subEmitters) {\n                let cell = [];\n                for (var sub of subs) {\n                    cell.push(sub.serialize());\n                }\n\n                serializationObject.subEmitters.push(cell);\n            }\n        }\n\n        return serializationObject;\n    }\n\n    /** @hidden */\n    public static _Serialize(serializationObject: any, particleSystem: IParticleSystem) {\n        serializationObject.name = particleSystem.name;\n        serializationObject.id = particleSystem.id;\n\n        serializationObject.capacity = particleSystem.getCapacity();\n\n        // Emitter\n        if ((<AbstractMesh>particleSystem.emitter).position) {\n            var emitterMesh = (<AbstractMesh>particleSystem.emitter);\n            serializationObject.emitterId = emitterMesh.id;\n        } else {\n            var emitterPosition = (<Vector3>particleSystem.emitter);\n            serializationObject.emitter = emitterPosition.asArray();\n        }\n\n        // Emitter\n        if (particleSystem.particleEmitterType) {\n            serializationObject.particleEmitterType = particleSystem.particleEmitterType.serialize();\n        }\n\n        if (particleSystem.particleTexture) {\n            serializationObject.textureName = particleSystem.particleTexture.name;\n            serializationObject.invertY = particleSystem.particleTexture._invertY;\n        }\n\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(particleSystem, serializationObject);\n        serializationObject.beginAnimationOnStart = particleSystem.beginAnimationOnStart;\n        serializationObject.beginAnimationFrom = particleSystem.beginAnimationFrom;\n        serializationObject.beginAnimationTo = particleSystem.beginAnimationTo;\n        serializationObject.beginAnimationLoop = particleSystem.beginAnimationLoop;\n\n        // Particle system\n        serializationObject.startDelay = particleSystem.startDelay;\n        serializationObject.renderingGroupId = particleSystem.renderingGroupId;\n        serializationObject.isBillboardBased = particleSystem.isBillboardBased;\n        serializationObject.billboardMode = particleSystem.billboardMode;\n        serializationObject.minAngularSpeed = particleSystem.minAngularSpeed;\n        serializationObject.maxAngularSpeed = particleSystem.maxAngularSpeed;\n        serializationObject.minSize = particleSystem.minSize;\n        serializationObject.maxSize = particleSystem.maxSize;\n        serializationObject.minScaleX = particleSystem.minScaleX;\n        serializationObject.maxScaleX = particleSystem.maxScaleX;\n        serializationObject.minScaleY = particleSystem.minScaleY;\n        serializationObject.maxScaleY = particleSystem.maxScaleY;\n        serializationObject.minEmitPower = particleSystem.minEmitPower;\n        serializationObject.maxEmitPower = particleSystem.maxEmitPower;\n        serializationObject.minLifeTime = particleSystem.minLifeTime;\n        serializationObject.maxLifeTime = particleSystem.maxLifeTime;\n        serializationObject.emitRate = particleSystem.emitRate;\n        serializationObject.gravity = particleSystem.gravity.asArray();\n        serializationObject.noiseStrength = particleSystem.noiseStrength.asArray();\n        serializationObject.color1 = particleSystem.color1.asArray();\n        serializationObject.color2 = particleSystem.color2.asArray();\n        serializationObject.colorDead = particleSystem.colorDead.asArray();\n        serializationObject.updateSpeed = particleSystem.updateSpeed;\n        serializationObject.targetStopDuration = particleSystem.targetStopDuration;\n        serializationObject.blendMode = particleSystem.blendMode;\n        serializationObject.preWarmCycles = particleSystem.preWarmCycles;\n        serializationObject.preWarmStepOffset = particleSystem.preWarmStepOffset;\n        serializationObject.minInitialRotation = particleSystem.minInitialRotation;\n        serializationObject.maxInitialRotation = particleSystem.maxInitialRotation;\n        serializationObject.startSpriteCellID = particleSystem.startSpriteCellID;\n        serializationObject.endSpriteCellID = particleSystem.endSpriteCellID;\n        serializationObject.spriteCellChangeSpeed = particleSystem.spriteCellChangeSpeed;\n        serializationObject.spriteCellWidth = particleSystem.spriteCellWidth;\n        serializationObject.spriteCellHeight = particleSystem.spriteCellHeight;\n        serializationObject.spriteRandomStartCell = particleSystem.spriteRandomStartCell;\n        serializationObject.isAnimationSheetEnabled = particleSystem.isAnimationSheetEnabled;\n\n        let colorGradients = particleSystem.getColorGradients();\n        if (colorGradients) {\n            serializationObject.colorGradients = [];\n            for (var colorGradient of colorGradients) {\n                var serializedGradient: any = {\n                    gradient: colorGradient.gradient,\n                    color1: colorGradient.color1.asArray()\n                };\n\n                if (colorGradient.color2) {\n                    serializedGradient.color2 = colorGradient.color2.asArray();\n                }\n\n                serializationObject.colorGradients.push(serializedGradient);\n            }\n        }\n\n        let rampGradients = particleSystem.getRampGradients();\n        if (rampGradients) {\n            serializationObject.rampGradients = [];\n            for (var rampGradient of rampGradients) {\n                var serializedGradient: any = {\n                    gradient: rampGradient.gradient,\n                    color: rampGradient.color.asArray()\n                };\n\n                serializationObject.rampGradients.push(serializedGradient);\n            }\n            serializationObject.useRampGradients = particleSystem.useRampGradients;\n        }\n\n        let colorRemapGradients = particleSystem.getColorRemapGradients();\n        if (colorRemapGradients) {\n            serializationObject.colorRemapGradients = [];\n            for (var colorRemapGradient of colorRemapGradients) {\n\n                var serializedGradient: any = {\n                    gradient: colorRemapGradient.gradient,\n                    factor1: colorRemapGradient.factor1\n                };\n\n                if (colorRemapGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = colorRemapGradient.factor2;\n                }\n\n                serializationObject.colorRemapGradients.push(serializedGradient);\n            }\n        }\n\n        let alphaRemapGradients = particleSystem.getAlphaRemapGradients();\n        if (alphaRemapGradients) {\n            serializationObject.alphaRemapGradients = [];\n            for (var alphaRemapGradient of alphaRemapGradients) {\n\n                var serializedGradient: any = {\n                    gradient: alphaRemapGradient.gradient,\n                    factor1: alphaRemapGradient.factor1\n                };\n\n                if (alphaRemapGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = alphaRemapGradient.factor2;\n                }\n\n                serializationObject.alphaRemapGradients.push(serializedGradient);\n            }\n        }\n\n        let sizeGradients = particleSystem.getSizeGradients();\n        if (sizeGradients) {\n            serializationObject.sizeGradients = [];\n            for (var sizeGradient of sizeGradients) {\n\n                var serializedGradient: any = {\n                    gradient: sizeGradient.gradient,\n                    factor1: sizeGradient.factor1\n                };\n\n                if (sizeGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = sizeGradient.factor2;\n                }\n\n                serializationObject.sizeGradients.push(serializedGradient);\n            }\n        }\n\n        let angularSpeedGradients = particleSystem.getAngularSpeedGradients();\n        if (angularSpeedGradients) {\n            serializationObject.angularSpeedGradients = [];\n            for (var angularSpeedGradient of angularSpeedGradients) {\n\n                var serializedGradient: any = {\n                    gradient: angularSpeedGradient.gradient,\n                    factor1: angularSpeedGradient.factor1\n                };\n\n                if (angularSpeedGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = angularSpeedGradient.factor2;\n                }\n\n                serializationObject.angularSpeedGradients.push(serializedGradient);\n            }\n        }\n\n        let velocityGradients = particleSystem.getVelocityGradients();\n        if (velocityGradients) {\n            serializationObject.velocityGradients = [];\n            for (var velocityGradient of velocityGradients) {\n\n                var serializedGradient: any = {\n                    gradient: velocityGradient.gradient,\n                    factor1: velocityGradient.factor1\n                };\n\n                if (velocityGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = velocityGradient.factor2;\n                }\n\n                serializationObject.velocityGradients.push(serializedGradient);\n            }\n        }\n\n        let dragGradients = particleSystem.getDragGradients();\n        if (dragGradients) {\n            serializationObject.dragyGradients = [];\n            for (var dragGradient of dragGradients) {\n\n                var serializedGradient: any = {\n                    gradient: dragGradient.gradient,\n                    factor1: dragGradient.factor1\n                };\n\n                if (dragGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = dragGradient.factor2;\n                }\n\n                serializationObject.dragGradients.push(serializedGradient);\n            }\n        }\n\n        let emitRateGradients = particleSystem.getEmitRateGradients();\n        if (emitRateGradients) {\n            serializationObject.emitRateGradients = [];\n            for (var emitRateGradient of emitRateGradients) {\n\n                var serializedGradient: any = {\n                    gradient: emitRateGradient.gradient,\n                    factor1: emitRateGradient.factor1\n                };\n\n                if (emitRateGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = emitRateGradient.factor2;\n                }\n\n                serializationObject.emitRateGradients.push(serializedGradient);\n            }\n        }\n\n        let startSizeGradients = particleSystem.getStartSizeGradients();\n        if (startSizeGradients) {\n            serializationObject.startSizeGradients = [];\n            for (var startSizeGradient of startSizeGradients) {\n\n                var serializedGradient: any = {\n                    gradient: startSizeGradient.gradient,\n                    factor1: startSizeGradient.factor1\n                };\n\n                if (startSizeGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = startSizeGradient.factor2;\n                }\n\n                serializationObject.startSizeGradients.push(serializedGradient);\n            }\n        }\n\n        let lifeTimeGradients = particleSystem.getLifeTimeGradients();\n        if (lifeTimeGradients) {\n            serializationObject.lifeTimeGradients = [];\n            for (var lifeTimeGradient of lifeTimeGradients) {\n\n                var serializedGradient: any = {\n                    gradient: lifeTimeGradient.gradient,\n                    factor1: lifeTimeGradient.factor1\n                };\n\n                if (lifeTimeGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = lifeTimeGradient.factor2;\n                }\n\n                serializationObject.lifeTimeGradients.push(serializedGradient);\n            }\n        }\n\n        let limitVelocityGradients = particleSystem.getLimitVelocityGradients();\n        if (limitVelocityGradients) {\n            serializationObject.limitVelocityGradients = [];\n            for (var limitVelocityGradient of limitVelocityGradients) {\n\n                var serializedGradient: any = {\n                    gradient: limitVelocityGradient.gradient,\n                    factor1: limitVelocityGradient.factor1\n                };\n\n                if (limitVelocityGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = limitVelocityGradient.factor2;\n                }\n\n                serializationObject.limitVelocityGradients.push(serializedGradient);\n            }\n\n            serializationObject.limitVelocityDamping = particleSystem.limitVelocityDamping;\n        }\n\n        if (particleSystem.noiseTexture) {\n            serializationObject.noiseTexture = particleSystem.noiseTexture.serialize();\n        }\n    }\n\n    /** @hidden */\n    public static _Parse(parsedParticleSystem: any, particleSystem: IParticleSystem, scene: Scene, rootUrl: string) {\n        // Texture\n        if (parsedParticleSystem.textureName) {\n            particleSystem.particleTexture = new Texture(rootUrl + parsedParticleSystem.textureName, scene, false, parsedParticleSystem.invertY !== undefined ? parsedParticleSystem.invertY : true);\n            particleSystem.particleTexture.name = parsedParticleSystem.textureName;\n        }\n\n        // Emitter\n        if (!parsedParticleSystem.emitterId && parsedParticleSystem.emitterId !== 0 && parsedParticleSystem.emitter === undefined) {\n            particleSystem.emitter = Vector3.Zero();\n        }\n        else if (parsedParticleSystem.emitterId) {\n            particleSystem.emitter = scene.getLastMeshByID(parsedParticleSystem.emitterId);\n        } else {\n            particleSystem.emitter = Vector3.FromArray(parsedParticleSystem.emitter);\n        }\n\n        // Misc.\n        if (parsedParticleSystem.renderingGroupId !== undefined) {\n            particleSystem.renderingGroupId = parsedParticleSystem.renderingGroupId;\n        }\n\n        if (parsedParticleSystem.isBillboardBased !== undefined) {\n            particleSystem.isBillboardBased = parsedParticleSystem.isBillboardBased;\n        }\n\n        if (parsedParticleSystem.billboardMode !== undefined) {\n            particleSystem.billboardMode = parsedParticleSystem.billboardMode;\n        }\n\n        // Animations\n        if (parsedParticleSystem.animations) {\n            for (var animationIndex = 0; animationIndex < parsedParticleSystem.animations.length; animationIndex++) {\n                var parsedAnimation = parsedParticleSystem.animations[animationIndex];\n                const internalClass = _TypeStore.GetClass(\"BABYLON.Animation\");\n                if (internalClass) {\n                    particleSystem.animations.push(internalClass.Parse(parsedAnimation));\n                }\n            }\n            particleSystem.beginAnimationOnStart = parsedParticleSystem.beginAnimationOnStart;\n            particleSystem.beginAnimationFrom = parsedParticleSystem.beginAnimationFrom;\n            particleSystem.beginAnimationTo = parsedParticleSystem.beginAnimationTo;\n            particleSystem.beginAnimationLoop = parsedParticleSystem.beginAnimationLoop;\n        }\n\n        if (parsedParticleSystem.autoAnimate) {\n            scene.beginAnimation(particleSystem, parsedParticleSystem.autoAnimateFrom, parsedParticleSystem.autoAnimateTo, parsedParticleSystem.autoAnimateLoop, parsedParticleSystem.autoAnimateSpeed || 1.0);\n        }\n\n        // Particle system\n        particleSystem.startDelay = parsedParticleSystem.startDelay | 0;\n        particleSystem.minAngularSpeed = parsedParticleSystem.minAngularSpeed;\n        particleSystem.maxAngularSpeed = parsedParticleSystem.maxAngularSpeed;\n        particleSystem.minSize = parsedParticleSystem.minSize;\n        particleSystem.maxSize = parsedParticleSystem.maxSize;\n\n        if (parsedParticleSystem.minScaleX) {\n            particleSystem.minScaleX = parsedParticleSystem.minScaleX;\n            particleSystem.maxScaleX = parsedParticleSystem.maxScaleX;\n            particleSystem.minScaleY = parsedParticleSystem.minScaleY;\n            particleSystem.maxScaleY = parsedParticleSystem.maxScaleY;\n        }\n\n        if (parsedParticleSystem.preWarmCycles !== undefined) {\n            particleSystem.preWarmCycles = parsedParticleSystem.preWarmCycles;\n            particleSystem.preWarmStepOffset = parsedParticleSystem.preWarmStepOffset;\n        }\n\n        if (parsedParticleSystem.minInitialRotation !== undefined) {\n            particleSystem.minInitialRotation = parsedParticleSystem.minInitialRotation;\n            particleSystem.maxInitialRotation = parsedParticleSystem.maxInitialRotation;\n        }\n\n        particleSystem.minLifeTime = parsedParticleSystem.minLifeTime;\n        particleSystem.maxLifeTime = parsedParticleSystem.maxLifeTime;\n        particleSystem.minEmitPower = parsedParticleSystem.minEmitPower;\n        particleSystem.maxEmitPower = parsedParticleSystem.maxEmitPower;\n        particleSystem.emitRate = parsedParticleSystem.emitRate;\n        particleSystem.gravity = Vector3.FromArray(parsedParticleSystem.gravity);\n        if (parsedParticleSystem.noiseStrength) {\n            particleSystem.noiseStrength = Vector3.FromArray(parsedParticleSystem.noiseStrength);\n        }\n        particleSystem.color1 = Color4.FromArray(parsedParticleSystem.color1);\n        particleSystem.color2 = Color4.FromArray(parsedParticleSystem.color2);\n        particleSystem.colorDead = Color4.FromArray(parsedParticleSystem.colorDead);\n        particleSystem.updateSpeed = parsedParticleSystem.updateSpeed;\n        particleSystem.targetStopDuration = parsedParticleSystem.targetStopDuration;\n        particleSystem.blendMode = parsedParticleSystem.blendMode;\n\n        if (parsedParticleSystem.colorGradients) {\n            for (var colorGradient of parsedParticleSystem.colorGradients) {\n                particleSystem.addColorGradient(colorGradient.gradient, Color4.FromArray(colorGradient.color1), colorGradient.color2 ? Color4.FromArray(colorGradient.color2) : undefined);\n            }\n        }\n\n        if (parsedParticleSystem.rampGradients) {\n            for (var rampGradient of parsedParticleSystem.rampGradients) {\n                particleSystem.addRampGradient(rampGradient.gradient, Color3.FromArray(rampGradient.color));\n            }\n            particleSystem.useRampGradients = parsedParticleSystem.useRampGradients;\n        }\n\n        if (parsedParticleSystem.colorRemapGradients) {\n            for (var colorRemapGradient of parsedParticleSystem.colorRemapGradients) {\n                particleSystem.addColorRemapGradient(colorRemapGradient.gradient, colorRemapGradient.factor1 !== undefined ? colorRemapGradient.factor1 : colorRemapGradient.factor, colorRemapGradient.factor2);\n            }\n        }\n\n        if (parsedParticleSystem.alphaRemapGradients) {\n            for (var alphaRemapGradient of parsedParticleSystem.alphaRemapGradients) {\n                particleSystem.addAlphaRemapGradient(alphaRemapGradient.gradient, alphaRemapGradient.factor1 !== undefined ? alphaRemapGradient.factor1 : alphaRemapGradient.factor, alphaRemapGradient.factor2);\n            }\n        }\n\n        if (parsedParticleSystem.sizeGradients) {\n            for (var sizeGradient of parsedParticleSystem.sizeGradients) {\n                particleSystem.addSizeGradient(sizeGradient.gradient, sizeGradient.factor1 !== undefined ? sizeGradient.factor1 : sizeGradient.factor, sizeGradient.factor2);\n            }\n        }\n\n        if (parsedParticleSystem.sizeGradients) {\n            for (var sizeGradient of parsedParticleSystem.sizeGradients) {\n                particleSystem.addSizeGradient(sizeGradient.gradient, sizeGradient.factor1 !== undefined ? sizeGradient.factor1 : sizeGradient.factor, sizeGradient.factor2);\n            }\n        }\n\n        if (parsedParticleSystem.angularSpeedGradients) {\n            for (var angularSpeedGradient of parsedParticleSystem.angularSpeedGradients) {\n                particleSystem.addAngularSpeedGradient(angularSpeedGradient.gradient, angularSpeedGradient.factor1 !== undefined ? angularSpeedGradient.factor1 : angularSpeedGradient.factor, angularSpeedGradient.factor2);\n            }\n        }\n\n        if (parsedParticleSystem.velocityGradients) {\n            for (var velocityGradient of parsedParticleSystem.velocityGradients) {\n                particleSystem.addVelocityGradient(velocityGradient.gradient, velocityGradient.factor1 !== undefined ? velocityGradient.factor1 : velocityGradient.factor, velocityGradient.factor2);\n            }\n        }\n\n        if (parsedParticleSystem.dragGradients) {\n            for (var dragGradient of parsedParticleSystem.dragGradients) {\n                particleSystem.addDragGradient(dragGradient.gradient, dragGradient.factor1 !== undefined ? dragGradient.factor1 : dragGradient.factor, dragGradient.factor2);\n            }\n        }\n\n        if (parsedParticleSystem.emitRateGradients) {\n            for (var emitRateGradient of parsedParticleSystem.emitRateGradients) {\n                particleSystem.addEmitRateGradient(emitRateGradient.gradient, emitRateGradient.factor1 !== undefined ? emitRateGradient.factor1 : emitRateGradient.factor, emitRateGradient.factor2);\n            }\n        }\n\n        if (parsedParticleSystem.startSizeGradients) {\n            for (var startSizeGradient of parsedParticleSystem.startSizeGradients) {\n                particleSystem.addStartSizeGradient(startSizeGradient.gradient, startSizeGradient.factor1 !== undefined ? startSizeGradient.factor1 : startSizeGradient.factor, startSizeGradient.factor2);\n            }\n        }\n\n        if (parsedParticleSystem.lifeTimeGradients) {\n            for (var lifeTimeGradient of parsedParticleSystem.lifeTimeGradients) {\n                particleSystem.addLifeTimeGradient(lifeTimeGradient.gradient, lifeTimeGradient.factor1 !== undefined ? lifeTimeGradient.factor1 : lifeTimeGradient.factor, lifeTimeGradient.factor2);\n            }\n        }\n\n        if (parsedParticleSystem.limitVelocityGradients) {\n            for (var limitVelocityGradient of parsedParticleSystem.limitVelocityGradients) {\n                particleSystem.addLimitVelocityGradient(limitVelocityGradient.gradient, limitVelocityGradient.factor1 !== undefined ? limitVelocityGradient.factor1 : limitVelocityGradient.factor, limitVelocityGradient.factor2);\n            }\n            particleSystem.limitVelocityDamping = parsedParticleSystem.limitVelocityDamping;\n        }\n\n        if (parsedParticleSystem.noiseTexture) {\n            particleSystem.noiseTexture = ProceduralTexture.Parse(parsedParticleSystem.noiseTexture, scene, rootUrl);\n        }\n\n        // Emitter\n        let emitterType: IParticleEmitterType;\n        if (parsedParticleSystem.particleEmitterType) {\n            switch (parsedParticleSystem.particleEmitterType.type) {\n                case \"SphereParticleEmitter\":\n                    emitterType = new SphereParticleEmitter();\n                    break;\n                case \"SphereDirectedParticleEmitter\":\n                    emitterType = new SphereDirectedParticleEmitter();\n                    break;\n                case \"ConeEmitter\":\n                case \"ConeParticleEmitter\":\n                    emitterType = new ConeParticleEmitter();\n                    break;\n                case \"CylinderParticleEmitter\":\n                    emitterType = new CylinderParticleEmitter();\n                    break;\n                case \"HemisphericParticleEmitter\":\n                    emitterType = new HemisphericParticleEmitter();\n                    break;\n                case \"BoxEmitter\":\n                case \"BoxParticleEmitter\":\n                default:\n                    emitterType = new BoxParticleEmitter();\n                    break;\n            }\n\n            emitterType.parse(parsedParticleSystem.particleEmitterType);\n        } else {\n            emitterType = new BoxParticleEmitter();\n            emitterType.parse(parsedParticleSystem);\n        }\n        particleSystem.particleEmitterType = emitterType;\n\n        // Animation sheet\n        particleSystem.startSpriteCellID = parsedParticleSystem.startSpriteCellID;\n        particleSystem.endSpriteCellID = parsedParticleSystem.endSpriteCellID;\n        particleSystem.spriteCellWidth = parsedParticleSystem.spriteCellWidth;\n        particleSystem.spriteCellHeight = parsedParticleSystem.spriteCellHeight;\n        particleSystem.spriteCellChangeSpeed = parsedParticleSystem.spriteCellChangeSpeed;\n        particleSystem.spriteRandomStartCell = parsedParticleSystem.spriteRandomStartCell;\n    }\n\n    /**\n     * Parses a JSON object to create a particle system.\n     * @param parsedParticleSystem The JSON object to parse\n     * @param scene The scene to create the particle system in\n     * @param rootUrl The root url to use to load external dependencies like texture\n     * @param doNotStart Ignore the preventAutoStart attribute and does not start\n     * @returns the Parsed particle system\n     */\n    public static Parse(parsedParticleSystem: any, scene: Scene, rootUrl: string, doNotStart = false): ParticleSystem {\n        var name = parsedParticleSystem.name;\n        var custom: Nullable<Effect> = null;\n        var program: any = null;\n        if (parsedParticleSystem.customShader) {\n            program = parsedParticleSystem.customShader;\n            var defines: string = (program.shaderOptions.defines.length > 0) ? program.shaderOptions.defines.join(\"\\n\") : \"\";\n            custom = scene.getEngine().createEffectForParticles(program.shaderPath.fragmentElement, program.shaderOptions.uniforms, program.shaderOptions.samplers, defines);\n        }\n        var particleSystem = new ParticleSystem(name, parsedParticleSystem.capacity, scene, custom, parsedParticleSystem.isAnimationSheetEnabled);\n        particleSystem.customShader = program;\n\n        if (parsedParticleSystem.id) {\n            particleSystem.id = parsedParticleSystem.id;\n        }\n\n        // SubEmitters\n        if (parsedParticleSystem.subEmitters) {\n            particleSystem.subEmitters = [];\n            for (var cell of parsedParticleSystem.subEmitters) {\n                let cellArray = [];\n                for (var sub of cell) {\n                    cellArray.push(SubEmitter.Parse(sub, scene, rootUrl));\n                }\n\n                particleSystem.subEmitters.push(cellArray);\n            }\n        }\n\n        ParticleSystem._Parse(parsedParticleSystem, particleSystem, scene, rootUrl);\n\n        particleSystem.textureMask = Color4.FromArray(parsedParticleSystem.textureMask);\n\n        // Auto start\n        if (parsedParticleSystem.preventAutoStart) {\n            particleSystem.preventAutoStart = parsedParticleSystem.preventAutoStart;\n        }\n\n        if (!doNotStart && !particleSystem.preventAutoStart) {\n            particleSystem.start();\n        }\n\n        return particleSystem;\n    }\n}\n\nSubEmitter._ParseParticleSystem = ParticleSystem.Parse;\n"]}