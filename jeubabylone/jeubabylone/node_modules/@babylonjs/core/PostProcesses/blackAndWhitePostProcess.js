import * as tslib_1 from "tslib";
import { PostProcess } from "./postProcess";
import "../Shaders/blackAndWhite.fragment";
/**
 * Post process used to render in black and white
 */
var BlackAndWhitePostProcess = /** @class */ (function (_super) {
    tslib_1.__extends(BlackAndWhitePostProcess, _super);
    /**
     * Creates a black and white post process
     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#black-and-white
     * @param name The name of the effect.
     * @param options The required width/height ratio to downsize to before computing the render pass.
     * @param camera The camera to apply the render pass to.
     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)
     * @param engine The engine which the post process will be applied. (default: current engine)
     * @param reusable If the post process can be reused on the same frame. (default: false)
     */
    function BlackAndWhitePostProcess(name, options, camera, samplingMode, engine, reusable) {
        var _this = _super.call(this, name, "blackAndWhite", ["degree"], null, options, camera, samplingMode, engine, reusable) || this;
        /**
         * Linear about to convert he result to black and white (default: 1)
         */
        _this.degree = 1;
        _this.onApplyObservable.add(function (effect) {
            effect.setFloat("degree", _this.degree);
        });
        return _this;
    }
    return BlackAndWhitePostProcess;
}(PostProcess));
export { BlackAndWhitePostProcess };
//# sourceMappingURL=blackAndWhitePostProcess.js.map