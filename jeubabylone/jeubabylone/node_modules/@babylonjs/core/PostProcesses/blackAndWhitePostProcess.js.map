{"version":3,"file":"blackAndWhitePostProcess.js","sourceRoot":"","sources":["../../../sourceES6/core/PostProcesses/blackAndWhitePostProcess.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,WAAW,EAAsB,MAAM,eAAe,CAAC;AAKhE,OAAO,mCAAmC,CAAC;AAE3C;;GAEG;AACH;IAA8C,oDAAW;IAMrD;;;;;;;;;OASG;IACH,kCAAY,IAAY,EAAE,OAAoC,EAAE,MAAc,EAAE,YAAqB,EAAE,MAAe,EAAE,QAAkB;QAA1I,YACI,kBAAM,IAAI,EAAE,eAAe,EAAE,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,CAAC,SAKlG;QArBD;;WAEG;QACI,YAAM,GAAG,CAAC,CAAC;QAed,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAC,MAAc;YACtC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;;IACP,CAAC;IACL,+BAAC;AAAD,CAAC,AAvBD,CAA8C,WAAW,GAuBxD","sourcesContent":["import { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/blackAndWhite.fragment\";\r\n\r\n/**\r\n * Post process used to render in black and white\r\n */\r\nexport class BlackAndWhitePostProcess extends PostProcess {\r\n    /**\r\n     * Linear about to convert he result to black and white (default: 1)\r\n     */\r\n    public degree = 1;\r\n\r\n    /**\r\n     * Creates a black and white post process\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#black-and-white\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Camera, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"blackAndWhite\", [\"degree\"], null, options, camera, samplingMode, engine, reusable);\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat(\"degree\", this.degree);\r\n        });\r\n    }\r\n}\r\n"]}