{"version":3,"file":"chromaticAberrationPostProcess.js","sourceRoot":"","sources":["../../../sourceES6/core/PostProcesses/chromaticAberrationPostProcess.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAExC,OAAO,EAAE,WAAW,EAAsB,MAAM,eAAe,CAAC;AAIhE,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAEjD,OAAO,yCAAyC,CAAC;AAEjD;;GAEG;AACH;IAAoD,0DAAW;IAqB3D;;;;;;;;;;;;OAYG;IACH,wCAAY,IAAY,EAAE,WAAmB,EAAE,YAAoB,EAAE,OAAoC,EAAE,MAAwB,EAAE,YAAqB,EAAE,MAAe,EAAE,QAAkB,EAAE,WAAwD,EAAE,gBAAwB;QAAlF,4BAAA,EAAA,cAAsB,SAAS,CAAC,wBAAwB;QAAE,iCAAA,EAAA,wBAAwB;QAAnR,YACI,kBAAM,IAAI,EAAE,qBAAqB,EAAE,CAAC,sBAAsB,EAAE,cAAc,EAAE,eAAe,EAAE,WAAW,EAAE,iBAAiB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,gBAAgB,CAAC,SAS7P;QA3CD;;WAEG;QACH,sBAAgB,GAAG,EAAE,CAAC;QAEtB;;WAEG;QACH,qBAAe,GAAG,CAAC,CAAC;QAEpB;;WAEG;QACH,eAAS,GAAG,IAAI,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAEtC;;WAEG;QACH,oBAAc,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAiBnC,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAC,MAAc;YACtC,MAAM,CAAC,QAAQ,CAAC,sBAAsB,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;YAC/D,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YAC/C,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,KAAI,CAAC,eAAe,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,KAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE,KAAI,CAAC,cAAc,CAAC,CAAC,EAAE,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;;IACP,CAAC;IACL,qCAAC;AAAD,CAAC,AA7CD,CAAoD,WAAW,GA6C9D","sourcesContent":["import { Vector2 } from \"../Maths/math\";\r\nimport { Nullable } from \"../types\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/chromaticAberration.fragment\";\r\n\r\n/**\r\n * The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen\r\n */\r\nexport class ChromaticAberrationPostProcess extends PostProcess {\r\n    /**\r\n     * The amount of seperation of rgb channels (default: 30)\r\n     */\r\n    aberrationAmount = 30;\r\n\r\n    /**\r\n     * The amount the effect will increase for pixels closer to the edge of the screen. (default: 0)\r\n     */\r\n    radialIntensity = 0;\r\n\r\n    /**\r\n     * The normilized direction in which the rgb channels should be seperated. If set to 0,0 radial direction will be used. (default: Vector2(0.707,0.707))\r\n     */\r\n    direction = new Vector2(0.707, 0.707);\r\n\r\n    /**\r\n     * The center position where the radialIntensity should be around. [0.5,0.5 is center of screen, 1,1 is top right corder] (default: Vector2(0.5 ,0.5))\r\n     */\r\n    centerPosition = new Vector2(0.5, 0.5);\r\n\r\n    /**\r\n     * Creates a new instance ChromaticAberrationPostProcess\r\n     * @param name The name of the effect.\r\n     * @param screenWidth The width of the screen to apply the effect on.\r\n     * @param screenHeight The height of the screen to apply the effect on.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, screenWidth: number, screenHeight: number, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT, blockCompilation = false) {\r\n        super(name, \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat('chromatic_aberration', this.aberrationAmount);\r\n            effect.setFloat('screen_width', screenWidth);\r\n            effect.setFloat('screen_height', screenHeight);\r\n            effect.setFloat('radialIntensity', this.radialIntensity);\r\n            effect.setFloat2('direction', this.direction.x, this.direction.y);\r\n            effect.setFloat2('centerPosition', this.centerPosition.x, this.centerPosition.y);\r\n        });\r\n    }\r\n}\r\n"]}