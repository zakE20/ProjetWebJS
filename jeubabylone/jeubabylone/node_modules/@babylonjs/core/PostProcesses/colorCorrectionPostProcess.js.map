{"version":3,"file":"colorCorrectionPostProcess.js","sourceRoot":"","sources":["../../../sourceES6/core/PostProcesses/colorCorrectionPostProcess.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,WAAW,EAAsB,MAAM,eAAe,CAAC;AAEhE,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AAIxD,OAAO,qCAAqC,CAAC;AAE7C;;;;;;;;;;;;;;GAcG;AACH;IAAgD,sDAAW;IAIvD,oCAAY,IAAY,EAAE,aAAqB,EAAE,OAAoC,EAAE,MAAc,EAAE,YAAqB,EAAE,MAAe,EAAE,QAAkB;QAAjK,YACI,kBAAM,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,YAAY,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,CAAC,SAUxG;QARG,KAAI,CAAC,kBAAkB,GAAG,IAAI,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,sBAAsB,CAAC,CAAC;QACrH,KAAI,CAAC,kBAAkB,CAAC,yBAAyB,GAAG,CAAC,CAAC;QACtD,KAAI,CAAC,kBAAkB,CAAC,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC;QAC1D,KAAI,CAAC,kBAAkB,CAAC,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC;QAE1D,KAAI,CAAC,OAAO,GAAG,UAAC,MAAc;YAC1B,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,KAAI,CAAC,kBAAkB,CAAC,CAAC;QAC7D,CAAC,CAAC;;IACN,CAAC;IACL,iCAAC;AAAD,CAAC,AAhBD,CAAgD,WAAW,GAgB1D","sourcesContent":["import { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Camera } from \"../Cameras/camera\";\r\n\r\nimport \"../Shaders/colorCorrection.fragment\";\r\n\r\n/**\r\n *\r\n * This post-process allows the modification of rendered colors by using\r\n * a 'look-up table' (LUT). This effect is also called Color Grading.\r\n *\r\n * The object needs to be provided an url to a texture containing the color\r\n * look-up table: the texture must be 256 pixels wide and 16 pixels high.\r\n * Use an image editing software to tweak the LUT to match your needs.\r\n *\r\n * For an example of a color LUT, see here:\r\n * @see http://udn.epicgames.com/Three/rsrc/Three/ColorGrading/RGBTable16x1.png\r\n * For explanations on color grading, see here:\r\n * @see http://udn.epicgames.com/Three/ColorGrading.html\r\n *\r\n */\r\nexport class ColorCorrectionPostProcess extends PostProcess {\r\n\r\n    private _colorTableTexture: Texture;\r\n\r\n    constructor(name: string, colorTableUrl: string, options: number | PostProcessOptions, camera: Camera, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, 'colorCorrection', null, ['colorTable'], options, camera, samplingMode, engine, reusable);\r\n\r\n        this._colorTableTexture = new Texture(colorTableUrl, camera.getScene(), true, false, Texture.TRILINEAR_SAMPLINGMODE);\r\n        this._colorTableTexture.anisotropicFilteringLevel = 1;\r\n        this._colorTableTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._colorTableTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setTexture(\"colorTable\", this._colorTableTexture);\r\n        };\r\n    }\r\n}\r\n"]}