{"version":3,"file":"convolutionPostProcess.js","sourceRoot":"","sources":["../../../sourceES6/core/PostProcesses/convolutionPostProcess.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,WAAW,EAAsB,MAAM,eAAe,CAAC;AAKhE,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAEjD,OAAO,iCAAiC,CAAC;AAEzC;;;;GAIG;AACH;IAA4C,kDAAW;IACnD;;;;;;;;;;OAUG;IACH,gCAAY,IAAY;IACpB,sEAAsE;IAC/D,MAAgB,EACvB,OAAoC,EAAE,MAAwB,EAAE,YAAqB,EAAE,MAAe,EAAE,QAAkB,EAAE,WAAwD;QAAxD,4BAAA,EAAA,cAAsB,SAAS,CAAC,wBAAwB;QAHxL,YAII,kBAAM,IAAI,EAAE,aAAa,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,CAAC,SAMjI;QARU,YAAM,GAAN,MAAM,CAAU;QAIvB,KAAI,CAAC,OAAO,GAAG,UAAC,MAAc;YAC1B,MAAM,CAAC,SAAS,CAAC,YAAY,EAAE,KAAI,CAAC,KAAK,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;YACxD,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC;;IACN,CAAC;IAED,UAAU;IACV;;OAEG;IACW,wCAAiB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAChE;;OAEG;IACW,wCAAiB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/D;;OAEG;IACW,wCAAiB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACtE;;OAEG;IACW,oCAAa,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9D;;OAEG;IACW,mCAAY,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D;;OAEG;IACW,qCAAc,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/D,6BAAC;CAAA,AAjDD,CAA4C,WAAW,GAiDtD;SAjDY,sBAAsB","sourcesContent":["import { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/convolution.fragment\";\r\n\r\n/**\r\n * The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the\r\n * input texture to perform effects such as edge detection or sharpening\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\r\nexport class ConvolutionPostProcess extends PostProcess {\r\n    /**\r\n     * Creates a new instance ConvolutionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param kernel Array of 9 values corrisponding to the 3x3 kernel to be applied\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     */\r\n    constructor(name: string,\r\n        /** Array of 9 values corrisponding to the 3x3 kernel to be applied */\r\n        public kernel: number[],\r\n        options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT) {\r\n        super(name, \"convolution\", [\"kernel\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType);\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setFloat2(\"screenSize\", this.width, this.height);\r\n            effect.setArray(\"kernel\", this.kernel);\r\n        };\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect0Kernel = [1, 0, -1, 0, 0, 0, -1, 0, 1];\r\n    /**\r\n     * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect1Kernel = [0, 1, 0, 1, -4, 1, 0, 1, 0];\r\n    /**\r\n     * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect2Kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\r\n    /**\r\n     * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static SharpenKernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\r\n    /**\r\n     * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EmbossKernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\r\n    /**\r\n     * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static GaussianKernel = [0, 1, 0, 1, 1, 1, 0, 1, 0];\r\n}\r\n"]}