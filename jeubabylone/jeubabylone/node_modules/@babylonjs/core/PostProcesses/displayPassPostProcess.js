import * as tslib_1 from "tslib";
import { PostProcess } from "./postProcess";
import "../Shaders/displayPass.fragment";
/**
 * DisplayPassPostProcess which produces an output the same as it's input
 */
var DisplayPassPostProcess = /** @class */ (function (_super) {
    tslib_1.__extends(DisplayPassPostProcess, _super);
    /**
     * Creates the DisplayPassPostProcess
     * @param name The name of the effect.
     * @param options The required width/height ratio to downsize to before computing the render pass.
     * @param camera The camera to apply the render pass to.
     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)
     * @param engine The engine which the post process will be applied. (default: current engine)
     * @param reusable If the post process can be reused on the same frame. (default: false)
     */
    function DisplayPassPostProcess(name, options, camera, samplingMode, engine, reusable) {
        return _super.call(this, name, "displayPass", ["passSampler"], ["passSampler"], options, camera, samplingMode, engine, reusable) || this;
    }
    return DisplayPassPostProcess;
}(PostProcess));
export { DisplayPassPostProcess };
//# sourceMappingURL=displayPassPostProcess.js.map