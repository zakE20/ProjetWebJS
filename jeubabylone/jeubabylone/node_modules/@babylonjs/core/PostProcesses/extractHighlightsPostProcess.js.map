{"version":3,"file":"extractHighlightsPostProcess.js","sourceRoot":"","sources":["../../../sourceES6/core/PostProcesses/extractHighlightsPostProcess.ts"],"names":[],"mappings":";AAGA,OAAO,EAAE,WAAW,EAAsB,MAAM,eAAe,CAAC;AAEhE,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAEjD,OAAO,uCAAuC,CAAC;AAE/C;;GAEG;AACH;IAAkD,wDAAW;IAazD,sCAAY,IAAY,EAAE,OAAoC,EAAE,MAAwB,EAAE,YAAqB,EAAE,MAAe,EAAE,QAAkB,EAAE,WAAwD,EAAE,gBAAwB;QAAlF,4BAAA,EAAA,cAAsB,SAAS,CAAC,wBAAwB;QAAE,iCAAA,EAAA,wBAAwB;QAAxO,YACI,kBAAM,IAAI,EAAE,mBAAmB,EAAE,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,gBAAgB,CAAC,SAQ3K;QArBD;;WAEG;QACI,eAAS,GAAG,GAAG,CAAC;QAEvB,cAAc;QACP,eAAS,GAAG,CAAC,CAAC;QACrB;;;WAGG;QACI,uBAAiB,GAA0B,IAAI,CAAC;QAGnD,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAC,MAAc;YACtC,IAAI,KAAI,CAAC,iBAAiB,EAAE;gBACxB,MAAM,CAAC,yBAAyB,CAAC,gBAAgB,EAAE,KAAI,CAAC,iBAAiB,CAAC,CAAC;aAC9E;YACD,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,KAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC;YACrE,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAI,CAAC,SAAS,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;;IACP,CAAC;IACL,mCAAC;AAAD,CAAC,AAvBD,CAAkD,WAAW,GAuB5D","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { ToGammaSpace } from \"../Maths/math\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/extractHighlights.fragment\";\r\n\r\n/**\r\n * The extract highlights post process sets all pixels to black except pixels above the specified luminance threshold. Used as the first step for a bloom effect.\r\n */\r\nexport class ExtractHighlightsPostProcess extends PostProcess {\r\n    /**\r\n     * The luminance threshold, pixels below this value will be set to black.\r\n     */\r\n    public threshold = 0.9;\r\n\r\n    /** @hidden */\r\n    public _exposure = 1;\r\n    /**\r\n     * Post process which has the input texture to be used when performing highlight extraction\r\n     * @hidden\r\n     */\r\n    public _inputPostProcess: Nullable<PostProcess> = null;\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT, blockCompilation = false) {\r\n        super(name, \"extractHighlights\", [\"threshold\", \"exposure\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (this._inputPostProcess) {\r\n                effect.setTextureFromPostProcess(\"textureSampler\", this._inputPostProcess);\r\n            }\r\n            effect.setFloat('threshold', Math.pow(this.threshold, ToGammaSpace));\r\n            effect.setFloat('exposure', this._exposure);\r\n        });\r\n    }\r\n}\r\n"]}