import * as tslib_1 from "tslib";
import { PostProcess } from "./postProcess";
import "../Shaders/filter.fragment";
/**
 * Applies a kernel filter to the image
 */
var FilterPostProcess = /** @class */ (function (_super) {
    tslib_1.__extends(FilterPostProcess, _super);
    /**
     *
     * @param name The name of the effect.
     * @param kernelMatrix The matrix to be applied to the image
     * @param options The required width/height ratio to downsize to before computing the render pass.
     * @param camera The camera to apply the render pass to.
     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)
     * @param engine The engine which the post process will be applied. (default: current engine)
     * @param reusable If the post process can be reused on the same frame. (default: false)
     */
    function FilterPostProcess(name, 
    /** The matrix to be applied to the image */
    kernelMatrix, options, camera, samplingMode, engine, reusable) {
        var _this = _super.call(this, name, "filter", ["kernelMatrix"], null, options, camera, samplingMode, engine, reusable) || this;
        _this.kernelMatrix = kernelMatrix;
        _this.onApply = function (effect) {
            effect.setMatrix("kernelMatrix", _this.kernelMatrix);
        };
        return _this;
    }
    return FilterPostProcess;
}(PostProcess));
export { FilterPostProcess };
//# sourceMappingURL=filterPostProcess.js.map