{"version":3,"file":"filterPostProcess.js","sourceRoot":"","sources":["../../../sourceES6/core/PostProcesses/filterPostProcess.ts"],"names":[],"mappings":";AAIA,OAAO,EAAE,WAAW,EAAsB,MAAM,eAAe,CAAC;AAGhE,OAAO,4BAA4B,CAAC;AAEpC;;GAEG;AACH;IAAuC,6CAAW;IAC9C;;;;;;;;;OASG;IACH,2BAAY,IAAY;IACpB,4CAA4C;IACrC,YAAoB,EAC3B,OAAoC,EACpC,MAAwB,EACxB,YAAqB,EACrB,MAAe,EACf,QAAkB;QAPtB,YASI,kBAAM,IAAI,EAAE,QAAQ,EAAE,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,CAAC,SAKjG;QAZU,kBAAY,GAAZ,YAAY,CAAQ;QAS3B,KAAI,CAAC,OAAO,GAAG,UAAC,MAAc;YAC1B,MAAM,CAAC,SAAS,CAAC,cAAc,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC;QACxD,CAAC,CAAC;;IACN,CAAC;IACL,wBAAC;AAAD,CAAC,AA1BD,CAAuC,WAAW,GA0BjD","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Matrix } from \"../Maths/math\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/filter.fragment\";\r\n\r\n/**\r\n * Applies a kernel filter to the image\r\n */\r\nexport class FilterPostProcess extends PostProcess {\r\n    /**\r\n     *\r\n     * @param name The name of the effect.\r\n     * @param kernelMatrix The matrix to be applied to the image\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string,\r\n        /** The matrix to be applied to the image */\r\n        public kernelMatrix: Matrix,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean\r\n    ) {\r\n        super(name, \"filter\", [\"kernelMatrix\"], null, options, camera, samplingMode, engine, reusable);\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setMatrix(\"kernelMatrix\", this.kernelMatrix);\r\n        };\r\n    }\r\n}\r\n"]}