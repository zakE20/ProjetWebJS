{"version":3,"file":"grainPostProcess.js","sourceRoot":"","sources":["../../../sourceES6/core/PostProcesses/grainPostProcess.ts"],"names":[],"mappings":";AAGA,OAAO,EAAE,WAAW,EAAsB,MAAM,eAAe,CAAC;AAEhE,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAEjD,OAAO,2BAA2B,CAAC;AAEnC;;GAEG;AACH;IAAsC,4CAAW;IAU7C;;;;;;;;;;OAUG;IACH,0BAAY,IAAY,EAAE,OAAoC,EAAE,MAAwB,EAAE,YAAqB,EAAE,MAAe,EAAE,QAAkB,EAAE,WAAwD,EAAE,gBAAwB;QAAlF,4BAAA,EAAA,cAAsB,SAAS,CAAC,wBAAwB;QAAE,iCAAA,EAAA,wBAAwB;QAAxO,YACI,kBAAM,IAAI,EAAE,OAAO,EAAE,CAAC,WAAW,EAAE,cAAc,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,gBAAgB,CAAC,SAKjK;QA1BD;;WAEG;QACI,eAAS,GAAW,EAAE,CAAC;QAC9B;;WAEG;QACI,cAAQ,GAAY,KAAK,CAAC;QAe7B,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAC,MAAc;YACtC,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAI,CAAC,SAAS,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;;IACP,CAAC;IACL,uBAAC;AAAD,CAAC,AA5BD,CAAsC,WAAW,GA4BhD","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/grain.fragment\";\r\n\r\n/**\r\n * The GrainPostProcess adds noise to the image at mid luminance levels\r\n */\r\nexport class GrainPostProcess extends PostProcess {\r\n    /**\r\n     * The intensity of the grain added (default: 30)\r\n     */\r\n    public intensity: number = 30;\r\n    /**\r\n     * If the grain should be randomized on every frame\r\n     */\r\n    public animated: boolean = false;\r\n\r\n    /**\r\n     * Creates a new instance of @see GrainPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT, blockCompilation = false) {\r\n        super(name, \"grain\", [\"intensity\", \"animatedSeed\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat('intensity', this.intensity);\r\n            effect.setFloat('animatedSeed', this.animated ? Math.random() + 1 : 1);\r\n        });\r\n    }\r\n}\r\n"]}