import { Nullable } from "../types";
import { Color4 } from "../Maths/math";
import { Camera } from "../Cameras/camera";
import { BaseTexture } from "../Materials/Textures/baseTexture";
import { ColorCurves } from "../Materials/colorCurves";
import { ImageProcessingConfiguration } from "../Materials/imageProcessingConfiguration";
import { PostProcess, PostProcessOptions } from "./postProcess";
import { Engine } from "../Engines/engine";
import "../Shaders/imageProcessing.fragment";
import "../Shaders/postprocess.vertex";
/**
 * ImageProcessingPostProcess
 * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#imageprocessing
 */
export declare class ImageProcessingPostProcess extends PostProcess {
    /**
     * Default configuration related to image processing available in the PBR Material.
     */
    protected _imageProcessingConfiguration: ImageProcessingConfiguration;
    /**
     * Gets the image processing configuration used either in this material.
     */
    /**
    * Sets the Default image processing configuration used either in the this material.
    *
    * If sets to null, the scene one is in use.
    */
    imageProcessingConfiguration: ImageProcessingConfiguration;
    /**
     * Keep track of the image processing observer to allow dispose and replace.
     */
    private _imageProcessingObserver;
    /**
     * Attaches a new image processing configuration to the PBR Material.
     * @param configuration
     */
    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>, doNotBuild?: boolean): void;
    /**
     * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .
     */
    /**
    * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .
    */
    colorCurves: Nullable<ColorCurves>;
    /**
     * Gets wether the color curves effect is enabled.
     */
    /**
    * Sets wether the color curves effect is enabled.
    */
    colorCurvesEnabled: boolean;
    /**
     * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.
     */
    /**
    * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.
    */
    colorGradingTexture: Nullable<BaseTexture>;
    /**
     * Gets wether the color grading effect is enabled.
     */
    /**
    * Gets wether the color grading effect is enabled.
    */
    colorGradingEnabled: boolean;
    /**
     * Gets exposure used in the effect.
     */
    /**
    * Sets exposure used in the effect.
    */
    exposure: number;
    /**
     * Gets wether tonemapping is enabled or not.
     */
    /**
    * Sets wether tonemapping is enabled or not
    */
    toneMappingEnabled: boolean;
    /**
     * Gets the type of tone mapping effect.
     */
    /**
    * Sets the type of tone mapping effect.
    */
    toneMappingType: number;
    /**
     * Gets contrast used in the effect.
     */
    /**
    * Sets contrast used in the effect.
    */
    contrast: number;
    /**
     * Gets Vignette stretch size.
     */
    /**
    * Sets Vignette stretch size.
    */
    vignetteStretch: number;
    /**
     * Gets Vignette centre X Offset.
     */
    /**
    * Sets Vignette centre X Offset.
    */
    vignetteCentreX: number;
    /**
     * Gets Vignette centre Y Offset.
     */
    /**
    * Sets Vignette centre Y Offset.
    */
    vignetteCentreY: number;
    /**
     * Gets Vignette weight or intensity of the vignette effect.
     */
    /**
    * Sets Vignette weight or intensity of the vignette effect.
    */
    vignetteWeight: number;
    /**
     * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)
     * if vignetteEnabled is set to true.
     */
    /**
    * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)
    * if vignetteEnabled is set to true.
    */
    vignetteColor: Color4;
    /**
     * Gets Camera field of view used by the Vignette effect.
     */
    /**
    * Sets Camera field of view used by the Vignette effect.
    */
    vignetteCameraFov: number;
    /**
     * Gets the vignette blend mode allowing different kind of effect.
     */
    /**
    * Sets the vignette blend mode allowing different kind of effect.
    */
    vignetteBlendMode: number;
    /**
     * Gets wether the vignette effect is enabled.
     */
    /**
    * Sets wether the vignette effect is enabled.
    */
    vignetteEnabled: boolean;
    private _fromLinearSpace;
    /**
     * Gets wether the input of the processing is in Gamma or Linear Space.
     */
    /**
    * Sets wether the input of the processing is in Gamma or Linear Space.
    */
    fromLinearSpace: boolean;
    /**
     * Defines cache preventing GC.
     */
    private _defines;
    constructor(name: string, options: number | PostProcessOptions, camera?: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType?: number, imageProcessingConfiguration?: ImageProcessingConfiguration);
    /**
     *  "ImageProcessingPostProcess"
     * @returns "ImageProcessingPostProcess"
     */
    getClassName(): string;
    protected _updateParameters(): void;
    dispose(camera?: Camera): void;
}
