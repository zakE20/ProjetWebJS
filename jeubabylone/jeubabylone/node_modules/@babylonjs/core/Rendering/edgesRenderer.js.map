{"version":3,"file":"edgesRenderer.js","sourceRoot":"","sources":["../../../sourceES6/core/Rendering/edgesRenderer.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AACtD,OAAO,EAAE,SAAS,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AACpE,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AAI7C,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAC7D,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAGjD,OAAO,0BAA0B,CAAC;AAClC,OAAO,wBAAwB,CAAC;AAWhC,YAAY,CAAC,SAAS,CAAC,qBAAqB,GAAG;IAC3C,IAAI,IAAI,CAAC,cAAc,EAAE;QACrB,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QAC9B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;KAC9B;IACD,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AAEF,YAAY,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAS,OAAc,EAAE,6BAAqC;IAArD,wBAAA,EAAA,cAAc;IAAE,8CAAA,EAAA,qCAAqC;IACxG,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC7B,IAAI,CAAC,cAAc,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,6BAA6B,CAAC,CAAC;IACtF,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,SAAS,EAAE,eAAe,EAAE;IAC3D,GAAG,EAAE;QACD,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IACD,UAAU,EAAE,IAAI;IAChB,YAAY,EAAE,IAAI;CACrB,CAAC,CAAC;AAeH,SAAS,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAS,OAAc,EAAE,6BAAqC;IAArD,wBAAA,EAAA,cAAc;IAAE,8CAAA,EAAA,qCAAqC;IACrG,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC7B,IAAI,CAAC,cAAc,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,OAAO,EAAE,6BAA6B,CAAC,CAAC;IAC1F,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AAgBF,kBAAkB,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAS,OAAc,EAAE,6BAAqC;IAArD,wBAAA,EAAA,cAAc;IAAE,8CAAA,EAAA,qCAAqC;IAC9G,SAAS,CAAC,SAAS,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAChE,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AAEF;;GAEG;AACH;IAAA;QACW,UAAK,GAAG,IAAI,KAAK,EAAU,CAAC;QAI5B,wBAAmB,GAAG,CAAC,CAAC;IACnC,CAAC;IAAD,sBAAC;AAAD,CAAC,AAND,IAMC;AAuBD;;GAEG;AACH;IA8BI;;;;;;;OAOG;IACH,uBAAY,MAAoB,EAAE,OAAc,EAAE,6BAAqC,EAAE,kBAAyB;QAAlH,iBAkBC;QAlBiC,wBAAA,EAAA,cAAc;QAAE,8CAAA,EAAA,qCAAqC;QAAE,mCAAA,EAAA,yBAAyB;QApClH;;WAEG;QACI,oCAA+B,GAAG,MAAM,CAAC;QAEhD;;WAEG;QACI,mCAA8B,GAAG,IAAI,CAAC;QAGnC,oBAAe,GAAG,IAAI,KAAK,EAAU,CAAC;QACtC,kBAAa,GAAG,IAAI,KAAK,EAAU,CAAC;QACpC,kBAAa,GAAG,IAAI,KAAK,EAAU,CAAC;QAMpC,aAAQ,GAA8C,EAAE,CAAC;QACzD,mCAA8B,GAAG,KAAK,CAAC;QAKjD,uEAAuE;QAChE,cAAS,GAAG,IAAI,CAAC;QAWpB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,8BAA8B,GAAG,6BAA6B,CAAC;QAEpE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,kBAAkB,EAAE;YACpB,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC9B;QAED,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC;YAC7D,KAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC;YAC7D,KAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACP,CAAC;IAES,0CAAkB,GAA5B;QACI,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,OAAO;SACV;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,cAAc,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,MAAM,EAC/E;YACI,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;YAClC,QAAQ,EAAE,CAAC,qBAAqB,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa,CAAC;SACrE,CAAC,CAAC;QAEP,IAAI,CAAC,WAAW,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC1C,IAAI,CAAC,WAAW,CAAC,eAAe,GAAG,KAAK,CAAC;IAC7C,CAAC;IAED,cAAc;IACP,gCAAQ,GAAf;QACI,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACtD,IAAI,MAAM,EAAE;YACR,MAAM,CAAC,QAAQ,EAAE,CAAC;SACrB;QAED,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,MAAM,EAAE;YACR,MAAM,CAAC,QAAQ,EAAE,CAAC;SACrB;QAED,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACpC,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAC/B,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5D,CAAC;IAED;;OAEG;IACI,+BAAO,GAAd;QACI,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACnE,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAEnE,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACtD,IAAI,MAAM,EAAE;YACR,MAAM,CAAC,OAAO,EAAE,CAAC;YACjB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;SACnD;QACD,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,MAAM,EAAE;YACR,MAAM,CAAC,OAAO,EAAE,CAAC;YACjB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;SACjD;QAED,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7D,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IAES,kDAA0B,GAApC,UAAqC,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;QAC3F,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;YAClD,OAAO,CAAC,CAAC;SACZ;QAED,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;YAClD,OAAO,CAAC,CAAC;SACZ;QAED,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;YAClD,OAAO,CAAC,CAAC;SACZ;QAED,OAAO,CAAC,CAAC,CAAC;IACd,CAAC;IAES,8DAAsC,GAAhD,UAAiD,EAAW,EAAE,EAAW,EAAE,EAAW,EAAE,EAAW,EAAE,EAAW;QAC5G,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,EAAE;YAC9G,OAAO,CAAC,CAAC;SACZ;QAED,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,EAAE;YAC9G,OAAO,CAAC,CAAC;SACZ;QAED,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,EAAE;YAC9G,OAAO,CAAC,CAAC;SACZ;QAED,OAAO,CAAC,CAAC,CAAC;IACd,CAAC;IAED;;;;;;;;OAQG;IACO,kCAAU,GAApB,UAAqB,SAAiB,EAAE,IAAY,EAAE,WAA2B,EAAE,EAAW,EAAE,EAAW;QACvG,IAAI,gBAAgB,CAAC;QAErB,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,gBAAgB,GAAG,IAAI,CAAC;SAC3B;aAAM;YACH,IAAI,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YAExE,gBAAgB,GAAG,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC;SACjD;QAED,IAAI,gBAAgB,EAAE;YAClB,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC5D;IACL,CAAC;IAED;;;OAGG;IACO,kCAAU,GAApB,UAAqB,EAAW,EAAE,EAAW,EAAE,MAAc;QACzD,YAAY;QACZ,IAAI,CAAC,eAAe,CAAC,IAAI,CACrB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAChB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAChB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAChB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CACnB,CAAC;QAEF,UAAU;QACV,IAAI,CAAC,aAAa,CAAC,IAAI,CACnB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EACpB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EACnB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EACpB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CACtB,CAAC;QAEF,UAAU;QACV,IAAI,CAAC,aAAa,CAAC,IAAI,CACnB,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAC9B,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,CACjC,CAAC;IACN,CAAC;IAED;;;OAGG;IACH,2CAAmB,GAAnB;QACI,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACxE,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAExC,IAAI,CAAC,OAAO,IAAI,CAAC,SAAS,EAAE;YACxB,OAAO;SACV;QAED,+BAA+B;QAC/B,IAAI,WAAW,GAAG,IAAI,KAAK,EAAmB,CAAC;QAC/C,IAAI,WAAW,GAAG,IAAI,KAAK,EAAW,CAAC;QACvC,IAAI,KAAa,CAAC;QAClB,IAAI,eAAgC,CAAC;QAErC,gBAAgB;QAChB,KAAK,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,EAAE;YAChD,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;YACxC,IAAI,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;YAC7B,IAAI,OAAO,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACjC,IAAI,OAAO,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAEjC,eAAe,CAAC,EAAE,GAAG,IAAI,OAAO,CAAC,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACjH,eAAe,CAAC,EAAE,GAAG,IAAI,OAAO,CAAC,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACjH,eAAe,CAAC,EAAE,GAAG,IAAI,OAAO,CAAC,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACjH,IAAI,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;YAEjI,UAAU,CAAC,SAAS,EAAE,CAAC;YAEvB,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7B,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SACrC;QAED,OAAO;QACP,KAAK,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACjD,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;YAErC,KAAK,IAAI,UAAU,GAAG,KAAK,GAAG,CAAC,EAAE,UAAU,GAAG,WAAW,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;gBAC5E,IAAI,oBAAoB,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;gBAEnD,IAAI,eAAe,CAAC,mBAAmB,KAAK,CAAC,EAAE,EAAE,OAAO;oBACpD,MAAM;iBACT;gBAED,IAAI,oBAAoB,CAAC,mBAAmB,KAAK,CAAC,EAAE,EAAE,OAAO;oBACzD,SAAS;iBACZ;gBAED,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;gBACtC,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC1C,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBAE1C,KAAK,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,SAAS,EAAE,EAAE;oBAChD,IAAI,cAAc,GAAW,CAAC,CAAC;oBAE/B,IAAI,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;wBAChD,SAAS;qBACZ;oBAED,QAAQ,SAAS,EAAE;wBACf,KAAK,CAAC;4BACF,IAAI,IAAI,CAAC,8BAA8B,EAAE;gCACrC,cAAc,GAAG,IAAI,CAAC,sCAAsC,CAAC,eAAe,CAAC,EAAE,EAAE,eAAe,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,CAAC,CAAC;6BACnL;iCAAM;gCACH,cAAc,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;6BAC3H;4BACD,MAAM;wBACV,KAAK,CAAC;4BACF,IAAI,IAAI,CAAC,8BAA8B,EAAE;gCACrC,cAAc,GAAG,IAAI,CAAC,sCAAsC,CAAC,eAAe,CAAC,EAAE,EAAE,eAAe,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,CAAC,CAAC;6BACnL;iCAAM;gCACH,cAAc,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;6BAC/H;4BACD,MAAM;wBACV,KAAK,CAAC;4BACF,IAAI,IAAI,CAAC,8BAA8B,EAAE;gCACrC,cAAc,GAAG,IAAI,CAAC,sCAAsC,CAAC,eAAe,CAAC,EAAE,EAAE,eAAe,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,CAAC,CAAC;6BACnL;iCAAM;gCACH,cAAc,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;6BAC3H;4BACD,MAAM;qBACb;oBAED,IAAI,cAAc,KAAK,CAAC,CAAC,EAAE;wBACvB,SAAS;qBACZ;oBAED,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;oBAC9C,oBAAoB,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC;oBAEnD,eAAe,CAAC,mBAAmB,EAAE,CAAC;oBACtC,oBAAoB,CAAC,mBAAmB,EAAE,CAAC;oBAE3C,IAAI,eAAe,CAAC,mBAAmB,KAAK,CAAC,EAAE;wBAC3C,MAAM;qBACT;iBACJ;aACJ;SACJ;QAED,eAAe;QACf,KAAK,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACjD,6HAA6H;YAC7H,IAAI,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;YAEjC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;YAC9E,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;YAC9E,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;SACjF;QAED,2BAA2B;QAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;QAEjD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,GAAG,IAAI,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,EAAE,YAAY,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAC5H,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,IAAI,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,YAAY,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QAEhI,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAExD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;IACnD,CAAC;IAED;;;OAGG;IACI,+BAAO,GAAd;QACI,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IACtC,CAAC;IAED;;OAEG;IACI,8BAAM,GAAb;QACI,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QAEpC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;YACxC,OAAO;SACV;QAED,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAC/B,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QAE5B,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,EAAE;YACjC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;SAChD;aAAM;YACH,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;SAChD;QAED,OAAO;QACP,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAU,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAElF,KAAK,CAAC,mBAAmB,EAAE,CAAC;QAC5B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAE7D,IAAI,KAAK,CAAC,YAAY,CAAC,IAAI,KAAK,MAAM,CAAC,mBAAmB,EAAE;YACxD,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,+BAA+B,CAAC,CAAC;SACtG;aAAM;YACH,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,8BAA8B,CAAC,CAAC;SACrG;QAED,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;QACpF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC;QAErD,aAAa;QACb,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC1E,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;IAC9B,CAAC;IACL,oBAAC;AAAD,CAAC,AA/WD,IA+WC;;AAED;;GAEG;AACH;IAAuC,6CAAa;IAEhD;;;;;OAKG;IACH,2BAAY,MAAoB,EAAE,OAAc,EAAE,6BAAqC;QAArD,wBAAA,EAAA,cAAc;QAAE,8CAAA,EAAA,qCAAqC;QAAvF,YACI,kBAAM,MAAM,EAAE,OAAO,EAAE,6BAA6B,EAAE,KAAK,CAAC,SAE/D;QADG,KAAI,CAAC,mBAAmB,EAAE,CAAC;;IAC/B,CAAC;IAED;;OAEG;IACH,+CAAmB,GAAnB;QACI,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACxE,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAExC,IAAI,CAAC,OAAO,IAAI,CAAC,SAAS,EAAE;YACxB,OAAO;SACV;QAED,IAAM,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAM,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,MAAM,IAAI,CAAC,EAAE;YACtD,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACtD,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC1D,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;SACnC;QAED,2BAA2B;QAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;QAEjD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,GAAG,IAAI,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,EAAE,YAAY,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAC5H,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,IAAI,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,YAAY,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QAEhI,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAExD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;IACnD,CAAC;IACL,wBAAC;AAAD,CAAC,AA3CD,CAAuC,aAAa,GA2CnD","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { VertexBuffer } from \"../Meshes/buffer\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { LinesMesh, InstancedLinesMesh } from \"../Meshes/linesMesh\";\r\nimport { Vector3, Tmp } from \"../Maths/math\";\r\nimport { IDisposable } from \"../scene\";\r\nimport { Observer } from \"../Misc/observable\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { ShaderMaterial } from \"../Materials/shaderMaterial\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Node } from \"../node\";\r\n\r\nimport \"../Shaders/line.fragment\";\r\nimport \"../Shaders/line.vertex\";\r\nimport { DataBuffer } from '../Meshes/dataBuffer';\r\n\r\ndeclare module \"../Meshes/abstractMesh\" {\r\n    export interface AbstractMesh {\r\n        /**\r\n         * Gets the edgesRenderer associated with the mesh\r\n         */\r\n        edgesRenderer: Nullable<EdgesRenderer>;\r\n    }\r\n}\r\nAbstractMesh.prototype.disableEdgesRendering = function(): AbstractMesh {\r\n    if (this._edgesRenderer) {\r\n        this._edgesRenderer.dispose();\r\n        this._edgesRenderer = null;\r\n    }\r\n    return this;\r\n};\r\n\r\nAbstractMesh.prototype.enableEdgesRendering = function(epsilon = 0.95, checkVerticesInsteadOfIndices = false): AbstractMesh {\r\n    this.disableEdgesRendering();\r\n    this._edgesRenderer = new EdgesRenderer(this, epsilon, checkVerticesInsteadOfIndices);\r\n    return this;\r\n};\r\n\r\nObject.defineProperty(AbstractMesh.prototype, \"edgesRenderer\", {\r\n    get: function(this: AbstractMesh) {\r\n        return this._edgesRenderer;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\ndeclare module \"../Meshes/linesMesh\" {\r\n    export interface LinesMesh {\r\n        /**\r\n         * Enables the edge rendering mode on the mesh.\r\n         * This mode makes the mesh edges visible\r\n         * @param epsilon defines the maximal distance between two angles to detect a face\r\n         * @param checkVerticesInsteadOfIndices indicates that we should check vertex list directly instead of faces\r\n         * @returns the currentAbstractMesh\r\n         * @see https://www.babylonjs-playground.com/#19O9TU#0\r\n         */\r\n        enableEdgesRendering(epsilon?: number, checkVerticesInsteadOfIndices?: boolean): AbstractMesh;\r\n    }\r\n}\r\nLinesMesh.prototype.enableEdgesRendering = function(epsilon = 0.95, checkVerticesInsteadOfIndices = false): AbstractMesh {\r\n    this.disableEdgesRendering();\r\n    this._edgesRenderer = new LineEdgesRenderer(this, epsilon, checkVerticesInsteadOfIndices);\r\n    return this;\r\n};\r\n\r\ndeclare module \"../Meshes/linesMesh\" {\r\n    export interface InstancedLinesMesh {\r\n        /**\r\n         * Enables the edge rendering mode on the mesh.\r\n         * This mode makes the mesh edges visible\r\n         * @param epsilon defines the maximal distance between two angles to detect a face\r\n         * @param checkVerticesInsteadOfIndices indicates that we should check vertex list directly instead of faces\r\n         * @returns the current InstancedLinesMesh\r\n         * @see https://www.babylonjs-playground.com/#19O9TU#0\r\n         */\r\n        enableEdgesRendering(epsilon?: number, checkVerticesInsteadOfIndices?: boolean): InstancedLinesMesh;\r\n    }\r\n}\r\n\r\nInstancedLinesMesh.prototype.enableEdgesRendering = function(epsilon = 0.95, checkVerticesInsteadOfIndices = false): InstancedLinesMesh {\r\n    LinesMesh.prototype.enableEdgesRendering.apply(this, arguments);\r\n    return this;\r\n};\r\n\r\n/**\r\n * FaceAdjacencies Helper class to generate edges\r\n */\r\nclass FaceAdjacencies {\r\n    public edges = new Array<number>();\r\n    public p0: Vector3;\r\n    public p1: Vector3;\r\n    public p2: Vector3;\r\n    public edgesConnectedCount = 0;\r\n}\r\n\r\n/**\r\n * Defines the minimum contract an Edges renderer should follow.\r\n */\r\nexport interface IEdgesRenderer extends IDisposable {\r\n    /**\r\n     * Gets or sets a boolean indicating if the edgesRenderer is active\r\n     */\r\n    isEnabled: boolean;\r\n\r\n    /**\r\n     * Renders the edges of the attached mesh,\r\n     */\r\n    render(): void;\r\n\r\n    /**\r\n     * Checks wether or not the edges renderer is ready to render.\r\n     * @return true if ready, otherwise false.\r\n     */\r\n    isReady(): boolean;\r\n}\r\n\r\n/**\r\n * This class is used to generate edges of the mesh that could then easily be rendered in a scene.\r\n */\r\nexport class EdgesRenderer implements IEdgesRenderer {\r\n\r\n    /**\r\n     * Define the size of the edges with an orthographic camera\r\n     */\r\n    public edgesWidthScalerForOrthographic = 1000.0;\r\n\r\n    /**\r\n     * Define the size of the edges with a perspective camera\r\n     */\r\n    public edgesWidthScalerForPerspective = 50.0;\r\n\r\n    protected _source: AbstractMesh;\r\n    protected _linesPositions = new Array<number>();\r\n    protected _linesNormals = new Array<number>();\r\n    protected _linesIndices = new Array<number>();\r\n    protected _epsilon: number;\r\n    protected _indicesCount: number;\r\n\r\n    protected _lineShader: ShaderMaterial;\r\n    protected _ib: DataBuffer;\r\n    protected _buffers: { [key: string]: Nullable<VertexBuffer> } = {};\r\n    protected _checkVerticesInsteadOfIndices = false;\r\n\r\n    private _meshRebuildObserver: Nullable<Observer<AbstractMesh>>;\r\n    private _meshDisposeObserver: Nullable<Observer<Node>>;\r\n\r\n    /** Gets or sets a boolean indicating if the edgesRenderer is active */\r\n    public isEnabled = true;\r\n\r\n    /**\r\n     * Creates an instance of the EdgesRenderer. It is primarily use to display edges of a mesh.\r\n     * Beware when you use this class with complex objects as the adjacencies computation can be really long\r\n     * @param  source Mesh used to create edges\r\n     * @param  epsilon sum of angles in adjacency to check for edge\r\n     * @param  checkVerticesInsteadOfIndices bases the edges detection on vertices vs indices\r\n     * @param  generateEdgesLines - should generate Lines or only prepare resources.\r\n     */\r\n    constructor(source: AbstractMesh, epsilon = 0.95, checkVerticesInsteadOfIndices = false, generateEdgesLines = true) {\r\n        this._source = source;\r\n        this._checkVerticesInsteadOfIndices = checkVerticesInsteadOfIndices;\r\n\r\n        this._epsilon = epsilon;\r\n\r\n        this._prepareRessources();\r\n        if (generateEdgesLines) {\r\n            this._generateEdgesLines();\r\n        }\r\n\r\n        this._meshRebuildObserver = this._source.onRebuildObservable.add(() => {\r\n            this._rebuild();\r\n        });\r\n\r\n        this._meshDisposeObserver = this._source.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n    }\r\n\r\n    protected _prepareRessources(): void {\r\n        if (this._lineShader) {\r\n            return;\r\n        }\r\n\r\n        this._lineShader = new ShaderMaterial(\"lineShader\", this._source.getScene(), \"line\",\r\n            {\r\n                attributes: [\"position\", \"normal\"],\r\n                uniforms: [\"worldViewProjection\", \"color\", \"width\", \"aspectRatio\"]\r\n            });\r\n\r\n        this._lineShader.disableDepthWrite = true;\r\n        this._lineShader.backFaceCulling = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        var buffer = this._buffers[VertexBuffer.PositionKind];\r\n        if (buffer) {\r\n            buffer._rebuild();\r\n        }\r\n\r\n        buffer = this._buffers[VertexBuffer.NormalKind];\r\n        if (buffer) {\r\n            buffer._rebuild();\r\n        }\r\n\r\n        var scene = this._source.getScene();\r\n        var engine = scene.getEngine();\r\n        this._ib = engine.createIndexBuffer(this._linesIndices);\r\n    }\r\n\r\n    /**\r\n     * Releases the required resources for the edges renderer\r\n     */\r\n    public dispose(): void {\r\n        this._source.onRebuildObservable.remove(this._meshRebuildObserver);\r\n        this._source.onDisposeObservable.remove(this._meshDisposeObserver);\r\n\r\n        var buffer = this._buffers[VertexBuffer.PositionKind];\r\n        if (buffer) {\r\n            buffer.dispose();\r\n            this._buffers[VertexBuffer.PositionKind] = null;\r\n        }\r\n        buffer = this._buffers[VertexBuffer.NormalKind];\r\n        if (buffer) {\r\n            buffer.dispose();\r\n            this._buffers[VertexBuffer.NormalKind] = null;\r\n        }\r\n\r\n        this._source.getScene().getEngine()._releaseBuffer(this._ib);\r\n        this._lineShader.dispose();\r\n    }\r\n\r\n    protected _processEdgeForAdjacencies(pa: number, pb: number, p0: number, p1: number, p2: number): number {\r\n        if (pa === p0 && pb === p1 || pa === p1 && pb === p0) {\r\n            return 0;\r\n        }\r\n\r\n        if (pa === p1 && pb === p2 || pa === p2 && pb === p1) {\r\n            return 1;\r\n        }\r\n\r\n        if (pa === p2 && pb === p0 || pa === p0 && pb === p2) {\r\n            return 2;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    protected _processEdgeForAdjacenciesWithVertices(pa: Vector3, pb: Vector3, p0: Vector3, p1: Vector3, p2: Vector3): number {\r\n        if (pa.equalsWithEpsilon(p0) && pb.equalsWithEpsilon(p1) || pa.equalsWithEpsilon(p1) && pb.equalsWithEpsilon(p0)) {\r\n            return 0;\r\n        }\r\n\r\n        if (pa.equalsWithEpsilon(p1) && pb.equalsWithEpsilon(p2) || pa.equalsWithEpsilon(p2) && pb.equalsWithEpsilon(p1)) {\r\n            return 1;\r\n        }\r\n\r\n        if (pa.equalsWithEpsilon(p2) && pb.equalsWithEpsilon(p0) || pa.equalsWithEpsilon(p0) && pb.equalsWithEpsilon(p2)) {\r\n            return 2;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if the pair of p0 and p1 is en edge\r\n     * @param faceIndex\r\n     * @param edge\r\n     * @param faceNormals\r\n     * @param  p0\r\n     * @param  p1\r\n     * @private\r\n     */\r\n    protected _checkEdge(faceIndex: number, edge: number, faceNormals: Array<Vector3>, p0: Vector3, p1: Vector3): void {\r\n        var needToCreateLine;\r\n\r\n        if (edge === undefined) {\r\n            needToCreateLine = true;\r\n        } else {\r\n            var dotProduct = Vector3.Dot(faceNormals[faceIndex], faceNormals[edge]);\r\n\r\n            needToCreateLine = dotProduct < this._epsilon;\r\n        }\r\n\r\n        if (needToCreateLine) {\r\n            this.createLine(p0, p1, this._linesPositions.length / 3);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * push line into the position, normal and index buffer\r\n     * @protected\r\n     */\r\n    protected createLine(p0: Vector3, p1: Vector3, offset: number) {\r\n        // Positions\r\n        this._linesPositions.push(\r\n            p0.x, p0.y, p0.z,\r\n            p0.x, p0.y, p0.z,\r\n            p1.x, p1.y, p1.z,\r\n            p1.x, p1.y, p1.z\r\n        );\r\n\r\n        // Normals\r\n        this._linesNormals.push(\r\n            p1.x, p1.y, p1.z, -1,\r\n            p1.x, p1.y, p1.z, 1,\r\n            p0.x, p0.y, p0.z, -1,\r\n            p0.x, p0.y, p0.z, 1\r\n        );\r\n\r\n        // Indices\r\n        this._linesIndices.push(\r\n            offset, offset + 1, offset + 2,\r\n            offset, offset + 2, offset + 3\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Generates lines edges from adjacencjes\r\n     * @private\r\n     */\r\n    _generateEdgesLines(): void {\r\n        var positions = this._source.getVerticesData(VertexBuffer.PositionKind);\r\n        var indices = this._source.getIndices();\r\n\r\n        if (!indices || !positions) {\r\n            return;\r\n        }\r\n\r\n        // First let's find adjacencies\r\n        var adjacencies = new Array<FaceAdjacencies>();\r\n        var faceNormals = new Array<Vector3>();\r\n        var index: number;\r\n        var faceAdjacencies: FaceAdjacencies;\r\n\r\n        // Prepare faces\r\n        for (index = 0; index < indices.length; index += 3) {\r\n            faceAdjacencies = new FaceAdjacencies();\r\n            var p0Index = indices[index];\r\n            var p1Index = indices[index + 1];\r\n            var p2Index = indices[index + 2];\r\n\r\n            faceAdjacencies.p0 = new Vector3(positions[p0Index * 3], positions[p0Index * 3 + 1], positions[p0Index * 3 + 2]);\r\n            faceAdjacencies.p1 = new Vector3(positions[p1Index * 3], positions[p1Index * 3 + 1], positions[p1Index * 3 + 2]);\r\n            faceAdjacencies.p2 = new Vector3(positions[p2Index * 3], positions[p2Index * 3 + 1], positions[p2Index * 3 + 2]);\r\n            var faceNormal = Vector3.Cross(faceAdjacencies.p1.subtract(faceAdjacencies.p0), faceAdjacencies.p2.subtract(faceAdjacencies.p1));\r\n\r\n            faceNormal.normalize();\r\n\r\n            faceNormals.push(faceNormal);\r\n            adjacencies.push(faceAdjacencies);\r\n        }\r\n\r\n        // Scan\r\n        for (index = 0; index < adjacencies.length; index++) {\r\n            faceAdjacencies = adjacencies[index];\r\n\r\n            for (var otherIndex = index + 1; otherIndex < adjacencies.length; otherIndex++) {\r\n                var otherFaceAdjacencies = adjacencies[otherIndex];\r\n\r\n                if (faceAdjacencies.edgesConnectedCount === 3) { // Full\r\n                    break;\r\n                }\r\n\r\n                if (otherFaceAdjacencies.edgesConnectedCount === 3) { // Full\r\n                    continue;\r\n                }\r\n\r\n                var otherP0 = indices[otherIndex * 3];\r\n                var otherP1 = indices[otherIndex * 3 + 1];\r\n                var otherP2 = indices[otherIndex * 3 + 2];\r\n\r\n                for (var edgeIndex = 0; edgeIndex < 3; edgeIndex++) {\r\n                    var otherEdgeIndex: number = 0;\r\n\r\n                    if (faceAdjacencies.edges[edgeIndex] !== undefined) {\r\n                        continue;\r\n                    }\r\n\r\n                    switch (edgeIndex) {\r\n                        case 0:\r\n                            if (this._checkVerticesInsteadOfIndices) {\r\n                                otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p0, faceAdjacencies.p1, otherFaceAdjacencies.p0, otherFaceAdjacencies.p1, otherFaceAdjacencies.p2);\r\n                            } else {\r\n                                otherEdgeIndex = this._processEdgeForAdjacencies(indices[index * 3], indices[index * 3 + 1], otherP0, otherP1, otherP2);\r\n                            }\r\n                            break;\r\n                        case 1:\r\n                            if (this._checkVerticesInsteadOfIndices) {\r\n                                otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p1, faceAdjacencies.p2, otherFaceAdjacencies.p0, otherFaceAdjacencies.p1, otherFaceAdjacencies.p2);\r\n                            } else {\r\n                                otherEdgeIndex = this._processEdgeForAdjacencies(indices[index * 3 + 1], indices[index * 3 + 2], otherP0, otherP1, otherP2);\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            if (this._checkVerticesInsteadOfIndices) {\r\n                                otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p2, faceAdjacencies.p0, otherFaceAdjacencies.p0, otherFaceAdjacencies.p1, otherFaceAdjacencies.p2);\r\n                            } else {\r\n                                otherEdgeIndex = this._processEdgeForAdjacencies(indices[index * 3 + 2], indices[index * 3], otherP0, otherP1, otherP2);\r\n                            }\r\n                            break;\r\n                    }\r\n\r\n                    if (otherEdgeIndex === -1) {\r\n                        continue;\r\n                    }\r\n\r\n                    faceAdjacencies.edges[edgeIndex] = otherIndex;\r\n                    otherFaceAdjacencies.edges[otherEdgeIndex] = index;\r\n\r\n                    faceAdjacencies.edgesConnectedCount++;\r\n                    otherFaceAdjacencies.edgesConnectedCount++;\r\n\r\n                    if (faceAdjacencies.edgesConnectedCount === 3) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Create lines\r\n        for (index = 0; index < adjacencies.length; index++) {\r\n            // We need a line when a face has no adjacency on a specific edge or if all the adjacencies has an angle greater than epsilon\r\n            var current = adjacencies[index];\r\n\r\n            this._checkEdge(index, current.edges[0], faceNormals, current.p0, current.p1);\r\n            this._checkEdge(index, current.edges[1], faceNormals, current.p1, current.p2);\r\n            this._checkEdge(index, current.edges[2], faceNormals, current.p2, current.p0);\r\n        }\r\n\r\n        // Merge into a single mesh\r\n        var engine = this._source.getScene().getEngine();\r\n\r\n        this._buffers[VertexBuffer.PositionKind] = new VertexBuffer(engine, this._linesPositions, VertexBuffer.PositionKind, false);\r\n        this._buffers[VertexBuffer.NormalKind] = new VertexBuffer(engine, this._linesNormals, VertexBuffer.NormalKind, false, false, 4);\r\n\r\n        this._ib = engine.createIndexBuffer(this._linesIndices);\r\n\r\n        this._indicesCount = this._linesIndices.length;\r\n    }\r\n\r\n    /**\r\n     * Checks wether or not the edges renderer is ready to render.\r\n     * @return true if ready, otherwise false.\r\n     */\r\n    public isReady(): boolean {\r\n        return this._lineShader.isReady();\r\n    }\r\n\r\n    /**\r\n     * Renders the edges of the attached mesh,\r\n     */\r\n    public render(): void {\r\n        var scene = this._source.getScene();\r\n\r\n        if (!this.isReady() || !scene.activeCamera) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        this._lineShader._preBind();\r\n\r\n        if (this._source.edgesColor.a !== 1) {\r\n            engine.setAlphaMode(Constants.ALPHA_COMBINE);\r\n        } else {\r\n            engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n        }\r\n\r\n        // VBOs\r\n        engine.bindBuffers(this._buffers, this._ib, <Effect>this._lineShader.getEffect());\r\n\r\n        scene.resetCachedMaterial();\r\n        this._lineShader.setColor4(\"color\", this._source.edgesColor);\r\n\r\n        if (scene.activeCamera.mode === Camera.ORTHOGRAPHIC_CAMERA) {\r\n            this._lineShader.setFloat(\"width\", this._source.edgesWidth / this.edgesWidthScalerForOrthographic);\r\n        } else {\r\n            this._lineShader.setFloat(\"width\", this._source.edgesWidth / this.edgesWidthScalerForPerspective);\r\n        }\r\n\r\n        this._lineShader.setFloat(\"aspectRatio\", engine.getAspectRatio(scene.activeCamera));\r\n        this._lineShader.bind(this._source.getWorldMatrix());\r\n\r\n        // Draw order\r\n        engine.drawElementsType(Material.TriangleFillMode, 0, this._indicesCount);\r\n        this._lineShader.unbind();\r\n    }\r\n}\r\n\r\n/**\r\n * LineEdgesRenderer for LineMeshes to remove unnecessary triangulation\r\n */\r\nexport class LineEdgesRenderer extends EdgesRenderer {\r\n\r\n    /**\r\n     * This constructor turns off auto generating edges line in Edges Renderer to make it here.\r\n     * @param  source LineMesh used to generate edges\r\n     * @param  epsilon not important (specified angle for edge detection)\r\n     * @param  checkVerticesInsteadOfIndices not important for LineMesh\r\n     */\r\n    constructor(source: AbstractMesh, epsilon = 0.95, checkVerticesInsteadOfIndices = false) {\r\n        super(source, epsilon, checkVerticesInsteadOfIndices, false);\r\n        this._generateEdgesLines();\r\n    }\r\n\r\n    /**\r\n     * Generate edges for each line in LinesMesh. Every Line should be rendered as edge.\r\n     */\r\n    _generateEdgesLines(): void {\r\n        var positions = this._source.getVerticesData(VertexBuffer.PositionKind);\r\n        var indices = this._source.getIndices();\r\n\r\n        if (!indices || !positions) {\r\n            return;\r\n        }\r\n\r\n        const p0 = Tmp.Vector3[0];\r\n        const p1 = Tmp.Vector3[1];\r\n        const len = indices.length - 1;\r\n        for (let i = 0, offset = 0; i < len; i += 2, offset += 4) {\r\n            Vector3.FromArrayToRef(positions, 3 * indices[i], p0);\r\n            Vector3.FromArrayToRef(positions, 3 * indices[i + 1], p1);\r\n            this.createLine(p0, p1, offset);\r\n        }\r\n\r\n        // Merge into a single mesh\r\n        var engine = this._source.getScene().getEngine();\r\n\r\n        this._buffers[VertexBuffer.PositionKind] = new VertexBuffer(engine, this._linesPositions, VertexBuffer.PositionKind, false);\r\n        this._buffers[VertexBuffer.NormalKind] = new VertexBuffer(engine, this._linesNormals, VertexBuffer.NormalKind, false, false, 4);\r\n\r\n        this._ib = engine.createIndexBuffer(this._linesIndices);\r\n\r\n        this._indicesCount = this._linesIndices.length;\r\n    }\r\n}\r\n"]}