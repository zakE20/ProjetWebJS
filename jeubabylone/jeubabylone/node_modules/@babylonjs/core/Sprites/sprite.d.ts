import { Vector3, Color4 } from "../Maths/math";
import { Nullable } from "../types";
import { ActionManager } from "../Actions/actionManager";
import { ISpriteManager } from "./spriteManager";
/**
 * Class used to represent a sprite
 * @see http://doc.babylonjs.com/babylon101/sprites
 */
export declare class Sprite {
    /** defines the name */
    name: string;
    /** Gets or sets the current world position */
    position: Vector3;
    /** Gets or sets the main color */
    color: Color4;
    /** Gets or sets the width */
    width: number;
    /** Gets or sets the height */
    height: number;
    /** Gets or sets rotation angle */
    angle: number;
    /** Gets or sets the cell index in the sprite sheet */
    cellIndex: number;
    /** Gets or sets a boolean indicating if UV coordinates should be inverted in U axis */
    invertU: number;
    /** Gets or sets a boolean indicating if UV coordinates should be inverted in B axis */
    invertV: number;
    /** Gets or sets a boolean indicating that this sprite should be disposed after animation ends */
    disposeWhenFinishedAnimating: boolean;
    /** Gets the list of attached animations */
    animations: Animation[];
    /** Gets or sets a boolean indicating if the sprite can be picked */
    isPickable: boolean;
    /**
     * Gets or sets the associated action manager
     */
    actionManager: Nullable<ActionManager>;
    private _animationStarted;
    private _loopAnimation;
    private _fromIndex;
    private _toIndex;
    private _delay;
    private _direction;
    private _manager;
    private _time;
    private _onAnimationEnd;
    /**
     * Gets or sets a boolean indicating if the sprite is visible (renderable). Default is true
     */
    isVisible: boolean;
    /**
     * Gets or sets the sprite size
     */
    size: number;
    /**
     * Creates a new Sprite
     * @param name defines the name
     * @param manager defines the manager
     */
    constructor(
    /** defines the name */
    name: string, manager: ISpriteManager);
    /**
     * Starts an animation
     * @param from defines the initial key
     * @param to defines the end key
     * @param loop defines if the animation must loop
     * @param delay defines the start delay (in ms)
     * @param onAnimationEnd defines a callback to call when animation ends
     */
    playAnimation(from: number, to: number, loop: boolean, delay: number, onAnimationEnd: () => void): void;
    /** Stops current animation (if any) */
    stopAnimation(): void;
    /** @hidden */
    _animate(deltaTime: number): void;
    /** Release associated resources */
    dispose(): void;
}
