{"version":3,"file":"sprite.js","sourceRoot":"","sources":["../../../sourceES6/core/Sprites/sprite.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector3, Color4 } from \"../Maths/math\";\r\nimport { Nullable } from \"../types\";\r\nimport { ActionManager } from \"../Actions/actionManager\";\r\nimport { ISpriteManager } from \"./spriteManager\";\r\n\r\n/**\r\n * Class used to represent a sprite\r\n * @see http://doc.babylonjs.com/babylon101/sprites\r\n */\r\nexport class Sprite {\r\n    /** Gets or sets the current world position */\r\n    public position: Vector3;\r\n    /** Gets or sets the main color */\r\n    public color = new Color4(1.0, 1.0, 1.0, 1.0);\r\n    /** Gets or sets the width */\r\n    public width = 1.0;\r\n    /** Gets or sets the height */\r\n    public height = 1.0;\r\n    /** Gets or sets rotation angle */\r\n    public angle = 0;\r\n    /** Gets or sets the cell index in the sprite sheet */\r\n    public cellIndex = 0;\r\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in U axis */\r\n    public invertU = 0;\r\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in B axis */\r\n    public invertV = 0;\r\n    /** Gets or sets a boolean indicating that this sprite should be disposed after animation ends */\r\n    public disposeWhenFinishedAnimating: boolean;\r\n    /** Gets the list of attached animations */\r\n    public animations = new Array<Animation>();\r\n    /** Gets or sets a boolean indicating if the sprite can be picked */\r\n    public isPickable = false;\r\n\r\n    /**\r\n     * Gets or sets the associated action manager\r\n     */\r\n    public actionManager: Nullable<ActionManager>;\r\n\r\n    private _animationStarted = false;\r\n    private _loopAnimation = false;\r\n    private _fromIndex = 0;\r\n    private _toIndex = 0;\r\n    private _delay = 0;\r\n    private _direction = 1;\r\n    private _manager: ISpriteManager;\r\n    private _time = 0;\r\n    private _onAnimationEnd: () => void;\r\n    /**\r\n     * Gets or sets a boolean indicating if the sprite is visible (renderable). Default is true\r\n     */\r\n    public isVisible = true;\r\n\r\n    /**\r\n     * Gets or sets the sprite size\r\n     */\r\n    public get size(): number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: number) {\r\n        this.width = value;\r\n        this.height = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Sprite\r\n     * @param name defines the name\r\n     * @param manager defines the manager\r\n     */\r\n    constructor(\r\n        /** defines the name */\r\n        public name: string,\r\n        manager: ISpriteManager) {\r\n        this._manager = manager;\r\n\r\n        this._manager.sprites.push(this);\r\n\r\n        this.position = Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Starts an animation\r\n     * @param from defines the initial key\r\n     * @param to defines the end key\r\n     * @param loop defines if the animation must loop\r\n     * @param delay defines the start delay (in ms)\r\n     * @param onAnimationEnd defines a callback to call when animation ends\r\n     */\r\n    public playAnimation(from: number, to: number, loop: boolean, delay: number, onAnimationEnd: () => void): void {\r\n        this._fromIndex = from;\r\n        this._toIndex = to;\r\n        this._loopAnimation = loop;\r\n        this._delay = delay;\r\n        this._animationStarted = true;\r\n\r\n        if (from < to) {\r\n            this._direction = 1;\r\n        } else {\r\n            this._direction = -1;\r\n            this._toIndex = from;\r\n            this._fromIndex = to;\r\n        }\r\n\r\n        this.cellIndex = from;\r\n        this._time = 0;\r\n\r\n        this._onAnimationEnd = onAnimationEnd;\r\n    }\r\n\r\n    /** Stops current animation (if any) */\r\n    public stopAnimation(): void {\r\n        this._animationStarted = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _animate(deltaTime: number): void {\r\n        if (!this._animationStarted) {\r\n            return;\r\n        }\r\n\r\n        this._time += deltaTime;\r\n        if (this._time > this._delay) {\r\n            this._time = this._time % this._delay;\r\n            this.cellIndex += this._direction;\r\n            if (this._direction > 0 && this.cellIndex > this._toIndex || this._direction < 0 && this.cellIndex < this._fromIndex) {\r\n                if (this._loopAnimation) {\r\n                    this.cellIndex = this._direction > 0 ? this._fromIndex : this._toIndex;\r\n                } else {\r\n                    this.cellIndex = this._toIndex;\r\n                    this._animationStarted = false;\r\n                    if (this._onAnimationEnd) {\r\n                        this._onAnimationEnd();\r\n                    }\r\n                    if (this.disposeWhenFinishedAnimating) {\r\n                        this.dispose();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        for (var i = 0; i < this._manager.sprites.length; i++) {\r\n            if (this._manager.sprites[i] == this) {\r\n                this._manager.sprites.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}