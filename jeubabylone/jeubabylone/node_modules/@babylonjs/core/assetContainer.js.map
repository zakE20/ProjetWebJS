{"version":3,"file":"assetContainer.js","sourceRoot":"","sources":["../../sourceES6/core/assetContainer.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractScene } from \"./abstractScene\";\r\nimport { Scene } from \"./scene\";\r\nimport { Mesh } from \"./Meshes/mesh\";\r\n\r\n/**\r\n * Set of assets to keep when moving a scene into an asset container.\r\n */\r\nexport class KeepAssets extends AbstractScene { }\r\n\r\n/**\r\n * Container with a set of assets that can be added or removed from a scene.\r\n */\r\nexport class AssetContainer extends AbstractScene {\r\n    /**\r\n     * The scene the AssetContainer belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Instantiates an AssetContainer.\r\n     * @param scene The scene the AssetContainer belongs to.\r\n     */\r\n    constructor(scene: Scene) {\r\n        super();\r\n        this.scene = scene;\r\n        this[\"sounds\"] = [];\r\n        this[\"effectLayers\"] = [];\r\n        this[\"layers\"] = [];\r\n        this[\"lensFlareSystems\"] = [];\r\n        this[\"proceduralTextures\"] = [];\r\n        this[\"reflectionProbes\"] = [];\r\n    }\r\n\r\n    /**\r\n     * Adds all the assets from the container to the scene.\r\n     */\r\n    public addAllToScene() {\r\n        this.cameras.forEach((o) => {\r\n            this.scene.addCamera(o);\r\n        });\r\n        this.lights.forEach((o) => {\r\n            this.scene.addLight(o);\r\n        });\r\n        this.meshes.forEach((o) => {\r\n            this.scene.addMesh(o);\r\n        });\r\n        this.skeletons.forEach((o) => {\r\n            this.scene.addSkeleton(o);\r\n        });\r\n        this.animations.forEach((o) => {\r\n            this.scene.addAnimation(o);\r\n        });\r\n        this.animationGroups.forEach((o) => {\r\n            this.scene.addAnimationGroup(o);\r\n        });\r\n        this.multiMaterials.forEach((o) => {\r\n            this.scene.addMultiMaterial(o);\r\n        });\r\n        this.materials.forEach((o) => {\r\n            this.scene.addMaterial(o);\r\n        });\r\n        this.morphTargetManagers.forEach((o) => {\r\n            this.scene.addMorphTargetManager(o);\r\n        });\r\n        this.geometries.forEach((o) => {\r\n            this.scene.addGeometry(o);\r\n        });\r\n        this.transformNodes.forEach((o) => {\r\n            this.scene.addTransformNode(o);\r\n        });\r\n        this.actionManagers.forEach((o) => {\r\n            this.scene.addActionManager(o);\r\n        });\r\n        this.textures.forEach((o) => {\r\n            this.scene.addTexture(o);\r\n        });\r\n        this.reflectionProbes.forEach((o) => {\r\n            this.scene.addReflectionProbe(o);\r\n        });\r\n\r\n        if (this.environmentTexture) {\r\n            this.scene.environmentTexture = this.environmentTexture;\r\n        }\r\n\r\n        for (let component of this.scene._serializableComponents) {\r\n            component.addFromContainer(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all the assets in the container from the scene\r\n     */\r\n    public removeAllFromScene() {\r\n        this.cameras.forEach((o) => {\r\n            this.scene.removeCamera(o);\r\n        });\r\n        this.lights.forEach((o) => {\r\n            this.scene.removeLight(o);\r\n        });\r\n        this.meshes.forEach((o) => {\r\n            this.scene.removeMesh(o);\r\n        });\r\n        this.skeletons.forEach((o) => {\r\n            this.scene.removeSkeleton(o);\r\n        });\r\n        this.animations.forEach((o) => {\r\n            this.scene.removeAnimation(o);\r\n        });\r\n        this.animationGroups.forEach((o) => {\r\n            this.scene.removeAnimationGroup(o);\r\n        });\r\n        this.multiMaterials.forEach((o) => {\r\n            this.scene.removeMultiMaterial(o);\r\n        });\r\n        this.materials.forEach((o) => {\r\n            this.scene.removeMaterial(o);\r\n        });\r\n        this.morphTargetManagers.forEach((o) => {\r\n            this.scene.removeMorphTargetManager(o);\r\n        });\r\n        this.geometries.forEach((o) => {\r\n            this.scene.removeGeometry(o);\r\n        });\r\n        this.transformNodes.forEach((o) => {\r\n            this.scene.removeTransformNode(o);\r\n        });\r\n        this.actionManagers.forEach((o) => {\r\n            this.scene.removeActionManager(o);\r\n        });\r\n        this.textures.forEach((o) => {\r\n            this.scene.removeTexture(o);\r\n        });\r\n        this.reflectionProbes.forEach((o) => {\r\n            this.scene.removeReflectionProbe(o);\r\n        });\r\n\r\n        if (this.environmentTexture === this.scene.environmentTexture) {\r\n            this.scene.environmentTexture = null;\r\n        }\r\n\r\n        for (let component of this.scene._serializableComponents) {\r\n            component.removeFromContainer(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes all the assets in the container\r\n     */\r\n    public dispose() {\r\n        this.cameras.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.cameras = [];\r\n\r\n        this.lights.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.lights = [];\r\n\r\n        this.meshes.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.meshes = [];\r\n\r\n        this.skeletons.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.skeletons = [];\r\n\r\n        this.animationGroups.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.animationGroups = [];\r\n\r\n        this.multiMaterials.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.multiMaterials = [];\r\n\r\n        this.materials.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.materials = [];\r\n\r\n        this.geometries.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.geometries = [];\r\n\r\n        this.transformNodes.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.transformNodes = [];\r\n\r\n        this.actionManagers.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.actionManagers = [];\r\n\r\n        this.textures.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.textures = [];\r\n\r\n        this.reflectionProbes.forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.reflectionProbes = [];\r\n\r\n        if (this.environmentTexture) {\r\n            this.environmentTexture.dispose();\r\n            this.environmentTexture = null;\r\n        }\r\n\r\n        for (let component of this.scene._serializableComponents) {\r\n            component.removeFromContainer(this, true);\r\n        }\r\n    }\r\n\r\n    private _moveAssets<T>(sourceAssets: T[], targetAssets: T[], keepAssets: T[]): void {\r\n        if (!sourceAssets) {\r\n            return;\r\n        }\r\n\r\n        for (let asset of sourceAssets) {\r\n            let move = true;\r\n            if (keepAssets) {\r\n                for (let keepAsset of keepAssets) {\r\n                    if (asset === keepAsset) {\r\n                        move = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (move) {\r\n                targetAssets.push(asset);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all the assets contained in the scene and adds them to the container.\r\n     * @param keepAssets Set of assets to keep in the scene. (default: empty)\r\n     */\r\n    public moveAllFromScene(keepAssets?: KeepAssets): void {\r\n\r\n        if (keepAssets === undefined) {\r\n            keepAssets = new KeepAssets();\r\n        }\r\n\r\n        for (let key in this) {\r\n            if (this.hasOwnProperty(key)) {\r\n                (<any>this)[key] = (<any>this)[key] || [];\r\n                this._moveAssets((<any>this.scene)[key], (<any>this)[key], (<any>keepAssets)[key]);\r\n            }\r\n        }\r\n\r\n        this.removeAllFromScene();\r\n    }\r\n\r\n    /**\r\n     * Adds all meshes in the asset container to a root mesh that can be used to position all the contained meshes. The root mesh is then added to the front of the meshes in the assetContainer.\r\n     * @returns the root mesh\r\n     */\r\n    public createRootMesh() {\r\n        var rootMesh = new Mesh(\"assetContainerRootMesh\", this.scene);\r\n        this.meshes.forEach((m) => {\r\n            if (!m.parent) {\r\n                rootMesh.addChild(m);\r\n            }\r\n        });\r\n        this.meshes.unshift(rootMesh);\r\n        return rootMesh;\r\n    }\r\n}\r\n"]}