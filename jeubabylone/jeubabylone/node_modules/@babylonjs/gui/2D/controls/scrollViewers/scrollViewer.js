import * as tslib_1 from "tslib";
import { PointerEventTypes } from "@babylonjs/core/Events/pointerEvents";
import { Rectangle } from "../rectangle";
import { Grid } from "../grid";
import { Control } from "../control";
import { _ScrollViewerWindow } from "./scrollViewerWindow";
import { ScrollBar } from "../sliders/scrollBar";
/**
 * Class used to hold a viewer window and sliders in a grid
*/
var ScrollViewer = /** @class */ (function (_super) {
    tslib_1.__extends(ScrollViewer, _super);
    /**
    * Creates a new ScrollViewer
    * @param name of ScrollViewer
    */
    function ScrollViewer(name) {
        var _this = _super.call(this, name) || this;
        _this._barSize = 20;
        _this._pointerIsOver = false;
        _this._wheelPrecision = 0.05;
        _this.onDirtyObservable.add(function () {
            _this._horizontalBarSpace.color = _this.color;
            _this._verticalBarSpace.color = _this.color;
            _this._dragSpace.color = _this.color;
        });
        _this.onPointerEnterObservable.add(function () {
            _this._pointerIsOver = true;
        });
        _this.onPointerOutObservable.add(function () {
            _this._pointerIsOver = false;
        });
        _this._grid = new Grid();
        _this._horizontalBar = new ScrollBar();
        _this._verticalBar = new ScrollBar();
        _this._window = new _ScrollViewerWindow();
        _this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;
        _this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;
        _this._grid.addColumnDefinition(1);
        _this._grid.addColumnDefinition(0, true);
        _this._grid.addRowDefinition(1);
        _this._grid.addRowDefinition(0, true);
        _super.prototype.addControl.call(_this, _this._grid);
        _this._grid.addControl(_this._window, 0, 0);
        _this._verticalBar.paddingLeft = 0;
        _this._verticalBar.width = "100%";
        _this._verticalBar.height = "100%";
        _this._verticalBar.barOffset = 0;
        _this._verticalBar.value = 0;
        _this._verticalBar.maximum = 1;
        _this._verticalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;
        _this._verticalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;
        _this._verticalBar.isVertical = true;
        _this._verticalBar.rotation = Math.PI;
        _this._verticalBar.isVisible = false;
        _this._verticalBarSpace = new Rectangle();
        _this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;
        _this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;
        _this._verticalBarSpace.thickness = 1;
        _this._grid.addControl(_this._verticalBarSpace, 0, 1);
        _this._verticalBarSpace.addControl(_this._verticalBar);
        _this._verticalBar.onValueChangedObservable.add(function (value) {
            _this._window.top = value * _this._endTop + "px";
        });
        _this._horizontalBar.paddingLeft = 0;
        _this._horizontalBar.width = "100%";
        _this._horizontalBar.height = "100%";
        _this._horizontalBar.barOffset = 0;
        _this._horizontalBar.value = 0;
        _this._horizontalBar.maximum = 1;
        _this._horizontalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;
        _this._horizontalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;
        _this._horizontalBar.isVisible = false;
        _this._horizontalBarSpace = new Rectangle();
        _this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;
        _this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;
        _this._horizontalBarSpace.thickness = 1;
        _this._grid.addControl(_this._horizontalBarSpace, 1, 0);
        _this._horizontalBarSpace.addControl(_this._horizontalBar);
        _this._horizontalBar.onValueChangedObservable.add(function (value) {
            _this._window.left = value * _this._endLeft + "px";
        });
        _this._dragSpace = new Rectangle();
        _this._dragSpace.thickness = 1;
        _this._grid.addControl(_this._dragSpace, 1, 1);
        // Colors
        _this.barColor = "grey";
        _this.barBackground = "transparent";
        return _this;
    }
    Object.defineProperty(ScrollViewer.prototype, "horizontalBar", {
        /**
         * Gets the horizontal scrollbar
         */
        get: function () {
            return this._horizontalBar;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "verticalBar", {
        /**
         * Gets the vertical scrollbar
         */
        get: function () {
            return this._verticalBar;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new control to the current container
     * @param control defines the control to add
     * @returns the current container
     */
    ScrollViewer.prototype.addControl = function (control) {
        if (!control) {
            return this;
        }
        this._window.addControl(control);
        return this;
    };
    /**
     * Removes a control from the current container
     * @param control defines the control to remove
     * @returns the current container
     */
    ScrollViewer.prototype.removeControl = function (control) {
        this._window.removeControl(control);
        return this;
    };
    Object.defineProperty(ScrollViewer.prototype, "children", {
        /** Gets the list of children */
        get: function () {
            return this._window.children;
        },
        enumerable: true,
        configurable: true
    });
    ScrollViewer.prototype._flagDescendantsAsMatrixDirty = function () {
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            child._markMatrixAsDirty();
        }
    };
    /** Reset the scroll viewer window to initial size */
    ScrollViewer.prototype.resetWindow = function () {
        this._window.width = "100%";
        this._window.height = "100%";
    };
    ScrollViewer.prototype._getTypeName = function () {
        return "ScrollViewer";
    };
    ScrollViewer.prototype._buildClientSizes = function () {
        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;
        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;
        this._clientWidth = this._window.parentClientWidth;
        this._clientHeight = this._window.parentClientHeight;
    };
    ScrollViewer.prototype._additionalProcessing = function (parentMeasure, context) {
        _super.prototype._additionalProcessing.call(this, parentMeasure, context);
        this._buildClientSizes();
    };
    ScrollViewer.prototype._postMeasure = function () {
        _super.prototype._postMeasure.call(this);
        this._updateScroller();
    };
    Object.defineProperty(ScrollViewer.prototype, "wheelPrecision", {
        /**
         * Gets or sets the mouse wheel precision
         * from 0 to 1 with a default value of 0.05
         * */
        get: function () {
            return this._wheelPrecision;
        },
        set: function (value) {
            if (this._wheelPrecision === value) {
                return;
            }
            if (value < 0) {
                value = 0;
            }
            if (value > 1) {
                value = 1;
            }
            this._wheelPrecision = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "barColor", {
        /** Gets or sets the bar color */
        get: function () {
            return this._barColor;
        },
        set: function (color) {
            if (this._barColor === color) {
                return;
            }
            this._barColor = color;
            this._horizontalBar.color = color;
            this._verticalBar.color = color;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "barSize", {
        /** Gets or sets the size of the bar */
        get: function () {
            return this._barSize;
        },
        set: function (value) {
            if (this._barSize === value) {
                return;
            }
            this._barSize = value;
            this._markAsDirty();
            if (this._horizontalBar.isVisible) {
                this._grid.setRowDefinition(1, this._barSize, true);
            }
            if (this._verticalBar.isVisible) {
                this._grid.setColumnDefinition(1, this._barSize, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "barBackground", {
        /** Gets or sets the bar background */
        get: function () {
            return this._barBackground;
        },
        set: function (color) {
            if (this._barBackground === color) {
                return;
            }
            this._barBackground = color;
            this._horizontalBar.background = color;
            this._verticalBar.background = color;
            this._dragSpace.background = color;
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    ScrollViewer.prototype._updateScroller = function () {
        var windowContentsWidth = this._window._currentMeasure.width;
        var windowContentsHeight = this._window._currentMeasure.height;
        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth) {
            this._grid.setRowDefinition(1, 0, true);
            this._horizontalBar.isVisible = false;
            this._horizontalBar.value = 0;
            this._rebuildLayout = true;
        }
        else if (!this._horizontalBar.isVisible && windowContentsWidth > this._clientWidth) {
            this._grid.setRowDefinition(1, this._barSize, true);
            this._horizontalBar.isVisible = true;
            this._rebuildLayout = true;
        }
        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight) {
            this._grid.setColumnDefinition(1, 0, true);
            this._verticalBar.isVisible = false;
            this._verticalBar.value = 0;
            this._rebuildLayout = true;
        }
        else if (!this._verticalBar.isVisible && windowContentsHeight > this._clientHeight) {
            this._grid.setColumnDefinition(1, this._barSize, true);
            this._verticalBar.isVisible = true;
            this._rebuildLayout = true;
        }
        this._buildClientSizes();
        this._endLeft = this._clientWidth - windowContentsWidth;
        this._endTop = this._clientHeight - windowContentsHeight;
        var newLeft = this._horizontalBar.value * this._endLeft + "px";
        var newTop = this._verticalBar.value * this._endTop + "px";
        if (newLeft !== this._window.left) {
            this._window.left = newLeft;
            this._rebuildLayout = true;
        }
        if (newTop !== this._window.top) {
            this._window.top = newTop;
            this._rebuildLayout = true;
        }
        var horizontalMultiplicator = this._clientWidth / windowContentsWidth;
        var verticalMultiplicator = this._clientHeight / windowContentsHeight;
        this._horizontalBar.thumbWidth = (this._clientWidth * horizontalMultiplicator) + "px";
        this._verticalBar.thumbWidth = (this._clientHeight * verticalMultiplicator) + "px";
    };
    ScrollViewer.prototype._link = function (host) {
        _super.prototype._link.call(this, host);
        this._attachWheel();
    };
    /** @hidden */
    ScrollViewer.prototype._attachWheel = function () {
        var _this = this;
        if (!this._host || this._onPointerObserver) {
            return;
        }
        var scene = this._host.getScene();
        this._onPointerObserver = scene.onPointerObservable.add(function (pi, state) {
            if (!_this._pointerIsOver || pi.type !== PointerEventTypes.POINTERWHEEL) {
                return;
            }
            if (_this._verticalBar.isVisible == true) {
                if (pi.event.deltaY < 0 && _this._verticalBar.value > 0) {
                    _this._verticalBar.value -= _this._wheelPrecision;
                }
                else if (pi.event.deltaY > 0 && _this._verticalBar.value < _this._verticalBar.maximum) {
                    _this._verticalBar.value += _this._wheelPrecision;
                }
            }
            if (_this._horizontalBar.isVisible == true) {
                if (pi.event.deltaX < 0 && _this._horizontalBar.value < _this._horizontalBar.maximum) {
                    _this._horizontalBar.value += _this._wheelPrecision;
                }
                else if (pi.event.deltaX > 0 && _this._horizontalBar.value > 0) {
                    _this._horizontalBar.value -= _this._wheelPrecision;
                }
            }
        });
    };
    ScrollViewer.prototype._renderHighlightSpecific = function (context) {
        if (!this.isHighlighted) {
            return;
        }
        _super.prototype._renderHighlightSpecific.call(this, context);
        this._grid._renderHighlightSpecific(context);
        context.restore();
    };
    /** Releases associated resources */
    ScrollViewer.prototype.dispose = function () {
        var scene = this._host.getScene();
        if (scene && this._onPointerObserver) {
            scene.onPointerObservable.remove(this._onPointerObserver);
            this._onPointerObserver = null;
        }
        _super.prototype.dispose.call(this);
    };
    return ScrollViewer;
}(Rectangle));
export { ScrollViewer };
//# sourceMappingURL=scrollViewer.js.map