{"version":3,"file":"glTFFileLoader.js","sourceRoot":"","sources":["../../../sourceES6/loaders/src/glTF/glTFFileLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Camera } from \"@babylonjs/core/Cameras/camera\";\r\nimport { AnimationGroup } from \"@babylonjs/core/Animations/animationGroup\";\r\nimport { Skeleton } from \"@babylonjs/core/Bones/skeleton\";\r\nimport { IParticleSystem } from \"@babylonjs/core/Particles/IParticleSystem\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SceneLoader, ISceneLoaderPluginFactory, ISceneLoaderPlugin, ISceneLoaderPluginAsync, SceneLoaderProgressEvent, ISceneLoaderPluginExtensions } from \"@babylonjs/core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"@babylonjs/core/assetContainer\";\r\nimport { Scene, IDisposable } from \"@babylonjs/core/scene\";\r\n\r\nimport * as GLTF2 from \"babylonjs-gltf2interface\";\r\n\r\n/**\r\n * glTF validator object\r\n */\r\ndeclare var GLTFValidator: GLTF2.IGLTFValidator;\r\n\r\n/**\r\n * Mode that determines the coordinate system to use.\r\n */\r\nexport enum GLTFLoaderCoordinateSystemMode {\r\n    /**\r\n     * Automatically convert the glTF right-handed data to the appropriate system based on the current coordinate system mode of the scene.\r\n     */\r\n    AUTO,\r\n\r\n    /**\r\n     * Sets the useRightHandedSystem flag on the scene.\r\n     */\r\n    FORCE_RIGHT_HANDED,\r\n}\r\n\r\n/**\r\n * Mode that determines what animations will start.\r\n */\r\nexport enum GLTFLoaderAnimationStartMode {\r\n    /**\r\n     * No animation will start.\r\n     */\r\n    NONE,\r\n\r\n    /**\r\n     * The first animation will start.\r\n     */\r\n    FIRST,\r\n\r\n    /**\r\n     * All animations will start.\r\n     */\r\n    ALL,\r\n}\r\n\r\n/**\r\n * Interface that contains the data for the glTF asset.\r\n */\r\nexport interface IGLTFLoaderData {\r\n    /**\r\n     * Object that represents the glTF JSON.\r\n     */\r\n    json: Object;\r\n\r\n    /**\r\n     * The BIN chunk of a binary glTF.\r\n     */\r\n    bin: Nullable<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * Interface for extending the loader.\r\n */\r\nexport interface IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    enabled: boolean;\r\n}\r\n\r\n/**\r\n * Loader state.\r\n */\r\nexport enum GLTFLoaderState {\r\n    /**\r\n     * The asset is loading.\r\n     */\r\n    LOADING,\r\n\r\n    /**\r\n     * The asset is ready for rendering.\r\n     */\r\n    READY,\r\n\r\n    /**\r\n     * The asset is completely loaded.\r\n     */\r\n    COMPLETE\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFLoader extends IDisposable {\r\n    readonly state: Nullable<GLTFLoaderState>;\r\n    importMeshAsync: (meshesNames: any, scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string) => Promise<{ meshes: AbstractMesh[], particleSystems: IParticleSystem[], skeletons: Skeleton[], animationGroups: AnimationGroup[] }>;\r\n    loadAsync: (scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string) => Promise<void>;\r\n}\r\n\r\n/**\r\n * File loader for loading glTF files into a scene.\r\n */\r\nexport class GLTFFileLoader implements IDisposable, ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\r\n    /** @hidden */\r\n    public static _CreateGLTF1Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    /** @hidden */\r\n    public static _CreateGLTF2Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    // --------------\r\n    // Common options\r\n    // --------------\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public onParsedObservable = new Observable<IGLTFLoaderData>();\r\n\r\n    private _onParsedObserver: Nullable<Observer<IGLTFLoaderData>>;\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public set onParsed(callback: (loaderData: IGLTFLoaderData) => void) {\r\n        if (this._onParsedObserver) {\r\n            this.onParsedObservable.remove(this._onParsedObserver);\r\n        }\r\n        this._onParsedObserver = this.onParsedObservable.add(callback);\r\n    }\r\n\r\n    // ----------\r\n    // V1 options\r\n    // ----------\r\n\r\n    /**\r\n     * Set this property to false to disable incremental loading which delays the loader from calling the success callback until after loading the meshes and shaders.\r\n     * Textures always loads asynchronously. For example, the success callback can compute the bounding information of the loaded meshes when incremental loading is disabled.\r\n     * Defaults to true.\r\n     * @hidden\r\n     */\r\n    public static IncrementalLoading = true;\r\n\r\n    /**\r\n     * Set this property to true in order to work with homogeneous coordinates, available with some converters and exporters.\r\n     * Defaults to false. See https://en.wikipedia.org/wiki/Homogeneous_coordinates.\r\n     * @hidden\r\n     */\r\n    public static HomogeneousCoordinates = false;\r\n\r\n    // ----------\r\n    // V2 options\r\n    // ----------\r\n\r\n    /**\r\n     * The coordinate system mode. Defaults to AUTO.\r\n     */\r\n    public coordinateSystemMode = GLTFLoaderCoordinateSystemMode.AUTO;\r\n\r\n    /**\r\n    * The animation start mode. Defaults to FIRST.\r\n    */\r\n    public animationStartMode = GLTFLoaderAnimationStartMode.FIRST;\r\n\r\n    /**\r\n     * Defines if the loader should compile materials before raising the success callback. Defaults to false.\r\n     */\r\n    public compileMaterials = false;\r\n\r\n    /**\r\n     * Defines if the loader should also compile materials with clip planes. Defaults to false.\r\n     */\r\n    public useClipPlane = false;\r\n\r\n    /**\r\n     * Defines if the loader should compile shadow generators before raising the success callback. Defaults to false.\r\n     */\r\n    public compileShadowGenerators = false;\r\n\r\n    /**\r\n     * Defines if the Alpha blended materials are only applied as coverage.\r\n     * If false, (default) The luminance of each pixel will reduce its opacity to simulate the behaviour of most physical materials.\r\n     * If true, no extra effects are applied to transparent pixels.\r\n     */\r\n    public transparencyAsCoverage = false;\r\n\r\n    /**\r\n     * Function called before loading a url referenced by the asset.\r\n     */\r\n    public preprocessUrlAsync = (url: string) => Promise.resolve(url);\r\n\r\n    /**\r\n     * Observable raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     */\r\n    public readonly onMeshLoadedObservable = new Observable<AbstractMesh>();\r\n\r\n    private _onMeshLoadedObserver: Nullable<Observer<AbstractMesh>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     */\r\n    public set onMeshLoaded(callback: (mesh: AbstractMesh) => void) {\r\n        if (this._onMeshLoadedObserver) {\r\n            this.onMeshLoadedObservable.remove(this._onMeshLoadedObserver);\r\n        }\r\n        this._onMeshLoadedObserver = this.onMeshLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public readonly onTextureLoadedObservable = new Observable<BaseTexture>();\r\n\r\n    private _onTextureLoadedObserver: Nullable<Observer<BaseTexture>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public set onTextureLoaded(callback: (texture: BaseTexture) => void) {\r\n        if (this._onTextureLoadedObserver) {\r\n            this.onTextureLoadedObservable.remove(this._onTextureLoadedObserver);\r\n        }\r\n        this._onTextureLoadedObserver = this.onTextureLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public readonly onMaterialLoadedObservable = new Observable<Material>();\r\n\r\n    private _onMaterialLoadedObserver: Nullable<Observer<Material>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public set onMaterialLoaded(callback: (material: Material) => void) {\r\n        if (this._onMaterialLoadedObserver) {\r\n            this.onMaterialLoadedObservable.remove(this._onMaterialLoadedObserver);\r\n        }\r\n        this._onMaterialLoadedObserver = this.onMaterialLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public readonly onCameraLoadedObservable = new Observable<Camera>();\r\n\r\n    private _onCameraLoadedObserver: Nullable<Observer<Camera>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public set onCameraLoaded(callback: (camera: Camera) => void) {\r\n        if (this._onCameraLoadedObserver) {\r\n            this.onCameraLoadedObservable.remove(this._onCameraLoadedObserver);\r\n        }\r\n        this._onCameraLoadedObserver = this.onCameraLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public readonly onCompleteObservable = new Observable<void>();\r\n\r\n    private _onCompleteObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public set onComplete(callback: () => void) {\r\n        if (this._onCompleteObserver) {\r\n            this.onCompleteObservable.remove(this._onCompleteObserver);\r\n        }\r\n        this._onCompleteObserver = this.onCompleteObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when an error occurs.\r\n     */\r\n    public readonly onErrorObservable = new Observable<any>();\r\n\r\n    private _onErrorObserver: Nullable<Observer<any>>;\r\n\r\n    /**\r\n     * Callback raised when an error occurs.\r\n     */\r\n    public set onError(callback: (reason: any) => void) {\r\n        if (this._onErrorObserver) {\r\n            this.onErrorObservable.remove(this._onErrorObserver);\r\n        }\r\n        this._onErrorObserver = this.onErrorObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after the loader is disposed.\r\n     */\r\n    public readonly onDisposeObservable = new Observable<void>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised after the loader is disposed.\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after a loader extension is created.\r\n     * Set additional options for a loader extension in this event.\r\n     */\r\n    public readonly onExtensionLoadedObservable = new Observable<IGLTFLoaderExtension>();\r\n\r\n    private _onExtensionLoadedObserver: Nullable<Observer<IGLTFLoaderExtension>>;\r\n\r\n    /**\r\n     * Callback raised after a loader extension is created.\r\n     */\r\n    public set onExtensionLoaded(callback: (extension: IGLTFLoaderExtension) => void) {\r\n        if (this._onExtensionLoadedObserver) {\r\n            this.onExtensionLoadedObservable.remove(this._onExtensionLoadedObserver);\r\n        }\r\n        this._onExtensionLoadedObserver = this.onExtensionLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader logging is enabled.\r\n     */\r\n    public get loggingEnabled(): boolean {\r\n        return this._loggingEnabled;\r\n    }\r\n\r\n    public set loggingEnabled(value: boolean) {\r\n        if (this._loggingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._loggingEnabled = value;\r\n\r\n        if (this._loggingEnabled) {\r\n            this._log = this._logEnabled;\r\n        }\r\n        else {\r\n            this._log = this._logDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader should capture performance counters.\r\n     */\r\n    public get capturePerformanceCounters(): boolean {\r\n        return this._capturePerformanceCounters;\r\n    }\r\n\r\n    public set capturePerformanceCounters(value: boolean) {\r\n        if (this._capturePerformanceCounters === value) {\r\n            return;\r\n        }\r\n\r\n        this._capturePerformanceCounters = value;\r\n\r\n        if (this._capturePerformanceCounters) {\r\n            this._startPerformanceCounter = this._startPerformanceCounterEnabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterEnabled;\r\n        }\r\n        else {\r\n            this._startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader should validate the asset.\r\n     */\r\n    public validate = false;\r\n\r\n    /**\r\n     * Observable raised after validation when validate is set to true. The event data is the result of the validation.\r\n     */\r\n    public readonly onValidatedObservable = new Observable<GLTF2.IGLTFValidationResults>();\r\n\r\n    private _onValidatedObserver: Nullable<Observer<GLTF2.IGLTFValidationResults>>;\r\n\r\n    /**\r\n     * Callback raised after a loader extension is created.\r\n     */\r\n    public set onValidated(callback: (results: GLTF2.IGLTFValidationResults) => void) {\r\n        if (this._onValidatedObserver) {\r\n            this.onValidatedObservable.remove(this._onValidatedObserver);\r\n        }\r\n        this._onValidatedObserver = this.onValidatedObservable.add(callback);\r\n    }\r\n\r\n    private _loader: Nullable<IGLTFLoader> = null;\r\n\r\n    /**\r\n     * Name of the loader (\"gltf\")\r\n     */\r\n    public name = \"gltf\";\r\n\r\n    /**\r\n     * Supported file extensions of the loader (.gltf, .glb)\r\n     */\r\n    public extensions: ISceneLoaderPluginExtensions = {\r\n        \".gltf\": { isBinary: false },\r\n        \".glb\": { isBinary: true }\r\n    };\r\n\r\n    /**\r\n     * Disposes the loader, releases resources during load, and cancels any outstanding requests.\r\n     */\r\n    public dispose(): void {\r\n        if (this._loader) {\r\n            this._loader.dispose();\r\n            this._loader = null;\r\n        }\r\n\r\n        this._clear();\r\n\r\n        this.onDisposeObservable.notifyObservers(undefined);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _clear(): void {\r\n        this.preprocessUrlAsync = (url) => Promise.resolve(url);\r\n\r\n        this.onMeshLoadedObservable.clear();\r\n        this.onTextureLoadedObservable.clear();\r\n        this.onMaterialLoadedObservable.clear();\r\n        this.onCameraLoadedObservable.clear();\r\n        this.onCompleteObservable.clear();\r\n        this.onExtensionLoadedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Imports one or more meshes from the loaded glTF data and adds them to the scene\r\n     * @param meshesNames a string or array of strings of the mesh names that should be loaded from the file\r\n     * @param scene the scene the meshes should be added to\r\n     * @param data the glTF data to load\r\n     * @param rootUrl root url to load from\r\n     * @param onProgress event that fires when loading progress has occured\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns a promise containg the loaded meshes, particles, skeletons and animations\r\n     */\r\n    public importMeshAsync(meshesNames: any, scene: Scene, data: any, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string): Promise<{ meshes: AbstractMesh[], particleSystems: IParticleSystem[], skeletons: Skeleton[], animationGroups: AnimationGroup[] }> {\r\n        return this._parseAsync(scene, data, rootUrl, fileName).then((loaderData) => {\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(loaderData);\r\n            return this._loader.importMeshAsync(meshesNames, scene, loaderData, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Imports all objects from the loaded glTF data and adds them to the scene\r\n     * @param scene the scene the objects should be added to\r\n     * @param data the glTF data to load\r\n     * @param rootUrl root url to load from\r\n     * @param onProgress event that fires when loading progress has occured\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns a promise which completes when objects have been loaded to the scene\r\n     */\r\n    public loadAsync(scene: Scene, data: string | ArrayBuffer, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string): Promise<void> {\r\n        return this._parseAsync(scene, data, rootUrl, fileName).then((loaderData) => {\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(loaderData);\r\n            return this._loader.loadAsync(scene, loaderData, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns The loaded asset container\r\n     */\r\n    public loadAssetContainerAsync(scene: Scene, data: string | ArrayBuffer, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string): Promise<AssetContainer> {\r\n        return this._parseAsync(scene, data, rootUrl, fileName).then((loaderData) => {\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(loaderData);\r\n\r\n            // Get materials/textures when loading to add to container\r\n            let materials: Array<Material> = [];\r\n            this.onMaterialLoadedObservable.add((material) => {\r\n                materials.push(material);\r\n            });\r\n            let textures: Array<BaseTexture> = [];\r\n            this.onTextureLoadedObservable.add((texture) => {\r\n                textures.push(texture);\r\n            });\r\n\r\n            return this._loader.importMeshAsync(null, scene, loaderData, rootUrl, onProgress, fileName).then((result) => {\r\n                const container = new AssetContainer(scene);\r\n                Array.prototype.push.apply(container.meshes, result.meshes);\r\n                Array.prototype.push.apply(container.particleSystems, result.particleSystems);\r\n                Array.prototype.push.apply(container.skeletons, result.skeletons);\r\n                Array.prototype.push.apply(container.animationGroups, result.animationGroups);\r\n                Array.prototype.push.apply(container.materials, materials);\r\n                Array.prototype.push.apply(container.textures, textures);\r\n                container.removeAllFromScene();\r\n                return container;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * If the data string can be loaded directly.\r\n     * @param data string contianing the file data\r\n     * @returns if the data can be loaded directly\r\n     */\r\n    public canDirectLoad(data: string): boolean {\r\n        return ((data.indexOf(\"scene\") !== -1) && (data.indexOf(\"node\") !== -1));\r\n    }\r\n\r\n    /**\r\n     * Rewrites a url by combining a root url and response url.\r\n     */\r\n    public rewriteRootURL: (rootUrl: string, responseURL?: string) => string;\r\n\r\n    /**\r\n     * Instantiates a glTF file loader plugin.\r\n     * @returns the created plugin\r\n     */\r\n    public createPlugin(): ISceneLoaderPlugin | ISceneLoaderPluginAsync {\r\n        return new GLTFFileLoader();\r\n    }\r\n\r\n    /**\r\n     * The loader state or null if the loader is not active.\r\n     */\r\n    public get loaderState(): Nullable<GLTFLoaderState> {\r\n        return this._loader ? this._loader.state : null;\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves when the asset is completely loaded.\r\n     * @returns a promise that resolves when the asset is completely loaded.\r\n     */\r\n    public whenCompleteAsync(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onCompleteObservable.addOnce(() => {\r\n                resolve();\r\n            });\r\n            this.onErrorObservable.addOnce((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    private _parseAsync(scene: Scene, data: string | ArrayBuffer, rootUrl: string, fileName?: string): Promise<IGLTFLoaderData> {\r\n        return Promise.resolve().then(() => {\r\n            return this._validateAsync(scene, data, rootUrl, fileName).then(() => {\r\n                const unpacked = (data instanceof ArrayBuffer) ? this._unpackBinary(data) : { json: data, bin: null };\r\n\r\n                this._startPerformanceCounter(\"Parse JSON\");\r\n                this._log(`JSON length: ${unpacked.json.length}`);\r\n\r\n                const loaderData: IGLTFLoaderData = {\r\n                    json: JSON.parse(unpacked.json),\r\n                    bin: unpacked.bin\r\n                };\r\n\r\n                this._endPerformanceCounter(\"Parse JSON\");\r\n\r\n                this.onParsedObservable.notifyObservers(loaderData);\r\n                this.onParsedObservable.clear();\r\n\r\n                return loaderData;\r\n            });\r\n        });\r\n    }\r\n\r\n    private _validateAsync(scene: Scene, data: string | ArrayBuffer, rootUrl: string, fileName?: string): Promise<void> {\r\n        if (!this.validate || typeof GLTFValidator === \"undefined\") {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._startPerformanceCounter(\"Validate JSON\");\r\n\r\n        const options: GLTF2.IGLTFValidationOptions = {\r\n            externalResourceFunction: (uri) => {\r\n                return this.preprocessUrlAsync(rootUrl + uri)\r\n                    .then((url) => scene._loadFileAsync(url, true, true))\r\n                    .then((data) => new Uint8Array(data as ArrayBuffer));\r\n            }\r\n        };\r\n\r\n        if (fileName && fileName.substr(0, 5) !== \"data:\") {\r\n            options.uri = (rootUrl === \"file:\" ? fileName : `${rootUrl}${fileName}`);\r\n        }\r\n\r\n        const promise = (data instanceof ArrayBuffer)\r\n            ? GLTFValidator.validateBytes(new Uint8Array(data), options)\r\n            : GLTFValidator.validateString(data, options);\r\n\r\n        return promise.then((result) => {\r\n            this._endPerformanceCounter(\"Validate JSON\");\r\n            this.onValidatedObservable.notifyObservers(result);\r\n            this.onValidatedObservable.clear();\r\n        }, (reason) => {\r\n            this._endPerformanceCounter(\"Validate JSON\");\r\n            Tools.Warn(`Failed to validate: ${reason}`);\r\n            this.onValidatedObservable.clear();\r\n        });\r\n    }\r\n\r\n    private _getLoader(loaderData: IGLTFLoaderData): IGLTFLoader {\r\n        const asset = (<any>loaderData.json).asset || {};\r\n\r\n        this._log(`Asset version: ${asset.version}`);\r\n        asset.minVersion && this._log(`Asset minimum version: ${asset.minVersion}`);\r\n        asset.generator && this._log(`Asset generator: ${asset.generator}`);\r\n\r\n        const version = GLTFFileLoader._parseVersion(asset.version);\r\n        if (!version) {\r\n            throw new Error(\"Invalid version: \" + asset.version);\r\n        }\r\n\r\n        if (asset.minVersion !== undefined) {\r\n            const minVersion = GLTFFileLoader._parseVersion(asset.minVersion);\r\n            if (!minVersion) {\r\n                throw new Error(\"Invalid minimum version: \" + asset.minVersion);\r\n            }\r\n\r\n            if (GLTFFileLoader._compareVersion(minVersion, { major: 2, minor: 0 }) > 0) {\r\n                throw new Error(\"Incompatible minimum version: \" + asset.minVersion);\r\n            }\r\n        }\r\n\r\n        const createLoaders: { [key: number]: (parent: GLTFFileLoader) => IGLTFLoader } = {\r\n            1: GLTFFileLoader._CreateGLTF1Loader,\r\n            2: GLTFFileLoader._CreateGLTF2Loader\r\n        };\r\n\r\n        const createLoader = createLoaders[version.major];\r\n        if (!createLoader) {\r\n            throw new Error(\"Unsupported version: \" + asset.version);\r\n        }\r\n\r\n        return createLoader(this);\r\n    }\r\n\r\n    private _unpackBinary(data: ArrayBuffer): { json: string, bin: Nullable<ArrayBufferView> } {\r\n        this._startPerformanceCounter(\"Unpack binary\");\r\n        this._log(`Binary length: ${data.byteLength}`);\r\n\r\n        const Binary = {\r\n            Magic: 0x46546C67\r\n        };\r\n\r\n        const binaryReader = new BinaryReader(data);\r\n\r\n        const magic = binaryReader.readUint32();\r\n        if (magic !== Binary.Magic) {\r\n            throw new Error(\"Unexpected magic: \" + magic);\r\n        }\r\n\r\n        const version = binaryReader.readUint32();\r\n\r\n        if (this.loggingEnabled) {\r\n            this._log(`Binary version: ${version}`);\r\n        }\r\n\r\n        let unpacked: { json: string, bin: Nullable<ArrayBufferView> };\r\n        switch (version) {\r\n            case 1: {\r\n                unpacked = this._unpackBinaryV1(binaryReader);\r\n                break;\r\n            }\r\n            case 2: {\r\n                unpacked = this._unpackBinaryV2(binaryReader);\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(\"Unsupported version: \" + version);\r\n            }\r\n        }\r\n\r\n        this._endPerformanceCounter(\"Unpack binary\");\r\n        return unpacked;\r\n    }\r\n\r\n    private _unpackBinaryV1(binaryReader: BinaryReader): { json: string, bin: Nullable<ArrayBufferView> } {\r\n        const ContentFormat = {\r\n            JSON: 0\r\n        };\r\n\r\n        const length = binaryReader.readUint32();\r\n        if (length != binaryReader.getLength()) {\r\n            throw new Error(\"Length in header does not match actual data length: \" + length + \" != \" + binaryReader.getLength());\r\n        }\r\n\r\n        const contentLength = binaryReader.readUint32();\r\n        const contentFormat = binaryReader.readUint32();\r\n\r\n        let content: string;\r\n        switch (contentFormat) {\r\n            case ContentFormat.JSON: {\r\n                content = GLTFFileLoader._decodeBufferToText(binaryReader.readUint8Array(contentLength));\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(\"Unexpected content format: \" + contentFormat);\r\n            }\r\n        }\r\n\r\n        const bytesRemaining = binaryReader.getLength() - binaryReader.getPosition();\r\n        const body = binaryReader.readUint8Array(bytesRemaining);\r\n\r\n        return {\r\n            json: content,\r\n            bin: body\r\n        };\r\n    }\r\n\r\n    private _unpackBinaryV2(binaryReader: BinaryReader): { json: string, bin: Nullable<ArrayBufferView> } {\r\n        const ChunkFormat = {\r\n            JSON: 0x4E4F534A,\r\n            BIN: 0x004E4942\r\n        };\r\n\r\n        const length = binaryReader.readUint32();\r\n        if (length !== binaryReader.getLength()) {\r\n            throw new Error(\"Length in header does not match actual data length: \" + length + \" != \" + binaryReader.getLength());\r\n        }\r\n\r\n        // JSON chunk\r\n        const chunkLength = binaryReader.readUint32();\r\n        const chunkFormat = binaryReader.readUint32();\r\n        if (chunkFormat !== ChunkFormat.JSON) {\r\n            throw new Error(\"First chunk format is not JSON\");\r\n        }\r\n        const json = GLTFFileLoader._decodeBufferToText(binaryReader.readUint8Array(chunkLength));\r\n\r\n        // Look for BIN chunk\r\n        let bin: Nullable<Uint8Array> = null;\r\n        while (binaryReader.getPosition() < binaryReader.getLength()) {\r\n            const chunkLength = binaryReader.readUint32();\r\n            const chunkFormat = binaryReader.readUint32();\r\n            switch (chunkFormat) {\r\n                case ChunkFormat.JSON: {\r\n                    throw new Error(\"Unexpected JSON chunk\");\r\n                }\r\n                case ChunkFormat.BIN: {\r\n                    bin = binaryReader.readUint8Array(chunkLength);\r\n                    break;\r\n                }\r\n                default: {\r\n                    // ignore unrecognized chunkFormat\r\n                    binaryReader.skipBytes(chunkLength);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            json: json,\r\n            bin: bin\r\n        };\r\n    }\r\n\r\n    private static _parseVersion(version: string): Nullable<{ major: number, minor: number }> {\r\n        if (version === \"1.0\" || version === \"1.0.1\") {\r\n            return {\r\n                major: 1,\r\n                minor: 0\r\n            };\r\n        }\r\n\r\n        const match = (version + \"\").match(/^(\\d+)\\.(\\d+)/);\r\n        if (!match) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            major: parseInt(match[1]),\r\n            minor: parseInt(match[2])\r\n        };\r\n    }\r\n\r\n    private static _compareVersion(a: { major: number, minor: number }, b: { major: number, minor: number }): number {\r\n        if (a.major > b.major) { return 1; }\r\n        if (a.major < b.major) { return -1; }\r\n        if (a.minor > b.minor) { return 1; }\r\n        if (a.minor < b.minor) { return -1; }\r\n        return 0;\r\n    }\r\n\r\n    private static _decodeBufferToText(buffer: Uint8Array): string {\r\n        if (typeof TextDecoder !== \"undefined\") {\r\n            return new TextDecoder().decode(buffer);\r\n        }\r\n\r\n        let result = \"\";\r\n        const length = buffer.byteLength;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            result += String.fromCharCode(buffer[i]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private static readonly _logSpaces = \"                                \";\r\n    private _logIndentLevel = 0;\r\n    private _loggingEnabled = false;\r\n\r\n    /** @hidden */\r\n    public _log = this._logDisabled;\r\n\r\n    /** @hidden */\r\n    public _logOpen(message: string): void {\r\n        this._log(message);\r\n        this._logIndentLevel++;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _logClose(): void {\r\n        --this._logIndentLevel;\r\n    }\r\n\r\n    private _logEnabled(message: string): void {\r\n        const spaces = GLTFFileLoader._logSpaces.substr(0, this._logIndentLevel * 2);\r\n        Tools.Log(`${spaces}${message}`);\r\n    }\r\n\r\n    private _logDisabled(message: string): void {\r\n    }\r\n\r\n    private _capturePerformanceCounters = false;\r\n\r\n    /** @hidden */\r\n    public _startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n\r\n    /** @hidden */\r\n    public _endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n\r\n    private _startPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.StartPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _startPerformanceCounterDisabled(counterName: string): void {\r\n    }\r\n\r\n    private _endPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.EndPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _endPerformanceCounterDisabled(counterName: string): void {\r\n    }\r\n}\r\n\r\nclass BinaryReader {\r\n    private _arrayBuffer: ArrayBuffer;\r\n    private _dataView: DataView;\r\n    private _byteOffset: number;\r\n\r\n    constructor(arrayBuffer: ArrayBuffer) {\r\n        this._arrayBuffer = arrayBuffer;\r\n        this._dataView = new DataView(arrayBuffer);\r\n        this._byteOffset = 0;\r\n    }\r\n\r\n    public getPosition(): number {\r\n        return this._byteOffset;\r\n    }\r\n\r\n    public getLength(): number {\r\n        return this._arrayBuffer.byteLength;\r\n    }\r\n\r\n    public readUint32(): number {\r\n        const value = this._dataView.getUint32(this._byteOffset, true);\r\n        this._byteOffset += 4;\r\n        return value;\r\n    }\r\n\r\n    public readUint8Array(length: number): Uint8Array {\r\n        const value = new Uint8Array(this._arrayBuffer, this._byteOffset, length);\r\n        this._byteOffset += length;\r\n        return value;\r\n    }\r\n\r\n    public skipBytes(length: number): void {\r\n        this._byteOffset += length;\r\n    }\r\n}\r\n\r\nif (SceneLoader) {\r\n    SceneLoader.RegisterPlugin(new GLTFFileLoader());\r\n}\r\n"]}