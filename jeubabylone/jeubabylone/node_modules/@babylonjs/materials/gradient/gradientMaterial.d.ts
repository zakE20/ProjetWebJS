import { Nullable } from "@babylonjs/core/types";
import { Color3, Matrix } from "@babylonjs/core/Maths/math";
import { IAnimatable } from "@babylonjs/core/Misc/tools";
import { BaseTexture } from "@babylonjs/core/Materials/Textures/baseTexture";
import { PushMaterial } from "@babylonjs/core/Materials/pushMaterial";
import { AbstractMesh } from "@babylonjs/core/Meshes/abstractMesh";
import { SubMesh } from "@babylonjs/core/Meshes/subMesh";
import { Mesh } from "@babylonjs/core/Meshes/mesh";
import { Scene } from "@babylonjs/core/scene";
import "./gradient.fragment";
import "./gradient.vertex";
export declare class GradientMaterial extends PushMaterial {
    private _maxSimultaneousLights;
    maxSimultaneousLights: number;
    topColor: Color3;
    topColorAlpha: number;
    bottomColor: Color3;
    bottomColorAlpha: number;
    offset: number;
    scale: number;
    smoothness: number;
    private _disableLighting;
    disableLighting: boolean;
    private _renderId;
    constructor(name: string, scene: Scene);
    needAlphaBlending(): boolean;
    needAlphaTesting(): boolean;
    getAlphaTestTexture(): Nullable<BaseTexture>;
    isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean;
    bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void;
    getAnimatables(): IAnimatable[];
    dispose(forceDisposeEffect?: boolean): void;
    clone(name: string): GradientMaterial;
    serialize(): any;
    getClassName(): string;
    static Parse(source: any, scene: Scene, rootUrl: string): GradientMaterial;
}
